
f103_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008570  08008570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085bc  080085bc  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  080085bc  080085bc  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085bc  080085bc  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085bc  080085bc  000085bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085c0  080085c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080085c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080085d0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080085d0  00010108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c764  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b51  00000000  00000000  0001c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0001e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0d  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b35  00000000  00000000  0001fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d922  00000000  00000000  00037542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c83d  00000000  00000000  00044e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003790  00000000  00000000  000d16a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d4e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	2000000c 	.word	0x2000000c
 800512c:	00000000 	.word	0x00000000
 8005130:	08008558 	.word	0x08008558

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	20000010 	.word	0x20000010
 800514c:	08008558 	.word	0x08008558

08005150 <strlen>:
 8005150:	4603      	mov	r3, r0
 8005152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005156:	2a00      	cmp	r2, #0
 8005158:	d1fb      	bne.n	8005152 <strlen+0x2>
 800515a:	1a18      	subs	r0, r3, r0
 800515c:	3801      	subs	r0, #1
 800515e:	4770      	bx	lr

08005160 <__aeabi_drsub>:
 8005160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005164:	e002      	b.n	800516c <__adddf3>
 8005166:	bf00      	nop

08005168 <__aeabi_dsub>:
 8005168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800516c <__adddf3>:
 800516c:	b530      	push	{r4, r5, lr}
 800516e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005176:	ea94 0f05 	teq	r4, r5
 800517a:	bf08      	it	eq
 800517c:	ea90 0f02 	teqeq	r0, r2
 8005180:	bf1f      	itttt	ne
 8005182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800518a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800518e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005192:	f000 80e2 	beq.w	800535a <__adddf3+0x1ee>
 8005196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800519a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800519e:	bfb8      	it	lt
 80051a0:	426d      	neglt	r5, r5
 80051a2:	dd0c      	ble.n	80051be <__adddf3+0x52>
 80051a4:	442c      	add	r4, r5
 80051a6:	ea80 0202 	eor.w	r2, r0, r2
 80051aa:	ea81 0303 	eor.w	r3, r1, r3
 80051ae:	ea82 0000 	eor.w	r0, r2, r0
 80051b2:	ea83 0101 	eor.w	r1, r3, r1
 80051b6:	ea80 0202 	eor.w	r2, r0, r2
 80051ba:	ea81 0303 	eor.w	r3, r1, r3
 80051be:	2d36      	cmp	r5, #54	; 0x36
 80051c0:	bf88      	it	hi
 80051c2:	bd30      	pophi	{r4, r5, pc}
 80051c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80051d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051d4:	d002      	beq.n	80051dc <__adddf3+0x70>
 80051d6:	4240      	negs	r0, r0
 80051d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80051e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x84>
 80051ea:	4252      	negs	r2, r2
 80051ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80051f0:	ea94 0f05 	teq	r4, r5
 80051f4:	f000 80a7 	beq.w	8005346 <__adddf3+0x1da>
 80051f8:	f1a4 0401 	sub.w	r4, r4, #1
 80051fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8005200:	db0d      	blt.n	800521e <__adddf3+0xb2>
 8005202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005206:	fa22 f205 	lsr.w	r2, r2, r5
 800520a:	1880      	adds	r0, r0, r2
 800520c:	f141 0100 	adc.w	r1, r1, #0
 8005210:	fa03 f20e 	lsl.w	r2, r3, lr
 8005214:	1880      	adds	r0, r0, r2
 8005216:	fa43 f305 	asr.w	r3, r3, r5
 800521a:	4159      	adcs	r1, r3
 800521c:	e00e      	b.n	800523c <__adddf3+0xd0>
 800521e:	f1a5 0520 	sub.w	r5, r5, #32
 8005222:	f10e 0e20 	add.w	lr, lr, #32
 8005226:	2a01      	cmp	r2, #1
 8005228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800522c:	bf28      	it	cs
 800522e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005232:	fa43 f305 	asr.w	r3, r3, r5
 8005236:	18c0      	adds	r0, r0, r3
 8005238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800523c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005240:	d507      	bpl.n	8005252 <__adddf3+0xe6>
 8005242:	f04f 0e00 	mov.w	lr, #0
 8005246:	f1dc 0c00 	rsbs	ip, ip, #0
 800524a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800524e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005256:	d31b      	bcc.n	8005290 <__adddf3+0x124>
 8005258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800525c:	d30c      	bcc.n	8005278 <__adddf3+0x10c>
 800525e:	0849      	lsrs	r1, r1, #1
 8005260:	ea5f 0030 	movs.w	r0, r0, rrx
 8005264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005268:	f104 0401 	add.w	r4, r4, #1
 800526c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005274:	f080 809a 	bcs.w	80053ac <__adddf3+0x240>
 8005278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800527c:	bf08      	it	eq
 800527e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005282:	f150 0000 	adcs.w	r0, r0, #0
 8005286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800528a:	ea41 0105 	orr.w	r1, r1, r5
 800528e:	bd30      	pop	{r4, r5, pc}
 8005290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005294:	4140      	adcs	r0, r0
 8005296:	eb41 0101 	adc.w	r1, r1, r1
 800529a:	3c01      	subs	r4, #1
 800529c:	bf28      	it	cs
 800529e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80052a2:	d2e9      	bcs.n	8005278 <__adddf3+0x10c>
 80052a4:	f091 0f00 	teq	r1, #0
 80052a8:	bf04      	itt	eq
 80052aa:	4601      	moveq	r1, r0
 80052ac:	2000      	moveq	r0, #0
 80052ae:	fab1 f381 	clz	r3, r1
 80052b2:	bf08      	it	eq
 80052b4:	3320      	addeq	r3, #32
 80052b6:	f1a3 030b 	sub.w	r3, r3, #11
 80052ba:	f1b3 0220 	subs.w	r2, r3, #32
 80052be:	da0c      	bge.n	80052da <__adddf3+0x16e>
 80052c0:	320c      	adds	r2, #12
 80052c2:	dd08      	ble.n	80052d6 <__adddf3+0x16a>
 80052c4:	f102 0c14 	add.w	ip, r2, #20
 80052c8:	f1c2 020c 	rsb	r2, r2, #12
 80052cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80052d0:	fa21 f102 	lsr.w	r1, r1, r2
 80052d4:	e00c      	b.n	80052f0 <__adddf3+0x184>
 80052d6:	f102 0214 	add.w	r2, r2, #20
 80052da:	bfd8      	it	le
 80052dc:	f1c2 0c20 	rsble	ip, r2, #32
 80052e0:	fa01 f102 	lsl.w	r1, r1, r2
 80052e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052e8:	bfdc      	itt	le
 80052ea:	ea41 010c 	orrle.w	r1, r1, ip
 80052ee:	4090      	lslle	r0, r2
 80052f0:	1ae4      	subs	r4, r4, r3
 80052f2:	bfa2      	ittt	ge
 80052f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80052f8:	4329      	orrge	r1, r5
 80052fa:	bd30      	popge	{r4, r5, pc}
 80052fc:	ea6f 0404 	mvn.w	r4, r4
 8005300:	3c1f      	subs	r4, #31
 8005302:	da1c      	bge.n	800533e <__adddf3+0x1d2>
 8005304:	340c      	adds	r4, #12
 8005306:	dc0e      	bgt.n	8005326 <__adddf3+0x1ba>
 8005308:	f104 0414 	add.w	r4, r4, #20
 800530c:	f1c4 0220 	rsb	r2, r4, #32
 8005310:	fa20 f004 	lsr.w	r0, r0, r4
 8005314:	fa01 f302 	lsl.w	r3, r1, r2
 8005318:	ea40 0003 	orr.w	r0, r0, r3
 800531c:	fa21 f304 	lsr.w	r3, r1, r4
 8005320:	ea45 0103 	orr.w	r1, r5, r3
 8005324:	bd30      	pop	{r4, r5, pc}
 8005326:	f1c4 040c 	rsb	r4, r4, #12
 800532a:	f1c4 0220 	rsb	r2, r4, #32
 800532e:	fa20 f002 	lsr.w	r0, r0, r2
 8005332:	fa01 f304 	lsl.w	r3, r1, r4
 8005336:	ea40 0003 	orr.w	r0, r0, r3
 800533a:	4629      	mov	r1, r5
 800533c:	bd30      	pop	{r4, r5, pc}
 800533e:	fa21 f004 	lsr.w	r0, r1, r4
 8005342:	4629      	mov	r1, r5
 8005344:	bd30      	pop	{r4, r5, pc}
 8005346:	f094 0f00 	teq	r4, #0
 800534a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800534e:	bf06      	itte	eq
 8005350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005354:	3401      	addeq	r4, #1
 8005356:	3d01      	subne	r5, #1
 8005358:	e74e      	b.n	80051f8 <__adddf3+0x8c>
 800535a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800535e:	bf18      	it	ne
 8005360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005364:	d029      	beq.n	80053ba <__adddf3+0x24e>
 8005366:	ea94 0f05 	teq	r4, r5
 800536a:	bf08      	it	eq
 800536c:	ea90 0f02 	teqeq	r0, r2
 8005370:	d005      	beq.n	800537e <__adddf3+0x212>
 8005372:	ea54 0c00 	orrs.w	ip, r4, r0
 8005376:	bf04      	itt	eq
 8005378:	4619      	moveq	r1, r3
 800537a:	4610      	moveq	r0, r2
 800537c:	bd30      	pop	{r4, r5, pc}
 800537e:	ea91 0f03 	teq	r1, r3
 8005382:	bf1e      	ittt	ne
 8005384:	2100      	movne	r1, #0
 8005386:	2000      	movne	r0, #0
 8005388:	bd30      	popne	{r4, r5, pc}
 800538a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800538e:	d105      	bne.n	800539c <__adddf3+0x230>
 8005390:	0040      	lsls	r0, r0, #1
 8005392:	4149      	adcs	r1, r1
 8005394:	bf28      	it	cs
 8005396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800539a:	bd30      	pop	{r4, r5, pc}
 800539c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80053a0:	bf3c      	itt	cc
 80053a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80053a6:	bd30      	popcc	{r4, r5, pc}
 80053a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80053ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	bd30      	pop	{r4, r5, pc}
 80053ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053be:	bf1a      	itte	ne
 80053c0:	4619      	movne	r1, r3
 80053c2:	4610      	movne	r0, r2
 80053c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053c8:	bf1c      	itt	ne
 80053ca:	460b      	movne	r3, r1
 80053cc:	4602      	movne	r2, r0
 80053ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053d2:	bf06      	itte	eq
 80053d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053d8:	ea91 0f03 	teqeq	r1, r3
 80053dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80053e0:	bd30      	pop	{r4, r5, pc}
 80053e2:	bf00      	nop

080053e4 <__aeabi_ui2d>:
 80053e4:	f090 0f00 	teq	r0, #0
 80053e8:	bf04      	itt	eq
 80053ea:	2100      	moveq	r1, #0
 80053ec:	4770      	bxeq	lr
 80053ee:	b530      	push	{r4, r5, lr}
 80053f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80053f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80053f8:	f04f 0500 	mov.w	r5, #0
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	e750      	b.n	80052a4 <__adddf3+0x138>
 8005402:	bf00      	nop

08005404 <__aeabi_i2d>:
 8005404:	f090 0f00 	teq	r0, #0
 8005408:	bf04      	itt	eq
 800540a:	2100      	moveq	r1, #0
 800540c:	4770      	bxeq	lr
 800540e:	b530      	push	{r4, r5, lr}
 8005410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800541c:	bf48      	it	mi
 800541e:	4240      	negmi	r0, r0
 8005420:	f04f 0100 	mov.w	r1, #0
 8005424:	e73e      	b.n	80052a4 <__adddf3+0x138>
 8005426:	bf00      	nop

08005428 <__aeabi_f2d>:
 8005428:	0042      	lsls	r2, r0, #1
 800542a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800542e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005436:	bf1f      	itttt	ne
 8005438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800543c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005444:	4770      	bxne	lr
 8005446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800544a:	bf08      	it	eq
 800544c:	4770      	bxeq	lr
 800544e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005452:	bf04      	itt	eq
 8005454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005458:	4770      	bxeq	lr
 800545a:	b530      	push	{r4, r5, lr}
 800545c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005468:	e71c      	b.n	80052a4 <__adddf3+0x138>
 800546a:	bf00      	nop

0800546c <__aeabi_ul2d>:
 800546c:	ea50 0201 	orrs.w	r2, r0, r1
 8005470:	bf08      	it	eq
 8005472:	4770      	bxeq	lr
 8005474:	b530      	push	{r4, r5, lr}
 8005476:	f04f 0500 	mov.w	r5, #0
 800547a:	e00a      	b.n	8005492 <__aeabi_l2d+0x16>

0800547c <__aeabi_l2d>:
 800547c:	ea50 0201 	orrs.w	r2, r0, r1
 8005480:	bf08      	it	eq
 8005482:	4770      	bxeq	lr
 8005484:	b530      	push	{r4, r5, lr}
 8005486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800548a:	d502      	bpl.n	8005492 <__aeabi_l2d+0x16>
 800548c:	4240      	negs	r0, r0
 800548e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800549a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800549e:	f43f aed8 	beq.w	8005252 <__adddf3+0xe6>
 80054a2:	f04f 0203 	mov.w	r2, #3
 80054a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054aa:	bf18      	it	ne
 80054ac:	3203      	addne	r2, #3
 80054ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054b2:	bf18      	it	ne
 80054b4:	3203      	addne	r2, #3
 80054b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ba:	f1c2 0320 	rsb	r3, r2, #32
 80054be:	fa00 fc03 	lsl.w	ip, r0, r3
 80054c2:	fa20 f002 	lsr.w	r0, r0, r2
 80054c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80054ca:	ea40 000e 	orr.w	r0, r0, lr
 80054ce:	fa21 f102 	lsr.w	r1, r1, r2
 80054d2:	4414      	add	r4, r2
 80054d4:	e6bd      	b.n	8005252 <__adddf3+0xe6>
 80054d6:	bf00      	nop

080054d8 <__aeabi_dmul>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80054e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054e6:	bf1d      	ittte	ne
 80054e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80054ec:	ea94 0f0c 	teqne	r4, ip
 80054f0:	ea95 0f0c 	teqne	r5, ip
 80054f4:	f000 f8de 	bleq	80056b4 <__aeabi_dmul+0x1dc>
 80054f8:	442c      	add	r4, r5
 80054fa:	ea81 0603 	eor.w	r6, r1, r3
 80054fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800550a:	bf18      	it	ne
 800550c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005518:	d038      	beq.n	800558c <__aeabi_dmul+0xb4>
 800551a:	fba0 ce02 	umull	ip, lr, r0, r2
 800551e:	f04f 0500 	mov.w	r5, #0
 8005522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800552a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800552e:	f04f 0600 	mov.w	r6, #0
 8005532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005536:	f09c 0f00 	teq	ip, #0
 800553a:	bf18      	it	ne
 800553c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800554c:	d204      	bcs.n	8005558 <__aeabi_dmul+0x80>
 800554e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005552:	416d      	adcs	r5, r5
 8005554:	eb46 0606 	adc.w	r6, r6, r6
 8005558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800555c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800556c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005570:	bf88      	it	hi
 8005572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005576:	d81e      	bhi.n	80055b6 <__aeabi_dmul+0xde>
 8005578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800557c:	bf08      	it	eq
 800557e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005582:	f150 0000 	adcs.w	r0, r0, #0
 8005586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005590:	ea46 0101 	orr.w	r1, r6, r1
 8005594:	ea40 0002 	orr.w	r0, r0, r2
 8005598:	ea81 0103 	eor.w	r1, r1, r3
 800559c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055a0:	bfc2      	ittt	gt
 80055a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055aa:	bd70      	popgt	{r4, r5, r6, pc}
 80055ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055b0:	f04f 0e00 	mov.w	lr, #0
 80055b4:	3c01      	subs	r4, #1
 80055b6:	f300 80ab 	bgt.w	8005710 <__aeabi_dmul+0x238>
 80055ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055be:	bfde      	ittt	le
 80055c0:	2000      	movle	r0, #0
 80055c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80055c6:	bd70      	pople	{r4, r5, r6, pc}
 80055c8:	f1c4 0400 	rsb	r4, r4, #0
 80055cc:	3c20      	subs	r4, #32
 80055ce:	da35      	bge.n	800563c <__aeabi_dmul+0x164>
 80055d0:	340c      	adds	r4, #12
 80055d2:	dc1b      	bgt.n	800560c <__aeabi_dmul+0x134>
 80055d4:	f104 0414 	add.w	r4, r4, #20
 80055d8:	f1c4 0520 	rsb	r5, r4, #32
 80055dc:	fa00 f305 	lsl.w	r3, r0, r5
 80055e0:	fa20 f004 	lsr.w	r0, r0, r4
 80055e4:	fa01 f205 	lsl.w	r2, r1, r5
 80055e8:	ea40 0002 	orr.w	r0, r0, r2
 80055ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80055f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80055f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80055f8:	fa21 f604 	lsr.w	r6, r1, r4
 80055fc:	eb42 0106 	adc.w	r1, r2, r6
 8005600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005604:	bf08      	it	eq
 8005606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f1c4 040c 	rsb	r4, r4, #12
 8005610:	f1c4 0520 	rsb	r5, r4, #32
 8005614:	fa00 f304 	lsl.w	r3, r0, r4
 8005618:	fa20 f005 	lsr.w	r0, r0, r5
 800561c:	fa01 f204 	lsl.w	r2, r1, r4
 8005620:	ea40 0002 	orr.w	r0, r0, r2
 8005624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800562c:	f141 0100 	adc.w	r1, r1, #0
 8005630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005634:	bf08      	it	eq
 8005636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f1c4 0520 	rsb	r5, r4, #32
 8005640:	fa00 f205 	lsl.w	r2, r0, r5
 8005644:	ea4e 0e02 	orr.w	lr, lr, r2
 8005648:	fa20 f304 	lsr.w	r3, r0, r4
 800564c:	fa01 f205 	lsl.w	r2, r1, r5
 8005650:	ea43 0302 	orr.w	r3, r3, r2
 8005654:	fa21 f004 	lsr.w	r0, r1, r4
 8005658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800565c:	fa21 f204 	lsr.w	r2, r1, r4
 8005660:	ea20 0002 	bic.w	r0, r0, r2
 8005664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800566c:	bf08      	it	eq
 800566e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f094 0f00 	teq	r4, #0
 8005678:	d10f      	bne.n	800569a <__aeabi_dmul+0x1c2>
 800567a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800567e:	0040      	lsls	r0, r0, #1
 8005680:	eb41 0101 	adc.w	r1, r1, r1
 8005684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005688:	bf08      	it	eq
 800568a:	3c01      	subeq	r4, #1
 800568c:	d0f7      	beq.n	800567e <__aeabi_dmul+0x1a6>
 800568e:	ea41 0106 	orr.w	r1, r1, r6
 8005692:	f095 0f00 	teq	r5, #0
 8005696:	bf18      	it	ne
 8005698:	4770      	bxne	lr
 800569a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800569e:	0052      	lsls	r2, r2, #1
 80056a0:	eb43 0303 	adc.w	r3, r3, r3
 80056a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056a8:	bf08      	it	eq
 80056aa:	3d01      	subeq	r5, #1
 80056ac:	d0f7      	beq.n	800569e <__aeabi_dmul+0x1c6>
 80056ae:	ea43 0306 	orr.w	r3, r3, r6
 80056b2:	4770      	bx	lr
 80056b4:	ea94 0f0c 	teq	r4, ip
 80056b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056bc:	bf18      	it	ne
 80056be:	ea95 0f0c 	teqne	r5, ip
 80056c2:	d00c      	beq.n	80056de <__aeabi_dmul+0x206>
 80056c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056c8:	bf18      	it	ne
 80056ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056ce:	d1d1      	bne.n	8005674 <__aeabi_dmul+0x19c>
 80056d0:	ea81 0103 	eor.w	r1, r1, r3
 80056d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056d8:	f04f 0000 	mov.w	r0, #0
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056e2:	bf06      	itte	eq
 80056e4:	4610      	moveq	r0, r2
 80056e6:	4619      	moveq	r1, r3
 80056e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056ec:	d019      	beq.n	8005722 <__aeabi_dmul+0x24a>
 80056ee:	ea94 0f0c 	teq	r4, ip
 80056f2:	d102      	bne.n	80056fa <__aeabi_dmul+0x222>
 80056f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80056f8:	d113      	bne.n	8005722 <__aeabi_dmul+0x24a>
 80056fa:	ea95 0f0c 	teq	r5, ip
 80056fe:	d105      	bne.n	800570c <__aeabi_dmul+0x234>
 8005700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005704:	bf1c      	itt	ne
 8005706:	4610      	movne	r0, r2
 8005708:	4619      	movne	r1, r3
 800570a:	d10a      	bne.n	8005722 <__aeabi_dmul+0x24a>
 800570c:	ea81 0103 	eor.w	r1, r1, r3
 8005710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800571c:	f04f 0000 	mov.w	r0, #0
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800572a:	bd70      	pop	{r4, r5, r6, pc}

0800572c <__aeabi_ddiv>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800573a:	bf1d      	ittte	ne
 800573c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005740:	ea94 0f0c 	teqne	r4, ip
 8005744:	ea95 0f0c 	teqne	r5, ip
 8005748:	f000 f8a7 	bleq	800589a <__aeabi_ddiv+0x16e>
 800574c:	eba4 0405 	sub.w	r4, r4, r5
 8005750:	ea81 0e03 	eor.w	lr, r1, r3
 8005754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800575c:	f000 8088 	beq.w	8005870 <__aeabi_ddiv+0x144>
 8005760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800576c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800577c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005784:	429d      	cmp	r5, r3
 8005786:	bf08      	it	eq
 8005788:	4296      	cmpeq	r6, r2
 800578a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800578e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005792:	d202      	bcs.n	800579a <__aeabi_ddiv+0x6e>
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	ea4f 0232 	mov.w	r2, r2, rrx
 800579a:	1ab6      	subs	r6, r6, r2
 800579c:	eb65 0503 	sbc.w	r5, r5, r3
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80057ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80057b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057b6:	bf22      	ittt	cs
 80057b8:	1ab6      	subcs	r6, r6, r2
 80057ba:	4675      	movcs	r5, lr
 80057bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ce:	bf22      	ittt	cs
 80057d0:	1ab6      	subcs	r6, r6, r2
 80057d2:	4675      	movcs	r5, lr
 80057d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	ea4f 0232 	mov.w	r2, r2, rrx
 80057de:	ebb6 0e02 	subs.w	lr, r6, r2
 80057e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e6:	bf22      	ittt	cs
 80057e8:	1ab6      	subcs	r6, r6, r2
 80057ea:	4675      	movcs	r5, lr
 80057ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fe:	bf22      	ittt	cs
 8005800:	1ab6      	subcs	r6, r6, r2
 8005802:	4675      	movcs	r5, lr
 8005804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005808:	ea55 0e06 	orrs.w	lr, r5, r6
 800580c:	d018      	beq.n	8005840 <__aeabi_ddiv+0x114>
 800580e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800581a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800581e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800582a:	d1c0      	bne.n	80057ae <__aeabi_ddiv+0x82>
 800582c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005830:	d10b      	bne.n	800584a <__aeabi_ddiv+0x11e>
 8005832:	ea41 0100 	orr.w	r1, r1, r0
 8005836:	f04f 0000 	mov.w	r0, #0
 800583a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800583e:	e7b6      	b.n	80057ae <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005844:	bf04      	itt	eq
 8005846:	4301      	orreq	r1, r0
 8005848:	2000      	moveq	r0, #0
 800584a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800584e:	bf88      	it	hi
 8005850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005854:	f63f aeaf 	bhi.w	80055b6 <__aeabi_dmul+0xde>
 8005858:	ebb5 0c03 	subs.w	ip, r5, r3
 800585c:	bf04      	itt	eq
 800585e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005866:	f150 0000 	adcs.w	r0, r0, #0
 800586a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800587c:	bfc2      	ittt	gt
 800587e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005886:	bd70      	popgt	{r4, r5, r6, pc}
 8005888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800588c:	f04f 0e00 	mov.w	lr, #0
 8005890:	3c01      	subs	r4, #1
 8005892:	e690      	b.n	80055b6 <__aeabi_dmul+0xde>
 8005894:	ea45 0e06 	orr.w	lr, r5, r6
 8005898:	e68d      	b.n	80055b6 <__aeabi_dmul+0xde>
 800589a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800589e:	ea94 0f0c 	teq	r4, ip
 80058a2:	bf08      	it	eq
 80058a4:	ea95 0f0c 	teqeq	r5, ip
 80058a8:	f43f af3b 	beq.w	8005722 <__aeabi_dmul+0x24a>
 80058ac:	ea94 0f0c 	teq	r4, ip
 80058b0:	d10a      	bne.n	80058c8 <__aeabi_ddiv+0x19c>
 80058b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058b6:	f47f af34 	bne.w	8005722 <__aeabi_dmul+0x24a>
 80058ba:	ea95 0f0c 	teq	r5, ip
 80058be:	f47f af25 	bne.w	800570c <__aeabi_dmul+0x234>
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	e72c      	b.n	8005722 <__aeabi_dmul+0x24a>
 80058c8:	ea95 0f0c 	teq	r5, ip
 80058cc:	d106      	bne.n	80058dc <__aeabi_ddiv+0x1b0>
 80058ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058d2:	f43f aefd 	beq.w	80056d0 <__aeabi_dmul+0x1f8>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e722      	b.n	8005722 <__aeabi_dmul+0x24a>
 80058dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058e0:	bf18      	it	ne
 80058e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058e6:	f47f aec5 	bne.w	8005674 <__aeabi_dmul+0x19c>
 80058ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80058ee:	f47f af0d 	bne.w	800570c <__aeabi_dmul+0x234>
 80058f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80058f6:	f47f aeeb 	bne.w	80056d0 <__aeabi_dmul+0x1f8>
 80058fa:	e712      	b.n	8005722 <__aeabi_dmul+0x24a>

080058fc <__aeabi_d2iz>:
 80058fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005904:	d215      	bcs.n	8005932 <__aeabi_d2iz+0x36>
 8005906:	d511      	bpl.n	800592c <__aeabi_d2iz+0x30>
 8005908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800590c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005910:	d912      	bls.n	8005938 <__aeabi_d2iz+0x3c>
 8005912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800591a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800591e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005922:	fa23 f002 	lsr.w	r0, r3, r2
 8005926:	bf18      	it	ne
 8005928:	4240      	negne	r0, r0
 800592a:	4770      	bx	lr
 800592c:	f04f 0000 	mov.w	r0, #0
 8005930:	4770      	bx	lr
 8005932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005936:	d105      	bne.n	8005944 <__aeabi_d2iz+0x48>
 8005938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800593c:	bf08      	it	eq
 800593e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005942:	4770      	bx	lr
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	0000      	movs	r0, r0
	...

08005950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af04      	add	r7, sp, #16
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005956:	b662      	cpsie	i
}
 8005958:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800595a:	f000 fcb7 	bl	80062cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800595e:	f000 f855 	bl	8005a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005962:	f000 f94d 	bl	8005c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005966:	f000 f921 	bl	8005bac <MX_USART2_UART_Init>
  MX_CAN_Init();
 800596a:	f000 f891 	bl	8005a90 <MX_CAN_Init>
  MX_TIM2_Init();
 800596e:	f000 f8c5 	bl	8005afc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SerialWrite("PID Application is running \n");
 8005972:	4823      	ldr	r0, [pc, #140]	; (8005a00 <main+0xb0>)
 8005974:	f000 fabe 	bl	8005ef4 <SerialWrite>
  HAL_Delay(1000);
 8005978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800597c:	f000 fd08 	bl	8006390 <HAL_Delay>

  HAL_CAN_Start(&hcan);
 8005980:	4820      	ldr	r0, [pc, #128]	; (8005a04 <main+0xb4>)
 8005982:	f000 feed 	bl	8006760 <HAL_CAN_Start>
  CAN_SetFilter(0x12,0x7FF,0,0);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800598e:	2012      	movs	r0, #18
 8005990:	f000 fad4 	bl	8005f3c <CAN_SetFilter>
  CAN_SetFilter(0x104,0x7FF,0,1);
 8005994:	2301      	movs	r3, #1
 8005996:	2200      	movs	r2, #0
 8005998:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800599c:	f44f 7082 	mov.w	r0, #260	; 0x104
 80059a0:	f000 facc 	bl	8005f3c <CAN_SetFilter>
  CAN_SetFilter(0x691,0x7FF,0,2);
 80059a4:	2302      	movs	r3, #2
 80059a6:	2200      	movs	r2, #0
 80059a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80059ac:	f240 6091 	movw	r0, #1681	; 0x691
 80059b0:	f000 fac4 	bl	8005f3c <CAN_SetFilter>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80059b4:	2100      	movs	r1, #0
 80059b6:	4814      	ldr	r0, [pc, #80]	; (8005a08 <main+0xb8>)
 80059b8:	f001 ffa2 	bl	8007900 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 80059bc:	4812      	ldr	r0, [pc, #72]	; (8005a08 <main+0xb8>)
 80059be:	f001 ff05 	bl	80077cc <HAL_TIM_Base_Start>
  Init_PWM();
 80059c2:	f000 f967 	bl	8005c94 <Init_PWM>
  /* USER CODE BEGIN WHILE */
	while (1) {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//		HAL_Delay(200);

		CanPid(51,410.0,0.0001,0.0);
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059d2:	a307      	add	r3, pc, #28	; (adr r3, 80059f0 <main+0xa0>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	e9cd 2300 	strd	r2, r3, [sp]
 80059dc:	a306      	add	r3, pc, #24	; (adr r3, 80059f8 <main+0xa8>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	2033      	movs	r0, #51	; 0x33
 80059e4:	f000 f97c 	bl	8005ce0 <CanPid>
 80059e8:	e7ed      	b.n	80059c6 <main+0x76>
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	eb1c432d 	.word	0xeb1c432d
 80059f4:	3f1a36e2 	.word	0x3f1a36e2
 80059f8:	00000000 	.word	0x00000000
 80059fc:	4079a000 	.word	0x4079a000
 8005a00:	08008570 	.word	0x08008570
 8005a04:	20000028 	.word	0x20000028
 8005a08:	20000050 	.word	0x20000050

08005a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	; 0x40
 8005a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a12:	f107 0318 	add.w	r3, r7, #24
 8005a16:	2228      	movs	r2, #40	; 0x28
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f002 fd70 	bl	8008500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	609a      	str	r2, [r3, #8]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a36:	2310      	movs	r3, #16
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005a42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a48:	f107 0318 	add.w	r3, r7, #24
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 faad 	bl	8006fac <HAL_RCC_OscConfig>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8005a58:	f000 fab6 	bl	8005fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a5c:	230f      	movs	r3, #15
 8005a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a60:	2302      	movs	r3, #2
 8005a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 fd1a 	bl	80074b0 <HAL_RCC_ClockConfig>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005a82:	f000 faa1 	bl	8005fc8 <Error_Handler>
  }
}
 8005a86:	bf00      	nop
 8005a88:	3740      	adds	r7, #64	; 0x40
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <MX_CAN_Init+0x64>)
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <MX_CAN_Init+0x68>)
 8005a98:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <MX_CAN_Init+0x64>)
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <MX_CAN_Init+0x64>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <MX_CAN_Init+0x64>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8005aac:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <MX_CAN_Init+0x64>)
 8005aae:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8005ab2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <MX_CAN_Init+0x64>)
 8005ab6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8005aba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <MX_CAN_Init+0x64>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <MX_CAN_Init+0x64>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <MX_CAN_Init+0x64>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <MX_CAN_Init+0x64>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <MX_CAN_Init+0x64>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <MX_CAN_Init+0x64>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005ae0:	4804      	ldr	r0, [pc, #16]	; (8005af4 <MX_CAN_Init+0x64>)
 8005ae2:	f000 fc79 	bl	80063d8 <HAL_CAN_Init>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005aec:	f000 fa6c 	bl	8005fc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000028 	.word	0x20000028
 8005af8:	40006400 	.word	0x40006400

08005afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b02:	f107 0320 	add.w	r3, r7, #32
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	611a      	str	r2, [r3, #16]
 8005b1a:	615a      	str	r2, [r3, #20]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b1e:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005b26:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005b46:	4818      	ldr	r0, [pc, #96]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b48:	f001 fe8a 	bl	8007860 <HAL_TIM_PWM_Init>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005b52:	f000 fa39 	bl	8005fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b5e:	f107 0320 	add.w	r3, r7, #32
 8005b62:	4619      	mov	r1, r3
 8005b64:	4810      	ldr	r0, [pc, #64]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b66:	f002 fa49 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005b70:	f000 fa2a 	bl	8005fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b74:	2360      	movs	r3, #96	; 0x60
 8005b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	2200      	movs	r2, #0
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4807      	ldr	r0, [pc, #28]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b8c:	f001 ff5a 	bl	8007a44 <HAL_TIM_PWM_ConfigChannel>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8005b96:	f000 fa17 	bl	8005fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005b9a:	4803      	ldr	r0, [pc, #12]	; (8005ba8 <MX_TIM2_Init+0xac>)
 8005b9c:	f000 fac8 	bl	8006130 <HAL_TIM_MspPostInit>

}
 8005ba0:	bf00      	nop
 8005ba2:	3728      	adds	r7, #40	; 0x28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000050 	.word	0x20000050

08005bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <MX_USART2_UART_Init+0x50>)
 8005bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bd0:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bd2:	220c      	movs	r2, #12
 8005bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005be2:	4805      	ldr	r0, [pc, #20]	; (8005bf8 <MX_USART2_UART_Init+0x4c>)
 8005be4:	f002 fa68 	bl	80080b8 <HAL_UART_Init>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005bee:	f000 f9eb 	bl	8005fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000098 	.word	0x20000098
 8005bfc:	40004400 	.word	0x40004400

08005c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c06:	f107 0310 	add.w	r3, r7, #16
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c1a:	f043 0320 	orr.w	r3, r3, #32
 8005c1e:	6193      	str	r3, [r2, #24]
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c32:	f043 0304 	orr.w	r3, r3, #4
 8005c36:	6193      	str	r3, [r2, #24]
 8005c38:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c4a:	f043 0308 	orr.w	r3, r3, #8
 8005c4e:	6193      	str	r3, [r2, #24]
 8005c50:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <MX_GPIO_Init+0x8c>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2104      	movs	r1, #4
 8005c60:	480b      	ldr	r0, [pc, #44]	; (8005c90 <MX_GPIO_Init+0x90>)
 8005c62:	f001 f971 	bl	8006f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c66:	2304      	movs	r3, #4
 8005c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c72:	2302      	movs	r3, #2
 8005c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4804      	ldr	r0, [pc, #16]	; (8005c90 <MX_GPIO_Init+0x90>)
 8005c7e:	f000 ffdf 	bl	8006c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005c82:	bf00      	nop
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40010c00 	.word	0x40010c00

08005c94 <Init_PWM>:
    else{
    	TxData[0] = Txdata;
    }

}
void Init_PWM(void){
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
	int Rcv;
	while(Rcv < 4096)
 8005c9a:	e009      	b.n	8005cb0 <Init_PWM+0x1c>
	               {
	               TIM2->CCR1 = Rcv;
 8005c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6353      	str	r3, [r2, #52]	; 0x34
	               Rcv += 10;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	330a      	adds	r3, #10
 8005ca8:	607b      	str	r3, [r7, #4]
	               HAL_Delay(10);
 8005caa:	200a      	movs	r0, #10
 8005cac:	f000 fb70 	bl	8006390 <HAL_Delay>
	while(Rcv < 4096)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	dbf1      	blt.n	8005c9c <Init_PWM+0x8>
	               }

	               while(Rcv > 0)
 8005cb8:	e009      	b.n	8005cce <Init_PWM+0x3a>
	               {
	               TIM2->CCR1 = Rcv;
 8005cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6353      	str	r3, [r2, #52]	; 0x34
	               Rcv -= 10;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3b0a      	subs	r3, #10
 8005cc6:	607b      	str	r3, [r7, #4]
	               HAL_Delay(10);
 8005cc8:	200a      	movs	r0, #10
 8005cca:	f000 fb61 	bl	8006390 <HAL_Delay>
	               while(Rcv > 0)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dcf2      	bgt.n	8005cba <Init_PWM+0x26>
	               }
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <CanPid>:

void CanPid(int str, double kp, double ki, double kd){
 8005ce0:	b5b0      	push	{r4, r5, r7, lr}
 8005ce2:	b098      	sub	sp, #96	; 0x60
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t start_t, final_t = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	657b      	str	r3, [r7, #84]	; 0x54
	      double elapsedTime = 0.0, error, prev_error = 0.0;
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	      double integral=0.0, derivative=0.0;
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	      int PIDCAN_value =0,RcvData=0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d24:	2300      	movs	r3, #0
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
	      while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 8005d28:	e099      	b.n	8005e5e <CanPid+0x17e>
	     	             if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8005d2a:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <CanPid+0x198>)
 8005d2c:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <CanPid+0x19c>)
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4853      	ldr	r0, [pc, #332]	; (8005e80 <CanPid+0x1a0>)
 8005d32:	f000 fd59 	bl	80067e8 <HAL_CAN_GetRxMessage>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <CanPid+0x60>
	     	                     != HAL_OK) {
	     	                 Error_Handler();
 8005d3c:	f000 f944 	bl	8005fc8 <Error_Handler>
	     	             }
	     	             start_t = HAL_GetTick();
 8005d40:	f000 fb1c 	bl	800637c <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24
	     	             if (RxHeader.StdId == 0x12) {
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <CanPid+0x19c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b12      	cmp	r3, #18
 8005d4c:	f040 8087 	bne.w	8005e5e <CanPid+0x17e>
	     	             			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8005d50:	2108      	movs	r1, #8
 8005d52:	484c      	ldr	r0, [pc, #304]	; (8005e84 <CanPid+0x1a4>)
 8005d54:	f001 f910 	bl	8006f78 <HAL_GPIO_TogglePin>
	     	             			RcvData = RxData[0];
 8005d58:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <CanPid+0x198>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28


	     	             elapsedTime = (double) (start_t - final_t);
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fb3d 	bl	80053e4 <__aeabi_ui2d>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	     	             error = (double) (str - RcvData);
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fb43 	bl	8005404 <__aeabi_i2d>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
	     	             integral += (double) (error * elapsedTime);
 8005d86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d8e:	f7ff fba3 	bl	80054d8 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005d9a:	f7ff f9e7 	bl	800516c <__adddf3>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	     	             derivative = (double) (error - prev_error) / elapsedTime;
 8005da6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005daa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005dae:	f7ff f9db 	bl	8005168 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dbe:	f7ff fcb5 	bl	800572c <__aeabi_ddiv>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	     	             PIDCAN_value = (int) (kp * error + ki * integral + kd * derivative);
 8005dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd2:	f7ff fb81 	bl	80054d8 <__aeabi_dmul>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	461d      	mov	r5, r3
 8005dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005de6:	f7ff fb77 	bl	80054d8 <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7ff f9bb 	bl	800516c <__adddf3>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005e06:	f7ff fb67 	bl	80054d8 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7ff f9ab 	bl	800516c <__adddf3>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f7ff fd6d 	bl	80058fc <__aeabi_d2iz>
 8005e22:	4603      	mov	r3, r0
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	     	             int dutyCANCycle = Constrain(PIDCAN_value, -4096, 4096);
 8005e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e2a:	4917      	ldr	r1, [pc, #92]	; (8005e88 <CanPid+0x1a8>)
 8005e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e2e:	f000 f848 	bl	8005ec2 <Constrain>
 8005e32:	6178      	str	r0, [r7, #20]
	     	             prev_error = error;
 8005e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	     	             final_t = start_t;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
	     	             int values = MAP(dutyCANCycle, -4096, 4096, 0, 4096);
 8005e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e4c:	490e      	ldr	r1, [pc, #56]	; (8005e88 <CanPid+0x1a8>)
 8005e4e:	6978      	ldr	r0, [r7, #20]
 8005e50:	f000 f81c 	bl	8005e8c <MAP>
 8005e54:	6138      	str	r0, [r7, #16]
	     	             TIM2->CCR1 = values;
 8005e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6353      	str	r3, [r2, #52]	; 0x34
	      while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4807      	ldr	r0, [pc, #28]	; (8005e80 <CanPid+0x1a0>)
 8005e62:	f000 fde2 	bl	8006a2a <HAL_CAN_GetRxFifoFillLevel>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f af5e 	bne.w	8005d2a <CanPid+0x4a>

	     	             }

	     	  }
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3758      	adds	r7, #88	; 0x58
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bdb0      	pop	{r4, r5, r7, pc}
 8005e78:	200000fc 	.word	0x200000fc
 8005e7c:	200000e0 	.word	0x200000e0
 8005e80:	20000028 	.word	0x20000028
 8005e84:	40010c00 	.word	0x40010c00
 8005e88:	fffff000 	.word	0xfffff000

08005e8c <MAP>:
int MAP(int au32_IN, int au32_INmin, int au32_INmax, int au32_OUTmin,int au32_OUTmax) {
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	1a8a      	subs	r2, r1, r2
 8005ea6:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	fb92 f2f3 	sdiv	r2, r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4413      	add	r3, r2
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <Constrain>:

int Constrain(int au32_IN, int au32_MIN, int au32_MAX) {
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
	if (au32_IN < au32_MIN) {
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	da01      	bge.n	8005eda <Constrain+0x18>
		return au32_MIN;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	e006      	b.n	8005ee8 <Constrain+0x26>
	} else if (au32_IN > au32_MAX) {
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	dd01      	ble.n	8005ee6 <Constrain+0x24>
		return au32_MAX;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	e000      	b.n	8005ee8 <Constrain+0x26>
	} else {
		return au32_IN;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
	}
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
	...

08005ef4 <SerialWrite>:


void SerialWrite(char * uart2Data)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	//while (huart2.gState == HAL_UART_STATE_READY ){
	HAL_StatusTypeDef uart_status;
	uart_status = HAL_UART_Transmit(&huart2, (uint8_t *)uart2Data,strlen(uart2Data), 1000);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff f927 	bl	8005150 <strlen>
 8005f02:	4603      	mov	r3, r0
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4809      	ldr	r0, [pc, #36]	; (8005f34 <SerialWrite+0x40>)
 8005f0e:	f002 f923 	bl	8008158 <HAL_UART_Transmit>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
	if(uart_status != HAL_OK){
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <SerialWrite+0x38>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	4806      	ldr	r0, [pc, #24]	; (8005f38 <SerialWrite+0x44>)
 8005f20:	f001 f82a 	bl	8006f78 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f28:	f000 fa32 	bl	8006390 <HAL_Delay>
	  }
	//}


}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000098 	.word	0x20000098
 8005f38:	40010c00 	.word	0x40010c00

08005f3c <CAN_SetFilter>:


void CAN_SetFilter(uint32_t id,uint32_t mask,uint8_t isExtended,uint8_t filter){
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	; 0x38
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4611      	mov	r1, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	71fb      	strb	r3, [r7, #7]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71bb      	strb	r3, [r7, #6]

	CAN_FilterTypeDef sfilterConfig;
	sfilterConfig.FilterBank = filter;
 8005f52:	79bb      	ldrb	r3, [r7, #6]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
	sfilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
	sfilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(isExtended){
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <CAN_SetFilter+0x4a>
		sfilterConfig.FilterIdHigh = (id>>13)& 0xffff;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	0b5b      	lsrs	r3, r3, #13
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	613b      	str	r3, [r7, #16]
		sfilterConfig.FilterIdLow = (id<<3)&0xffff;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	617b      	str	r3, [r7, #20]
		sfilterConfig.FilterMaskIdHigh = (mask>>13)& 0xffff;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	0b5b      	lsrs	r3, r3, #13
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	61bb      	str	r3, [r7, #24]
		sfilterConfig.FilterMaskIdLow = (mask<<3)&0xffff;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	e00b      	b.n	8005f9e <CAN_SetFilter+0x62>
	}
	else{
		sfilterConfig.FilterIdHigh = (id<<5)& 0xffff;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	015b      	lsls	r3, r3, #5
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	613b      	str	r3, [r7, #16]
		sfilterConfig.FilterIdLow = 0x0000;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
		sfilterConfig.FilterMaskIdHigh = (mask<<5)& 0xffff;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	015b      	lsls	r3, r3, #5
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	61bb      	str	r3, [r7, #24]
		sfilterConfig.FilterMaskIdLow = 0x0000;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
	}
	sfilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	623b      	str	r3, [r7, #32]
	sfilterConfig.FilterActivation = ENABLE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_CAN_ConfigFilter(&hcan, &sfilterConfig) != HAL_OK) {
 8005fa6:	f107 0310 	add.w	r3, r7, #16
 8005faa:	4619      	mov	r1, r3
 8005fac:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <CAN_SetFilter+0x88>)
 8005fae:	f000 fb0e 	bl	80065ce <HAL_CAN_ConfigFilter>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <CAN_SetFilter+0x80>
	  		Error_Handler();
 8005fb8:	f000 f806 	bl	8005fc8 <Error_Handler>
	  	}
}
 8005fbc:	bf00      	nop
 8005fbe:	3738      	adds	r7, #56	; 0x38
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000028 	.word	0x20000028

08005fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fcc:	b672      	cpsid	i
}
 8005fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005fd0:	e7fe      	b.n	8005fd0 <Error_Handler+0x8>
	...

08005fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <HAL_MspInit+0x5c>)
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	4a14      	ldr	r2, [pc, #80]	; (8006030 <HAL_MspInit+0x5c>)
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	6193      	str	r3, [r2, #24]
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <HAL_MspInit+0x5c>)
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_MspInit+0x5c>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	4a0e      	ldr	r2, [pc, #56]	; (8006030 <HAL_MspInit+0x5c>)
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	61d3      	str	r3, [r2, #28]
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_MspInit+0x5c>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	607b      	str	r3, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_MspInit+0x60>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	4a04      	ldr	r2, [pc, #16]	; (8006034 <HAL_MspInit+0x60>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	40021000 	.word	0x40021000
 8006034:	40010000 	.word	0x40010000

08006038 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a25      	ldr	r2, [pc, #148]	; (80060e8 <HAL_CAN_MspInit+0xb0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d143      	bne.n	80060e0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006058:	4b24      	ldr	r3, [pc, #144]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	4a23      	ldr	r2, [pc, #140]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 800605e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006062:	61d3      	str	r3, [r2, #28]
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006070:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 8006076:	f043 0308 	orr.w	r3, r3, #8
 800607a:	6193      	str	r3, [r2, #24]
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <HAL_CAN_MspInit+0xb4>)
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	4619      	mov	r1, r3
 800609c:	4814      	ldr	r0, [pc, #80]	; (80060f0 <HAL_CAN_MspInit+0xb8>)
 800609e:	f000 fdcf 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a8:	2302      	movs	r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060ac:	2303      	movs	r3, #3
 80060ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060b0:	f107 0314 	add.w	r3, r7, #20
 80060b4:	4619      	mov	r1, r3
 80060b6:	480e      	ldr	r0, [pc, #56]	; (80060f0 <HAL_CAN_MspInit+0xb8>)
 80060b8:	f000 fdc2 	bl	8006c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_CAN_MspInit+0xbc>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	4a06      	ldr	r2, [pc, #24]	; (80060f4 <HAL_CAN_MspInit+0xbc>)
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80060e0:	bf00      	nop
 80060e2:	3728      	adds	r7, #40	; 0x28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40006400 	.word	0x40006400
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40010c00 	.word	0x40010c00
 80060f4:	40010000 	.word	0x40010000

080060f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d10b      	bne.n	8006122 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <HAL_TIM_PWM_MspInit+0x34>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <HAL_TIM_PWM_MspInit+0x34>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	61d3      	str	r3, [r2, #28]
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_TIM_PWM_MspInit+0x34>)
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40021000 	.word	0x40021000

08006130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006138:	f107 0310 	add.w	r3, r7, #16
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d117      	bne.n	8006180 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006150:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <HAL_TIM_MspPostInit+0x58>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <HAL_TIM_MspPostInit+0x58>)
 8006156:	f043 0304 	orr.w	r3, r3, #4
 800615a:	6193      	str	r3, [r2, #24]
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_TIM_MspPostInit+0x58>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006168:	2301      	movs	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616c:	2302      	movs	r3, #2
 800616e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006170:	2302      	movs	r3, #2
 8006172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006174:	f107 0310 	add.w	r3, r7, #16
 8006178:	4619      	mov	r1, r3
 800617a:	4804      	ldr	r0, [pc, #16]	; (800618c <HAL_TIM_MspPostInit+0x5c>)
 800617c:	f000 fd60 	bl	8006c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006180:	bf00      	nop
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	40010800 	.word	0x40010800

08006190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_UART_MspInit+0x88>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d12f      	bne.n	8006210 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80061b0:	4b1a      	ldr	r3, [pc, #104]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	61d3      	str	r3, [r2, #28]
 80061bc:	4b17      	ldr	r3, [pc, #92]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6193      	str	r3, [r2, #24]
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_UART_MspInit+0x8c>)
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80061e0:	2304      	movs	r3, #4
 80061e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061e8:	2303      	movs	r3, #3
 80061ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ec:	f107 0310 	add.w	r3, r7, #16
 80061f0:	4619      	mov	r1, r3
 80061f2:	480b      	ldr	r0, [pc, #44]	; (8006220 <HAL_UART_MspInit+0x90>)
 80061f4:	f000 fd24 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80061f8:	2308      	movs	r3, #8
 80061fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006204:	f107 0310 	add.w	r3, r7, #16
 8006208:	4619      	mov	r1, r3
 800620a:	4805      	ldr	r0, [pc, #20]	; (8006220 <HAL_UART_MspInit+0x90>)
 800620c:	f000 fd18 	bl	8006c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006210:	bf00      	nop
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40004400 	.word	0x40004400
 800621c:	40021000 	.word	0x40021000
 8006220:	40010800 	.word	0x40010800

08006224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006228:	e7fe      	b.n	8006228 <NMI_Handler+0x4>

0800622a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800622e:	e7fe      	b.n	800622e <HardFault_Handler+0x4>

08006230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006234:	e7fe      	b.n	8006234 <MemManage_Handler+0x4>

08006236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800623a:	e7fe      	b.n	800623a <BusFault_Handler+0x4>

0800623c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006240:	e7fe      	b.n	8006240 <UsageFault_Handler+0x4>

08006242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006246:	bf00      	nop
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr

0800625a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800626a:	f000 f875 	bl	8006358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}

08006272 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
	...

08006280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006280:	f7ff fff7 	bl	8006272 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006284:	480b      	ldr	r0, [pc, #44]	; (80062b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006286:	490c      	ldr	r1, [pc, #48]	; (80062b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006288:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800628a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800628c:	e002      	b.n	8006294 <LoopCopyDataInit>

0800628e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800628e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006292:	3304      	adds	r3, #4

08006294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006298:	d3f9      	bcc.n	800628e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800629a:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800629c:	4c09      	ldr	r4, [pc, #36]	; (80062c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800629e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062a0:	e001      	b.n	80062a6 <LoopFillZerobss>

080062a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062a4:	3204      	adds	r2, #4

080062a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062a8:	d3fb      	bcc.n	80062a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062aa:	f002 f931 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062ae:	f7ff fb4f 	bl	8005950 <main>
  bx lr
 80062b2:	4770      	bx	lr
  ldr r0, =_sdata
 80062b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80062bc:	080085c4 	.word	0x080085c4
  ldr r2, =_sbss
 80062c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80062c4:	20000108 	.word	0x20000108

080062c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062c8:	e7fe      	b.n	80062c8 <ADC1_2_IRQHandler>
	...

080062cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <HAL_Init+0x28>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a07      	ldr	r2, [pc, #28]	; (80062f4 <HAL_Init+0x28>)
 80062d6:	f043 0310 	orr.w	r3, r3, #16
 80062da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062dc:	2003      	movs	r0, #3
 80062de:	f000 fc7b 	bl	8006bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062e2:	200f      	movs	r0, #15
 80062e4:	f000 f808 	bl	80062f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062e8:	f7ff fe74 	bl	8005fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40022000 	.word	0x40022000

080062f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006300:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_InitTick+0x54>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <HAL_InitTick+0x58>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	4619      	mov	r1, r3
 800630a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800630e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fc85 	bl	8006c26 <HAL_SYSTICK_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e00e      	b.n	8006344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b0f      	cmp	r3, #15
 800632a:	d80a      	bhi.n	8006342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800632c:	2200      	movs	r2, #0
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	f000 fc5b 	bl	8006bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006338:	4a06      	ldr	r2, [pc, #24]	; (8006354 <HAL_InitTick+0x5c>)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000000 	.word	0x20000000
 8006350:	20000008 	.word	0x20000008
 8006354:	20000004 	.word	0x20000004

08006358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_IncTick+0x1c>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_IncTick+0x20>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4413      	add	r3, r2
 8006368:	4a03      	ldr	r2, [pc, #12]	; (8006378 <HAL_IncTick+0x20>)
 800636a:	6013      	str	r3, [r2, #0]
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr
 8006374:	20000008 	.word	0x20000008
 8006378:	20000104 	.word	0x20000104

0800637c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return uwTick;
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <HAL_GetTick+0x10>)
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	20000104 	.word	0x20000104

08006390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006398:	f7ff fff0 	bl	800637c <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d005      	beq.n	80063b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_Delay+0x44>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063b6:	bf00      	nop
 80063b8:	f7ff ffe0 	bl	800637c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d8f7      	bhi.n	80063b8 <HAL_Delay+0x28>
  {
  }
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000008 	.word	0x20000008

080063d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0ed      	b.n	80065c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fe1e 	bl	8006038 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800640c:	f7ff ffb6 	bl	800637c <HAL_GetTick>
 8006410:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006412:	e012      	b.n	800643a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006414:	f7ff ffb2 	bl	800637c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b0a      	cmp	r3, #10
 8006420:	d90b      	bls.n	800643a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2205      	movs	r2, #5
 8006432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e0c5      	b.n	80065c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0e5      	beq.n	8006414 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0202 	bic.w	r2, r2, #2
 8006456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006458:	f7ff ff90 	bl	800637c <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800645e:	e012      	b.n	8006486 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006460:	f7ff ff8c 	bl	800637c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b0a      	cmp	r3, #10
 800646c:	d90b      	bls.n	8006486 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2205      	movs	r2, #5
 800647e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e09f      	b.n	80065c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e5      	bne.n	8006460 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d108      	bne.n	80064ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e007      	b.n	80064be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7e5b      	ldrb	r3, [r3, #25]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d108      	bne.n	80064d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e007      	b.n	80064e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7e9b      	ldrb	r3, [r3, #26]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d108      	bne.n	8006502 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0220 	orr.w	r2, r2, #32
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e007      	b.n	8006512 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0220 	bic.w	r2, r2, #32
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7edb      	ldrb	r3, [r3, #27]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d108      	bne.n	800652c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0210 	bic.w	r2, r2, #16
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e007      	b.n	800653c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0210 	orr.w	r2, r2, #16
 800653a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7f1b      	ldrb	r3, [r3, #28]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d108      	bne.n	8006556 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0208 	orr.w	r2, r2, #8
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e007      	b.n	8006566 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0208 	bic.w	r2, r2, #8
 8006564:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7f5b      	ldrb	r3, [r3, #29]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d108      	bne.n	8006580 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0204 	orr.w	r2, r2, #4
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e007      	b.n	8006590 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	ea42 0103 	orr.w	r1, r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065e4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d003      	beq.n	80065f4 <HAL_CAN_ConfigFilter+0x26>
 80065ec:	7cfb      	ldrb	r3, [r7, #19]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	f040 80aa 	bne.w	8006748 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2201      	movs	r2, #1
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	43db      	mvns	r3, r3
 800661e:	401a      	ands	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d123      	bne.n	8006676 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	401a      	ands	r2, r3
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006650:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	3248      	adds	r2, #72	; 0x48
 8006656:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800666a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	3348      	adds	r3, #72	; 0x48
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d122      	bne.n	80066c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	431a      	orrs	r2, r3
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800669e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3248      	adds	r2, #72	; 0x48
 80066a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80066b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	3348      	adds	r3, #72	; 0x48
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	440b      	add	r3, r1
 80066c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80066de:	e007      	b.n	80066f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800670a:	e007      	b.n	800671c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	431a      	orrs	r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	431a      	orrs	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e006      	b.n	8006756 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d12e      	bne.n	80067d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800678c:	f7ff fdf6 	bl	800637c <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006792:	e012      	b.n	80067ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006794:	f7ff fdf2 	bl	800637c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b0a      	cmp	r3, #10
 80067a0:	d90b      	bls.n	80067ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2205      	movs	r2, #5
 80067b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e012      	b.n	80067e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e5      	bne.n	8006794 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e006      	b.n	80067e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d003      	beq.n	800680c <HAL_CAN_GetRxMessage+0x24>
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b02      	cmp	r3, #2
 8006808:	f040 8103 	bne.w	8006a12 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10e      	bne.n	8006830 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d116      	bne.n	800684e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0f7      	b.n	8006a20 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0e8      	b.n	8006a20 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	331b      	adds	r3, #27
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	4413      	add	r3, r2
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0204 	and.w	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	331b      	adds	r3, #27
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	0d5b      	lsrs	r3, r3, #21
 800687c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e00b      	b.n	800689e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	331b      	adds	r3, #27
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	4413      	add	r3, r2
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	331b      	adds	r3, #27
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0202 	and.w	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	331b      	adds	r3, #27
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	3304      	adds	r3, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2208      	movs	r2, #8
 80068d0:	611a      	str	r2, [r3, #16]
 80068d2:	e00b      	b.n	80068ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	331b      	adds	r3, #27
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	331b      	adds	r3, #27
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	4413      	add	r3, r2
 80068f8:	3304      	adds	r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	331b      	adds	r3, #27
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4413      	add	r3, r2
 8006910:	3304      	adds	r3, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	4413      	add	r3, r2
 8006926:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	4413      	add	r3, r2
 800693c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	0a1a      	lsrs	r2, r3, #8
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	4413      	add	r3, r2
 8006956:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0c1a      	lsrs	r2, r3, #16
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	3302      	adds	r3, #2
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	4413      	add	r3, r2
 8006970:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	0e1a      	lsrs	r2, r3, #24
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	3303      	adds	r3, #3
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	4413      	add	r3, r2
 800698a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	3304      	adds	r3, #4
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	0a1a      	lsrs	r2, r3, #8
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	3305      	adds	r3, #5
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	0c1a      	lsrs	r2, r3, #16
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	3306      	adds	r3, #6
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	0e1a      	lsrs	r2, r3, #24
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	3307      	adds	r3, #7
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d108      	bne.n	80069fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0220 	orr.w	r2, r2, #32
 80069fa:	60da      	str	r2, [r3, #12]
 80069fc:	e007      	b.n	8006a0e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0220 	orr.w	r2, r2, #32
 8006a0c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e006      	b.n	8006a20 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a3e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d002      	beq.n	8006a4c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d10f      	bne.n	8006a6c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	e005      	b.n	8006a6c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <__NVIC_SetPriorityGrouping+0x44>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a94:	4013      	ands	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006aaa:	4a04      	ldr	r2, [pc, #16]	; (8006abc <__NVIC_SetPriorityGrouping+0x44>)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	60d3      	str	r3, [r2, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f003 0307 	and.w	r3, r3, #7
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000ed00 	.word	0xe000ed00

08006adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db0a      	blt.n	8006b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	490c      	ldr	r1, [pc, #48]	; (8006b28 <__NVIC_SetPriority+0x4c>)
 8006af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afa:	0112      	lsls	r2, r2, #4
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	440b      	add	r3, r1
 8006b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b04:	e00a      	b.n	8006b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4908      	ldr	r1, [pc, #32]	; (8006b2c <__NVIC_SetPriority+0x50>)
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	3b04      	subs	r3, #4
 8006b14:	0112      	lsls	r2, r2, #4
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	440b      	add	r3, r1
 8006b1a:	761a      	strb	r2, [r3, #24]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	e000e100 	.word	0xe000e100
 8006b2c:	e000ed00 	.word	0xe000ed00

08006b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f1c3 0307 	rsb	r3, r3, #7
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	bf28      	it	cs
 8006b4e:	2304      	movcs	r3, #4
 8006b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3304      	adds	r3, #4
 8006b56:	2b06      	cmp	r3, #6
 8006b58:	d902      	bls.n	8006b60 <NVIC_EncodePriority+0x30>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	3b03      	subs	r3, #3
 8006b5e:	e000      	b.n	8006b62 <NVIC_EncodePriority+0x32>
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43da      	mvns	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	401a      	ands	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b78:	f04f 31ff 	mov.w	r1, #4294967295
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	43d9      	mvns	r1, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b88:	4313      	orrs	r3, r2
         );
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3724      	adds	r7, #36	; 0x24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba4:	d301      	bcc.n	8006baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e00f      	b.n	8006bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006baa:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <SysTick_Config+0x40>)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bb2:	210f      	movs	r1, #15
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	f7ff ff90 	bl	8006adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <SysTick_Config+0x40>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bc2:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <SysTick_Config+0x40>)
 8006bc4:	2207      	movs	r2, #7
 8006bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	e000e010 	.word	0xe000e010

08006bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff49 	bl	8006a78 <__NVIC_SetPriorityGrouping>
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c00:	f7ff ff5e 	bl	8006ac0 <__NVIC_GetPriorityGrouping>
 8006c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	6978      	ldr	r0, [r7, #20]
 8006c0c:	f7ff ff90 	bl	8006b30 <NVIC_EncodePriority>
 8006c10:	4602      	mov	r2, r0
 8006c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff ff5f 	bl	8006adc <__NVIC_SetPriority>
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ffb0 	bl	8006b94 <SysTick_Config>
 8006c34:	4603      	mov	r3, r0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b08b      	sub	sp, #44	; 0x2c
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c52:	e169      	b.n	8006f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006c54:	2201      	movs	r2, #1
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	4013      	ands	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f040 8158 	bne.w	8006f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4a9a      	ldr	r2, [pc, #616]	; (8006ee0 <HAL_GPIO_Init+0x2a0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d05e      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
 8006c7c:	4a98      	ldr	r2, [pc, #608]	; (8006ee0 <HAL_GPIO_Init+0x2a0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d875      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006c82:	4a98      	ldr	r2, [pc, #608]	; (8006ee4 <HAL_GPIO_Init+0x2a4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d058      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
 8006c88:	4a96      	ldr	r2, [pc, #600]	; (8006ee4 <HAL_GPIO_Init+0x2a4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d86f      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006c8e:	4a96      	ldr	r2, [pc, #600]	; (8006ee8 <HAL_GPIO_Init+0x2a8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d052      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
 8006c94:	4a94      	ldr	r2, [pc, #592]	; (8006ee8 <HAL_GPIO_Init+0x2a8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d869      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006c9a:	4a94      	ldr	r2, [pc, #592]	; (8006eec <HAL_GPIO_Init+0x2ac>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d04c      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
 8006ca0:	4a92      	ldr	r2, [pc, #584]	; (8006eec <HAL_GPIO_Init+0x2ac>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d863      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006ca6:	4a92      	ldr	r2, [pc, #584]	; (8006ef0 <HAL_GPIO_Init+0x2b0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d046      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
 8006cac:	4a90      	ldr	r2, [pc, #576]	; (8006ef0 <HAL_GPIO_Init+0x2b0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d85d      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006cb2:	2b12      	cmp	r3, #18
 8006cb4:	d82a      	bhi.n	8006d0c <HAL_GPIO_Init+0xcc>
 8006cb6:	2b12      	cmp	r3, #18
 8006cb8:	d859      	bhi.n	8006d6e <HAL_GPIO_Init+0x12e>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_GPIO_Init+0x80>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006d3b 	.word	0x08006d3b
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d27 	.word	0x08006d27
 8006ccc:	08006d69 	.word	0x08006d69
 8006cd0:	08006d6f 	.word	0x08006d6f
 8006cd4:	08006d6f 	.word	0x08006d6f
 8006cd8:	08006d6f 	.word	0x08006d6f
 8006cdc:	08006d6f 	.word	0x08006d6f
 8006ce0:	08006d6f 	.word	0x08006d6f
 8006ce4:	08006d6f 	.word	0x08006d6f
 8006ce8:	08006d6f 	.word	0x08006d6f
 8006cec:	08006d6f 	.word	0x08006d6f
 8006cf0:	08006d6f 	.word	0x08006d6f
 8006cf4:	08006d6f 	.word	0x08006d6f
 8006cf8:	08006d6f 	.word	0x08006d6f
 8006cfc:	08006d6f 	.word	0x08006d6f
 8006d00:	08006d6f 	.word	0x08006d6f
 8006d04:	08006d1d 	.word	0x08006d1d
 8006d08:	08006d31 	.word	0x08006d31
 8006d0c:	4a79      	ldr	r2, [pc, #484]	; (8006ef4 <HAL_GPIO_Init+0x2b4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006d12:	e02c      	b.n	8006d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	623b      	str	r3, [r7, #32]
          break;
 8006d1a:	e029      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	3304      	adds	r3, #4
 8006d22:	623b      	str	r3, [r7, #32]
          break;
 8006d24:	e024      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	623b      	str	r3, [r7, #32]
          break;
 8006d2e:	e01f      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	330c      	adds	r3, #12
 8006d36:	623b      	str	r3, [r7, #32]
          break;
 8006d38:	e01a      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006d42:	2304      	movs	r3, #4
 8006d44:	623b      	str	r3, [r7, #32]
          break;
 8006d46:	e013      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d105      	bne.n	8006d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d50:	2308      	movs	r3, #8
 8006d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	611a      	str	r2, [r3, #16]
          break;
 8006d5a:	e009      	b.n	8006d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	615a      	str	r2, [r3, #20]
          break;
 8006d66:	e003      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	623b      	str	r3, [r7, #32]
          break;
 8006d6c:	e000      	b.n	8006d70 <HAL_GPIO_Init+0x130>
          break;
 8006d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d801      	bhi.n	8006d7a <HAL_GPIO_Init+0x13a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	e001      	b.n	8006d7e <HAL_GPIO_Init+0x13e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2bff      	cmp	r3, #255	; 0xff
 8006d84:	d802      	bhi.n	8006d8c <HAL_GPIO_Init+0x14c>
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	e002      	b.n	8006d92 <HAL_GPIO_Init+0x152>
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3b08      	subs	r3, #8
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	210f      	movs	r1, #15
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	6a39      	ldr	r1, [r7, #32]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dac:	431a      	orrs	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80b1 	beq.w	8006f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006dc0:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <HAL_GPIO_Init+0x2b8>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	4a4c      	ldr	r2, [pc, #304]	; (8006ef8 <HAL_GPIO_Init+0x2b8>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6193      	str	r3, [r2, #24]
 8006dcc:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <HAL_GPIO_Init+0x2b8>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006dd8:	4a48      	ldr	r2, [pc, #288]	; (8006efc <HAL_GPIO_Init+0x2bc>)
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	3302      	adds	r3, #2
 8006de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	220f      	movs	r2, #15
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a40      	ldr	r2, [pc, #256]	; (8006f00 <HAL_GPIO_Init+0x2c0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_GPIO_Init+0x1ec>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3f      	ldr	r2, [pc, #252]	; (8006f04 <HAL_GPIO_Init+0x2c4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00d      	beq.n	8006e28 <HAL_GPIO_Init+0x1e8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a3e      	ldr	r2, [pc, #248]	; (8006f08 <HAL_GPIO_Init+0x2c8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <HAL_GPIO_Init+0x1e4>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a3d      	ldr	r2, [pc, #244]	; (8006f0c <HAL_GPIO_Init+0x2cc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_GPIO_Init+0x1e0>
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <HAL_GPIO_Init+0x1ee>
 8006e20:	2304      	movs	r3, #4
 8006e22:	e004      	b.n	8006e2e <HAL_GPIO_Init+0x1ee>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e002      	b.n	8006e2e <HAL_GPIO_Init+0x1ee>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <HAL_GPIO_Init+0x1ee>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e30:	f002 0203 	and.w	r2, r2, #3
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	4093      	lsls	r3, r2
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006e3e:	492f      	ldr	r1, [pc, #188]	; (8006efc <HAL_GPIO_Init+0x2bc>)
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	3302      	adds	r3, #2
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	492c      	ldr	r1, [pc, #176]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	608b      	str	r3, [r1, #8]
 8006e64:	e006      	b.n	8006e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006e66:	4b2a      	ldr	r3, [pc, #168]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	4928      	ldr	r1, [pc, #160]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e80:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4922      	ldr	r1, [pc, #136]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60cb      	str	r3, [r1, #12]
 8006e8c:	e006      	b.n	8006e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e8e:	4b20      	ldr	r3, [pc, #128]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	491e      	ldr	r1, [pc, #120]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ea8:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4918      	ldr	r1, [pc, #96]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	604b      	str	r3, [r1, #4]
 8006eb4:	e006      	b.n	8006ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	4914      	ldr	r1, [pc, #80]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d021      	beq.n	8006f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	490e      	ldr	r1, [pc, #56]	; (8006f10 <HAL_GPIO_Init+0x2d0>)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]
 8006edc:	e021      	b.n	8006f22 <HAL_GPIO_Init+0x2e2>
 8006ede:	bf00      	nop
 8006ee0:	10320000 	.word	0x10320000
 8006ee4:	10310000 	.word	0x10310000
 8006ee8:	10220000 	.word	0x10220000
 8006eec:	10210000 	.word	0x10210000
 8006ef0:	10120000 	.word	0x10120000
 8006ef4:	10110000 	.word	0x10110000
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40010800 	.word	0x40010800
 8006f04:	40010c00 	.word	0x40010c00
 8006f08:	40011000 	.word	0x40011000
 8006f0c:	40011400 	.word	0x40011400
 8006f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_GPIO_Init+0x304>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	4909      	ldr	r1, [pc, #36]	; (8006f44 <HAL_GPIO_Init+0x304>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	3301      	adds	r3, #1
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f47f ae8e 	bne.w	8006c54 <HAL_GPIO_Init+0x14>
  }
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	372c      	adds	r7, #44	; 0x2c
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr
 8006f44:	40010400 	.word	0x40010400

08006f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	807b      	strh	r3, [r7, #2]
 8006f54:	4613      	mov	r3, r2
 8006f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f58:	787b      	ldrb	r3, [r7, #1]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f5e:	887a      	ldrh	r2, [r7, #2]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006f64:	e003      	b.n	8006f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f66:	887b      	ldrh	r3, [r7, #2]
 8006f68:	041a      	lsls	r2, r3, #16
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	041a      	lsls	r2, r3, #16
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	43d9      	mvns	r1, r3
 8006f96:	887b      	ldrh	r3, [r7, #2]
 8006f98:	400b      	ands	r3, r1
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	611a      	str	r2, [r3, #16]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
	...

08006fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e272      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8087 	beq.w	80070da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fcc:	4b92      	ldr	r3, [pc, #584]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f003 030c 	and.w	r3, r3, #12
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fd8:	4b8f      	ldr	r3, [pc, #572]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 030c 	and.w	r3, r3, #12
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d112      	bne.n	800700a <HAL_RCC_OscConfig+0x5e>
 8006fe4:	4b8c      	ldr	r3, [pc, #560]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff0:	d10b      	bne.n	800700a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff2:	4b89      	ldr	r3, [pc, #548]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d06c      	beq.n	80070d8 <HAL_RCC_OscConfig+0x12c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d168      	bne.n	80070d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e24c      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x76>
 8007014:	4b80      	ldr	r3, [pc, #512]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a7f      	ldr	r2, [pc, #508]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e02e      	b.n	8007080 <HAL_RCC_OscConfig+0xd4>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x98>
 800702a:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a7a      	ldr	r2, [pc, #488]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b78      	ldr	r3, [pc, #480]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a77      	ldr	r2, [pc, #476]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800703c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e01d      	b.n	8007080 <HAL_RCC_OscConfig+0xd4>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800704c:	d10c      	bne.n	8007068 <HAL_RCC_OscConfig+0xbc>
 800704e:	4b72      	ldr	r3, [pc, #456]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a71      	ldr	r2, [pc, #452]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4b6f      	ldr	r3, [pc, #444]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a6e      	ldr	r2, [pc, #440]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e00b      	b.n	8007080 <HAL_RCC_OscConfig+0xd4>
 8007068:	4b6b      	ldr	r3, [pc, #428]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6a      	ldr	r2, [pc, #424]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d013      	beq.n	80070b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007088:	f7ff f978 	bl	800637c <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007090:	f7ff f974 	bl	800637c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b64      	cmp	r3, #100	; 0x64
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e200      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a2:	4b5d      	ldr	r3, [pc, #372]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0xe4>
 80070ae:	e014      	b.n	80070da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7ff f964 	bl	800637c <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7ff f960 	bl	800637c <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	; 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e1ec      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ca:	4b53      	ldr	r3, [pc, #332]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x10c>
 80070d6:	e000      	b.n	80070da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d063      	beq.n	80071ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070e6:	4b4c      	ldr	r3, [pc, #304]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 030c 	and.w	r3, r3, #12
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070f2:	4b49      	ldr	r3, [pc, #292]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d11c      	bne.n	8007138 <HAL_RCC_OscConfig+0x18c>
 80070fe:	4b46      	ldr	r3, [pc, #280]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d116      	bne.n	8007138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710a:	4b43      	ldr	r3, [pc, #268]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_RCC_OscConfig+0x176>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d001      	beq.n	8007122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e1c0      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007122:	4b3d      	ldr	r3, [pc, #244]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4939      	ldr	r1, [pc, #228]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007136:	e03a      	b.n	80071ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d020      	beq.n	8007182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007140:	4b36      	ldr	r3, [pc, #216]	; (800721c <HAL_RCC_OscConfig+0x270>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7ff f919 	bl	800637c <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714e:	f7ff f915 	bl	800637c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e1a1      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007160:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800716c:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	4927      	ldr	r1, [pc, #156]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 800717c:	4313      	orrs	r3, r2
 800717e:	600b      	str	r3, [r1, #0]
 8007180:	e015      	b.n	80071ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007182:	4b26      	ldr	r3, [pc, #152]	; (800721c <HAL_RCC_OscConfig+0x270>)
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007188:	f7ff f8f8 	bl	800637c <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007190:	f7ff f8f4 	bl	800637c <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e180      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a2:	4b1d      	ldr	r3, [pc, #116]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f0      	bne.n	8007190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03a      	beq.n	8007230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d019      	beq.n	80071f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c2:	4b17      	ldr	r3, [pc, #92]	; (8007220 <HAL_RCC_OscConfig+0x274>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c8:	f7ff f8d8 	bl	800637c <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d0:	f7ff f8d4 	bl	800637c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e160      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <HAL_RCC_OscConfig+0x26c>)
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071ee:	2001      	movs	r0, #1
 80071f0:	f000 face 	bl	8007790 <RCC_Delay>
 80071f4:	e01c      	b.n	8007230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_RCC_OscConfig+0x274>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fc:	f7ff f8be 	bl	800637c <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007202:	e00f      	b.n	8007224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007204:	f7ff f8ba 	bl	800637c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d908      	bls.n	8007224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e146      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	42420000 	.word	0x42420000
 8007220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007224:	4b92      	ldr	r3, [pc, #584]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e9      	bne.n	8007204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80a6 	beq.w	800738a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007242:	4b8b      	ldr	r3, [pc, #556]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10d      	bne.n	800726a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724e:	4b88      	ldr	r3, [pc, #544]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4a87      	ldr	r2, [pc, #540]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007258:	61d3      	str	r3, [r2, #28]
 800725a:	4b85      	ldr	r3, [pc, #532]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726a:	4b82      	ldr	r3, [pc, #520]	; (8007474 <HAL_RCC_OscConfig+0x4c8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007276:	4b7f      	ldr	r3, [pc, #508]	; (8007474 <HAL_RCC_OscConfig+0x4c8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a7e      	ldr	r2, [pc, #504]	; (8007474 <HAL_RCC_OscConfig+0x4c8>)
 800727c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007282:	f7ff f87b 	bl	800637c <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728a:	f7ff f877 	bl	800637c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b64      	cmp	r3, #100	; 0x64
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e103      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	4b75      	ldr	r3, [pc, #468]	; (8007474 <HAL_RCC_OscConfig+0x4c8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d106      	bne.n	80072be <HAL_RCC_OscConfig+0x312>
 80072b0:	4b6f      	ldr	r3, [pc, #444]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	4a6e      	ldr	r2, [pc, #440]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6213      	str	r3, [r2, #32]
 80072bc:	e02d      	b.n	800731a <HAL_RCC_OscConfig+0x36e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x334>
 80072c6:	4b6a      	ldr	r3, [pc, #424]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	4a69      	ldr	r2, [pc, #420]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	6213      	str	r3, [r2, #32]
 80072d2:	4b67      	ldr	r3, [pc, #412]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	4a66      	ldr	r2, [pc, #408]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072d8:	f023 0304 	bic.w	r3, r3, #4
 80072dc:	6213      	str	r3, [r2, #32]
 80072de:	e01c      	b.n	800731a <HAL_RCC_OscConfig+0x36e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	2b05      	cmp	r3, #5
 80072e6:	d10c      	bne.n	8007302 <HAL_RCC_OscConfig+0x356>
 80072e8:	4b61      	ldr	r3, [pc, #388]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	4a60      	ldr	r2, [pc, #384]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072ee:	f043 0304 	orr.w	r3, r3, #4
 80072f2:	6213      	str	r3, [r2, #32]
 80072f4:	4b5e      	ldr	r3, [pc, #376]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	4a5d      	ldr	r2, [pc, #372]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	6213      	str	r3, [r2, #32]
 8007300:	e00b      	b.n	800731a <HAL_RCC_OscConfig+0x36e>
 8007302:	4b5b      	ldr	r3, [pc, #364]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	4a5a      	ldr	r2, [pc, #360]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6213      	str	r3, [r2, #32]
 800730e:	4b58      	ldr	r3, [pc, #352]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	4a57      	ldr	r2, [pc, #348]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007314:	f023 0304 	bic.w	r3, r3, #4
 8007318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d015      	beq.n	800734e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007322:	f7ff f82b 	bl	800637c <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007328:	e00a      	b.n	8007340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732a:	f7ff f827 	bl	800637c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f241 3288 	movw	r2, #5000	; 0x1388
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e0b1      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007340:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0ee      	beq.n	800732a <HAL_RCC_OscConfig+0x37e>
 800734c:	e014      	b.n	8007378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734e:	f7ff f815 	bl	800637c <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007354:	e00a      	b.n	800736c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007356:	f7ff f811 	bl	800637c <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	f241 3288 	movw	r2, #5000	; 0x1388
 8007364:	4293      	cmp	r3, r2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e09b      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736c:	4b40      	ldr	r3, [pc, #256]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1ee      	bne.n	8007356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d105      	bne.n	800738a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800737e:	4b3c      	ldr	r3, [pc, #240]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	4a3b      	ldr	r2, [pc, #236]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8087 	beq.w	80074a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007394:	4b36      	ldr	r3, [pc, #216]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 030c 	and.w	r3, r3, #12
 800739c:	2b08      	cmp	r3, #8
 800739e:	d061      	beq.n	8007464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d146      	bne.n	8007436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a8:	4b33      	ldr	r3, [pc, #204]	; (8007478 <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ae:	f7fe ffe5 	bl	800637c <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b6:	f7fe ffe1 	bl	800637c <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e06d      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073c8:	4b29      	ldr	r3, [pc, #164]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f0      	bne.n	80073b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073dc:	d108      	bne.n	80073f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073de:	4b24      	ldr	r3, [pc, #144]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	4921      	ldr	r1, [pc, #132]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f0:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a19      	ldr	r1, [r3, #32]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	430b      	orrs	r3, r1
 8007402:	491b      	ldr	r1, [pc, #108]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <HAL_RCC_OscConfig+0x4cc>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740e:	f7fe ffb5 	bl	800637c <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007414:	e008      	b.n	8007428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007416:	f7fe ffb1 	bl	800637c <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e03d      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0f0      	beq.n	8007416 <HAL_RCC_OscConfig+0x46a>
 8007434:	e035      	b.n	80074a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_RCC_OscConfig+0x4cc>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743c:	f7fe ff9e 	bl	800637c <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007444:	f7fe ff9a 	bl	800637c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e026      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <HAL_RCC_OscConfig+0x4c4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x498>
 8007462:	e01e      	b.n	80074a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d107      	bne.n	800747c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e019      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
 8007470:	40021000 	.word	0x40021000
 8007474:	40007000 	.word	0x40007000
 8007478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800747c:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <HAL_RCC_OscConfig+0x500>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	429a      	cmp	r2, r3
 800748e:	d106      	bne.n	800749e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d001      	beq.n	80074a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40021000 	.word	0x40021000

080074b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0d0      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074c4:	4b6a      	ldr	r3, [pc, #424]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d910      	bls.n	80074f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d2:	4b67      	ldr	r3, [pc, #412]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f023 0207 	bic.w	r2, r3, #7
 80074da:	4965      	ldr	r1, [pc, #404]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	4313      	orrs	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0b8      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800750c:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4a58      	ldr	r2, [pc, #352]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007524:	4b53      	ldr	r3, [pc, #332]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a52      	ldr	r2, [pc, #328]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800752a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800752e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007530:	4b50      	ldr	r3, [pc, #320]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	494d      	ldr	r1, [pc, #308]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800753e:	4313      	orrs	r3, r2
 8007540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d040      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d115      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e07f      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e073      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800757e:	4b3d      	ldr	r3, [pc, #244]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e06b      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800758e:	4b39      	ldr	r3, [pc, #228]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f023 0203 	bic.w	r2, r3, #3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4936      	ldr	r1, [pc, #216]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	4313      	orrs	r3, r2
 800759e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075a0:	f7fe feec 	bl	800637c <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	e00a      	b.n	80075be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a8:	f7fe fee8 	bl	800637c <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e053      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f003 020c 	and.w	r2, r3, #12
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d1eb      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075d0:	4b27      	ldr	r3, [pc, #156]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d210      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f023 0207 	bic.w	r2, r3, #7
 80075e6:	4922      	ldr	r1, [pc, #136]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e032      	b.n	8007666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800760c:	4b19      	ldr	r3, [pc, #100]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4916      	ldr	r1, [pc, #88]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	490e      	ldr	r1, [pc, #56]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 800763a:	4313      	orrs	r3, r2
 800763c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800763e:	f000 f821 	bl	8007684 <HAL_RCC_GetSysClockFreq>
 8007642:	4602      	mov	r2, r0
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	490a      	ldr	r1, [pc, #40]	; (8007678 <HAL_RCC_ClockConfig+0x1c8>)
 8007650:	5ccb      	ldrb	r3, [r1, r3]
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <HAL_RCC_ClockConfig+0x1cc>)
 8007658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_RCC_ClockConfig+0x1d0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fe4a 	bl	80062f8 <HAL_InitTick>

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	40022000 	.word	0x40022000
 8007674:	40021000 	.word	0x40021000
 8007678:	08008590 	.word	0x08008590
 800767c:	20000000 	.word	0x20000000
 8007680:	20000004 	.word	0x20000004

08007684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800769e:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <HAL_RCC_GetSysClockFreq+0x94>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 030c 	and.w	r3, r3, #12
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d002      	beq.n	80076b4 <HAL_RCC_GetSysClockFreq+0x30>
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d003      	beq.n	80076ba <HAL_RCC_GetSysClockFreq+0x36>
 80076b2:	e027      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <HAL_RCC_GetSysClockFreq+0x98>)
 80076b6:	613b      	str	r3, [r7, #16]
      break;
 80076b8:	e027      	b.n	800770a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	0c9b      	lsrs	r3, r3, #18
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	4a17      	ldr	r2, [pc, #92]	; (8007720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076c4:	5cd3      	ldrb	r3, [r2, r3]
 80076c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d010      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <HAL_RCC_GetSysClockFreq+0x94>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	0c5b      	lsrs	r3, r3, #17
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	4a11      	ldr	r2, [pc, #68]	; (8007724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076de:	5cd3      	ldrb	r3, [r2, r3]
 80076e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <HAL_RCC_GetSysClockFreq+0x98>)
 80076e6:	fb03 f202 	mul.w	r2, r3, r2
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e004      	b.n	80076fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076f8:	fb02 f303 	mul.w	r3, r2, r3
 80076fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	613b      	str	r3, [r7, #16]
      break;
 8007702:	e002      	b.n	800770a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_RCC_GetSysClockFreq+0x98>)
 8007706:	613b      	str	r3, [r7, #16]
      break;
 8007708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800770a:	693b      	ldr	r3, [r7, #16]
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40021000 	.word	0x40021000
 800771c:	007a1200 	.word	0x007a1200
 8007720:	080085a8 	.word	0x080085a8
 8007724:	080085b8 	.word	0x080085b8
 8007728:	003d0900 	.word	0x003d0900

0800772c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <HAL_RCC_GetHCLKFreq+0x10>)
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	20000000 	.word	0x20000000

08007740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007744:	f7ff fff2 	bl	800772c <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4903      	ldr	r1, [pc, #12]	; (8007764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800775c:	4618      	mov	r0, r3
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40021000 	.word	0x40021000
 8007764:	080085a0 	.word	0x080085a0

08007768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800776c:	f7ff ffde 	bl	800772c <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	0adb      	lsrs	r3, r3, #11
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4903      	ldr	r1, [pc, #12]	; (800778c <HAL_RCC_GetPCLK2Freq+0x24>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40021000 	.word	0x40021000
 800778c:	080085a0 	.word	0x080085a0

08007790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <RCC_Delay+0x34>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a0a      	ldr	r2, [pc, #40]	; (80077c8 <RCC_Delay+0x38>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0a5b      	lsrs	r3, r3, #9
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077ac:	bf00      	nop
  }
  while (Delay --);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f9      	bne.n	80077ac <RCC_Delay+0x1c>
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	20000000 	.word	0x20000000
 80077c8:	10624dd3 	.word	0x10624dd3

080077cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d001      	beq.n	80077e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e032      	b.n	800784a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_TIM_Base_Start+0x88>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00e      	beq.n	8007814 <HAL_TIM_Base_Start+0x48>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fe:	d009      	beq.n	8007814 <HAL_TIM_Base_Start+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a14      	ldr	r2, [pc, #80]	; (8007858 <HAL_TIM_Base_Start+0x8c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <HAL_TIM_Base_Start+0x48>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a13      	ldr	r2, [pc, #76]	; (800785c <HAL_TIM_Base_Start+0x90>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d111      	bne.n	8007838 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b06      	cmp	r3, #6
 8007824:	d010      	beq.n	8007848 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	e007      	b.n	8007848 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800

08007860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e041      	b.n	80078f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fe fc36 	bl	80060f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f000 f992 	bl	8007bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_TIM_PWM_Start+0x24>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	bf14      	ite	ne
 800791c:	2301      	movne	r3, #1
 800791e:	2300      	moveq	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	e022      	b.n	800796a <HAL_TIM_PWM_Start+0x6a>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b04      	cmp	r3, #4
 8007928:	d109      	bne.n	800793e <HAL_TIM_PWM_Start+0x3e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	bf14      	ite	ne
 8007936:	2301      	movne	r3, #1
 8007938:	2300      	moveq	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	e015      	b.n	800796a <HAL_TIM_PWM_Start+0x6a>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d109      	bne.n	8007958 <HAL_TIM_PWM_Start+0x58>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	bf14      	ite	ne
 8007950:	2301      	movne	r3, #1
 8007952:	2300      	moveq	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e008      	b.n	800796a <HAL_TIM_PWM_Start+0x6a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	bf14      	ite	ne
 8007964:	2301      	movne	r3, #1
 8007966:	2300      	moveq	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e05e      	b.n	8007a30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <HAL_TIM_PWM_Start+0x82>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007980:	e013      	b.n	80079aa <HAL_TIM_PWM_Start+0xaa>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b04      	cmp	r3, #4
 8007986:	d104      	bne.n	8007992 <HAL_TIM_PWM_Start+0x92>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007990:	e00b      	b.n	80079aa <HAL_TIM_PWM_Start+0xaa>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b08      	cmp	r3, #8
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_PWM_Start+0xa2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a0:	e003      	b.n	80079aa <HAL_TIM_PWM_Start+0xaa>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2201      	movs	r2, #1
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fafe 	bl	8007fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <HAL_TIM_PWM_Start+0x138>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d107      	bne.n	80079d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <HAL_TIM_PWM_Start+0x138>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00e      	beq.n	80079fa <HAL_TIM_PWM_Start+0xfa>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e4:	d009      	beq.n	80079fa <HAL_TIM_PWM_Start+0xfa>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <HAL_TIM_PWM_Start+0x13c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d004      	beq.n	80079fa <HAL_TIM_PWM_Start+0xfa>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a12      	ldr	r2, [pc, #72]	; (8007a40 <HAL_TIM_PWM_Start+0x140>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d111      	bne.n	8007a1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b06      	cmp	r3, #6
 8007a0a:	d010      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	e007      	b.n	8007a2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800

08007a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e0ae      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b0c      	cmp	r3, #12
 8007a6e:	f200 809f 	bhi.w	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007bb1 	.word	0x08007bb1
 8007a80:	08007bb1 	.word	0x08007bb1
 8007a84:	08007bb1 	.word	0x08007bb1
 8007a88:	08007aed 	.word	0x08007aed
 8007a8c:	08007bb1 	.word	0x08007bb1
 8007a90:	08007bb1 	.word	0x08007bb1
 8007a94:	08007bb1 	.word	0x08007bb1
 8007a98:	08007b2f 	.word	0x08007b2f
 8007a9c:	08007bb1 	.word	0x08007bb1
 8007aa0:	08007bb1 	.word	0x08007bb1
 8007aa4:	08007bb1 	.word	0x08007bb1
 8007aa8:	08007b6f 	.word	0x08007b6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f8f6 	bl	8007ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699a      	ldr	r2, [r3, #24]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0208 	orr.w	r2, r2, #8
 8007ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0204 	bic.w	r2, r2, #4
 8007ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6999      	ldr	r1, [r3, #24]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	619a      	str	r2, [r3, #24]
      break;
 8007aea:	e064      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68b9      	ldr	r1, [r7, #8]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f93c 	bl	8007d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6999      	ldr	r1, [r3, #24]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	021a      	lsls	r2, r3, #8
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	619a      	str	r2, [r3, #24]
      break;
 8007b2c:	e043      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f985 	bl	8007e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69da      	ldr	r2, [r3, #28]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0208 	orr.w	r2, r2, #8
 8007b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0204 	bic.w	r2, r2, #4
 8007b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69d9      	ldr	r1, [r3, #28]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	61da      	str	r2, [r3, #28]
      break;
 8007b6c:	e023      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f9cf 	bl	8007f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69da      	ldr	r2, [r3, #28]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69d9      	ldr	r1, [r3, #28]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	021a      	lsls	r2, r3, #8
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	61da      	str	r2, [r3, #28]
      break;
 8007bae:	e002      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2f      	ldr	r2, [pc, #188]	; (8007c98 <TIM_Base_SetConfig+0xd0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_Base_SetConfig+0x30>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be6:	d007      	beq.n	8007bf8 <TIM_Base_SetConfig+0x30>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a2c      	ldr	r2, [pc, #176]	; (8007c9c <TIM_Base_SetConfig+0xd4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_Base_SetConfig+0x30>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a2b      	ldr	r2, [pc, #172]	; (8007ca0 <TIM_Base_SetConfig+0xd8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d108      	bne.n	8007c0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <TIM_Base_SetConfig+0xd0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00b      	beq.n	8007c2a <TIM_Base_SetConfig+0x62>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c18:	d007      	beq.n	8007c2a <TIM_Base_SetConfig+0x62>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <TIM_Base_SetConfig+0xd4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_Base_SetConfig+0x62>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1e      	ldr	r2, [pc, #120]	; (8007ca0 <TIM_Base_SetConfig+0xd8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d108      	bne.n	8007c3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0d      	ldr	r2, [pc, #52]	; (8007c98 <TIM_Base_SetConfig+0xd0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d103      	bne.n	8007c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f023 0201 	bic.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	611a      	str	r2, [r3, #16]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr
 8007c98:	40012c00 	.word	0x40012c00
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40000800 	.word	0x40000800

08007ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f023 0201 	bic.w	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f023 0302 	bic.w	r3, r3, #2
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <TIM_OC1_SetConfig+0xc8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10c      	bne.n	8007d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 0308 	bic.w	r3, r3, #8
 8007d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f023 0304 	bic.w	r3, r3, #4
 8007d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <TIM_OC1_SetConfig+0xc8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d111      	bne.n	8007d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40012c00 	.word	0x40012c00

08007d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f023 0210 	bic.w	r2, r3, #16
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0320 	bic.w	r3, r3, #32
 8007dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <TIM_OC2_SetConfig+0xd0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10d      	bne.n	8007dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <TIM_OC2_SetConfig+0xd0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d113      	bne.n	8007e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	621a      	str	r2, [r3, #32]
}
 8007e36:	bf00      	nop
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr
 8007e40:	40012c00 	.word	0x40012c00

08007e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <TIM_OC3_SetConfig+0xd0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d10d      	bne.n	8007ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a14      	ldr	r2, [pc, #80]	; (8007f14 <TIM_OC3_SetConfig+0xd0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d113      	bne.n	8007eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	621a      	str	r2, [r3, #32]
}
 8007f08:	bf00      	nop
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40012c00 	.word	0x40012c00

08007f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	031b      	lsls	r3, r3, #12
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <TIM_OC4_SetConfig+0x98>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d109      	bne.n	8007f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	019b      	lsls	r3, r3, #6
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr
 8007fb0:	40012c00 	.word	0x40012c00

08007fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1a      	ldr	r2, [r3, #32]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	401a      	ands	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	431a      	orrs	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008010:	2302      	movs	r3, #2
 8008012:	e046      	b.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a16      	ldr	r2, [pc, #88]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00e      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008060:	d009      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a10      	ldr	r2, [pc, #64]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d10c      	bne.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800807c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4313      	orrs	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800

080080b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e042      	b.n	8008150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7fe f856 	bl	8006190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2224      	movs	r2, #36	; 0x24
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f971 	bl	80083e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af02      	add	r7, sp, #8
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b20      	cmp	r3, #32
 8008176:	d175      	bne.n	8008264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <HAL_UART_Transmit+0x2c>
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e06e      	b.n	8008266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2221      	movs	r2, #33	; 0x21
 8008192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008196:	f7fe f8f1 	bl	800637c <HAL_GetTick>
 800819a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	88fa      	ldrh	r2, [r7, #6]
 80081a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d108      	bne.n	80081c4 <HAL_UART_Transmit+0x6c>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	e003      	b.n	80081cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081cc:	e02e      	b.n	800822c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2200      	movs	r2, #0
 80081d6:	2180      	movs	r1, #128	; 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f848 	bl	800826e <UART_WaitOnFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e03a      	b.n	8008266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	3302      	adds	r3, #2
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	e007      	b.n	800821e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1cb      	bne.n	80081ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2200      	movs	r2, #0
 800823e:	2140      	movs	r1, #64	; 0x40
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f814 	bl	800826e <UART_WaitOnFlagUntilTimeout>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008264:	2302      	movs	r3, #2
  }
}
 8008266:	4618      	mov	r0, r3
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800827e:	e03b      	b.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d037      	beq.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008288:	f7fe f878 	bl	800637c <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	429a      	cmp	r2, r3
 8008296:	d302      	bcc.n	800829e <UART_WaitOnFlagUntilTimeout+0x30>
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e03a      	b.n	8008318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d023      	beq.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d020      	beq.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b40      	cmp	r3, #64	; 0x40
 80082ba:	d01d      	beq.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d116      	bne.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f81d 	bl	8008320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2208      	movs	r2, #8
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e00f      	b.n	8008318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4013      	ands	r3, r2
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	429a      	cmp	r2, r3
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	429a      	cmp	r2, r3
 8008314:	d0b4      	beq.n	8008280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b095      	sub	sp, #84	; 0x54
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	330c      	adds	r3, #12
 800832e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800833e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008348:	643a      	str	r2, [r7, #64]	; 0x40
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800834e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008350:	e841 2300 	strex	r3, r2, [r1]
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e5      	bne.n	8008328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3314      	adds	r3, #20
 8008362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	61fb      	str	r3, [r7, #28]
   return(result);
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	64bb      	str	r3, [r7, #72]	; 0x48
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3314      	adds	r3, #20
 800837a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800837c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e5      	bne.n	800835c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	2b01      	cmp	r3, #1
 8008396:	d119      	bne.n	80083cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	330c      	adds	r3, #12
 800839e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f023 0310 	bic.w	r3, r3, #16
 80083ae:	647b      	str	r3, [r7, #68]	; 0x44
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b8:	61ba      	str	r2, [r7, #24]
 80083ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6979      	ldr	r1, [r7, #20]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	613b      	str	r3, [r7, #16]
   return(result);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e5      	bne.n	8008398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083da:	bf00      	nop
 80083dc:	3754      	adds	r7, #84	; 0x54
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800841e:	f023 030c 	bic.w	r3, r3, #12
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	430b      	orrs	r3, r1
 800842a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a2c      	ldr	r2, [pc, #176]	; (80084f8 <UART_SetConfig+0x114>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d103      	bne.n	8008454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800844c:	f7ff f98c 	bl	8007768 <HAL_RCC_GetPCLK2Freq>
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	e002      	b.n	800845a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008454:	f7ff f974 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 8008458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009a      	lsls	r2, r3, #2
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008470:	4a22      	ldr	r2, [pc, #136]	; (80084fc <UART_SetConfig+0x118>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	0119      	lsls	r1, r3, #4
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009a      	lsls	r2, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008490:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <UART_SetConfig+0x118>)
 8008492:	fba3 0302 	umull	r0, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2064      	movs	r0, #100	; 0x64
 800849a:	fb00 f303 	mul.w	r3, r0, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a15      	ldr	r2, [pc, #84]	; (80084fc <UART_SetConfig+0x118>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b0:	4419      	add	r1, r3
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009a      	lsls	r2, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <UART_SetConfig+0x118>)
 80084ca:	fba3 0302 	umull	r0, r3, r3, r2
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	2064      	movs	r0, #100	; 0x64
 80084d2:	fb00 f303 	mul.w	r3, r0, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	3332      	adds	r3, #50	; 0x32
 80084dc:	4a07      	ldr	r2, [pc, #28]	; (80084fc <UART_SetConfig+0x118>)
 80084de:	fba2 2303 	umull	r2, r3, r2, r3
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	f003 020f 	and.w	r2, r3, #15
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	440a      	add	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40013800 	.word	0x40013800
 80084fc:	51eb851f 	.word	0x51eb851f

08008500 <memset>:
 8008500:	4603      	mov	r3, r0
 8008502:	4402      	add	r2, r0
 8008504:	4293      	cmp	r3, r2
 8008506:	d100      	bne.n	800850a <memset+0xa>
 8008508:	4770      	bx	lr
 800850a:	f803 1b01 	strb.w	r1, [r3], #1
 800850e:	e7f9      	b.n	8008504 <memset+0x4>

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	2600      	movs	r6, #0
 8008514:	4d0c      	ldr	r5, [pc, #48]	; (8008548 <__libc_init_array+0x38>)
 8008516:	4c0d      	ldr	r4, [pc, #52]	; (800854c <__libc_init_array+0x3c>)
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	f000 f81a 	bl	8008558 <_init>
 8008524:	2600      	movs	r6, #0
 8008526:	4d0a      	ldr	r5, [pc, #40]	; (8008550 <__libc_init_array+0x40>)
 8008528:	4c0a      	ldr	r4, [pc, #40]	; (8008554 <__libc_init_array+0x44>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f855 3b04 	ldr.w	r3, [r5], #4
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	080085bc 	.word	0x080085bc
 800854c:	080085bc 	.word	0x080085bc
 8008550:	080085bc 	.word	0x080085bc
 8008554:	080085c0 	.word	0x080085c0

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
