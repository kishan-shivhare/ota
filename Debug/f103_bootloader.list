
f103_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc8  08004cc8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc8  08004cc8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000060  08004d30  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08004d30  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086a1  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0b  00000000  00000000  0002876d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063f  00000000  00000000  0002ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001703d  00000000  00000000  0002b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a15f  00000000  00000000  000421fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008288e  00000000  00000000  0004c35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027a4  00000000  00000000  000cebec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d1390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080046e8 	.word	0x080046e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080046e8 	.word	0x080046e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fe88 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81c 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8aa 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f854 	bl	8000218 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f87c 	bl	800026c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2104      	movs	r1, #4
 8000178:	4807      	ldr	r0, [pc, #28]	; (8000198 <main+0x3c>)
 800017a:	f001 fd51 	bl	8001c20 <HAL_GPIO_WritePin>

    SerialWrite("Bootloader Started\n");
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <main+0x40>)
 8000180:	f000 f8f0 	bl	8000364 <SerialWrite>
    ec200u_reset();
 8000184:	f000 f90a 	bl	800039c <ec200u_reset>

	HAL_Delay(2000);
 8000188:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800018c:	f000 fef2 	bl	8000f74 <HAL_Delay>
	perform_OTA();
 8000190:	f000 fa62 	bl	8000658 <perform_OTA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000194:	e7fe      	b.n	8000194 <main+0x38>
 8000196:	bf00      	nop
 8000198:	40010c00 	.word	0x40010c00
 800019c:	08004700 	.word	0x08004700

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 f96e 	bl	8003490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fdd4 	bl	8001d84 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 fcb7 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f002 f841 	bl	8002288 <HAL_RCC_ClockConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800020c:	f000 fca2 	bl	8000b54 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3740      	adds	r7, #64	; 0x40
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <MX_USART1_UART_Init+0x50>)
 8000220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000222:	4b10      	ldr	r3, [pc, #64]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800023c:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800023e:	220c      	movs	r2, #12
 8000240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000250:	f002 f9a8 	bl	80025a4 <HAL_UART_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025a:	f000 fc7b 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000007c 	.word	0x2000007c
 8000268:	40013800 	.word	0x40013800

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART2_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f002 f97e 	bl	80025a4 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 fc51 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000c4 	.word	0x200000c4
 80002bc:	40004400 	.word	0x40004400

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b20      	ldr	r3, [pc, #128]	; (8000358 <MX_GPIO_Init+0x98>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <MX_GPIO_Init+0x98>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <MX_GPIO_Init+0x98>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_GPIO_Init+0x98>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <MX_GPIO_Init+0x98>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_GPIO_Init+0x98>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0308 	and.w	r3, r3, #8
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2120      	movs	r1, #32
 8000308:	4814      	ldr	r0, [pc, #80]	; (800035c <MX_GPIO_Init+0x9c>)
 800030a:	f001 fc89 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2104      	movs	r1, #4
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_GPIO_Init+0xa0>)
 8000314:	f001 fc84 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000318:	2320      	movs	r3, #32
 800031a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2302      	movs	r3, #2
 8000326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0x9c>)
 8000330:	f001 fa36 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2302      	movs	r3, #2
 8000342:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4619      	mov	r1, r3
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_GPIO_Init+0xa0>)
 800034c:	f001 fa28 	bl	80017a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000350:	bf00      	nop
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <SerialWrite>:

/* USER CODE BEGIN 4 */
void SerialWrite(char *data) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit(&huart2, (uint8_t*) data, strlen(data),
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff feed 	bl	800014c <strlen>
 8000372:	4603      	mov	r3, r0
 8000374:	b29a      	uxth	r2, r3
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4806      	ldr	r0, [pc, #24]	; (8000398 <SerialWrite+0x34>)
 800037e:	f002 f993 	bl	80026a8 <HAL_UART_Transmit>
 8000382:	4603      	mov	r3, r0
 8000384:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (result != HAL_OK) {
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SerialWrite+0x2c>
		Error_Handler();
 800038c:	f000 fbe2 	bl	8000b54 <Error_Handler>
	}
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000c4 	.word	0x200000c4

0800039c <ec200u_reset>:
void ec200u_reset(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	SerialWrite("Reseting the Ec200u module\n");
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <ec200u_reset+0x30>)
 80003a2:	f7ff ffdf 	bl	8000364 <SerialWrite>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <ec200u_reset+0x34>)
 80003ac:	f001 fc38 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80003b0:	20c8      	movs	r0, #200	; 0xc8
 80003b2:	f000 fddf 	bl	8000f74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <ec200u_reset+0x34>)
 80003bc:	f001 fc30 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80003c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80003c4:	f000 fdd6 	bl	8000f74 <HAL_Delay>

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	08004714 	.word	0x08004714
 80003d0:	40010800 	.word	0x40010800

080003d4 <Send_and_read_AT_Command_>:
HAL_StatusTypeDef Send_and_read_AT_Command_(const char *cmd,const char *expected_response, uint8_t max_retries, uint32_t timeout_ms) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09c      	sub	sp, #112	; 0x70
 80003d8:	af02      	add	r7, sp, #8
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71fb      	strb	r3, [r7, #7]
	i++;
 80003e4:	4b4f      	ldr	r3, [pc, #316]	; (8000524 <Send_and_read_AT_Command_+0x150>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a4e      	ldr	r2, [pc, #312]	; (8000524 <Send_and_read_AT_Command_+0x150>)
 80003ec:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status;
	char at_cmd[80];
	uint16_t RxLen;
	for (attempt = 1; attempt <= max_retries; attempt++) {
 80003ee:	4b4e      	ldr	r3, [pc, #312]	; (8000528 <Send_and_read_AT_Command_+0x154>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	e075      	b.n	80004e2 <Send_and_read_AT_Command_+0x10e>
		memset(ota_rx_buf, 0, raw_rx_buf_size);
 80003f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003fa:	2100      	movs	r1, #0
 80003fc:	484b      	ldr	r0, [pc, #300]	; (800052c <Send_and_read_AT_Command_+0x158>)
 80003fe:	f003 f847 	bl	8003490 <memset>
		sprintf(at_cmd, "%s\r\n", cmd);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	4949      	ldr	r1, [pc, #292]	; (8000530 <Send_and_read_AT_Command_+0x15c>)
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fff4 	bl	80033f8 <siprintf>
		status = HAL_UART_Transmit(&huart1, (uint8_t*) at_cmd, strlen(at_cmd),
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff fe99 	bl	800014c <strlen>
 800041a:	4603      	mov	r3, r0
 800041c:	b29a      	uxth	r2, r3
 800041e:	f107 0114 	add.w	r1, r7, #20
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	4843      	ldr	r0, [pc, #268]	; (8000534 <Send_and_read_AT_Command_+0x160>)
 8000426:	f002 f93f 	bl	80026a8 <HAL_UART_Transmit>
 800042a:	4603      	mov	r3, r0
 800042c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				timeout_ms);
		if (status != HAL_OK)
 8000430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <Send_and_read_AT_Command_+0x6a>
			return status;
 8000438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800043c:	e06e      	b.n	800051c <Send_and_read_AT_Command_+0x148>
		// Wait for Trasmit to complete
		while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET)
 800043e:	bf00      	nop
 8000440:	4b3c      	ldr	r3, [pc, #240]	; (8000534 <Send_and_read_AT_Command_+0x160>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800044a:	2b40      	cmp	r3, #64	; 0x40
 800044c:	d1f8      	bne.n	8000440 <Send_and_read_AT_Command_+0x6c>
			;
		__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800044e:	4b39      	ldr	r3, [pc, #228]	; (8000534 <Send_and_read_AT_Command_+0x160>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	685b      	ldr	r3, [r3, #4]
		RxLen = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	827b      	strh	r3, [r7, #18]
		status = HAL_UARTEx_ReceiveToIdle(&huart1, ota_rx_buf, raw_rx_buf_size - 1,
 8000458:	f107 0212 	add.w	r2, r7, #18
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	4613      	mov	r3, r2
 8000462:	f240 122b 	movw	r2, #299	; 0x12b
 8000466:	4931      	ldr	r1, [pc, #196]	; (800052c <Send_and_read_AT_Command_+0x158>)
 8000468:	4832      	ldr	r0, [pc, #200]	; (8000534 <Send_and_read_AT_Command_+0x160>)
 800046a:	f002 f9a0 	bl	80027ae <HAL_UARTEx_ReceiveToIdle>
 800046e:	4603      	mov	r3, r0
 8000470:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&RxLen, timeout_ms);
		if(strstr(cmd,"AT+QFREAD")!= NULL){
 8000474:	4930      	ldr	r1, [pc, #192]	; (8000538 <Send_and_read_AT_Command_+0x164>)
 8000476:	68f8      	ldr	r0, [r7, #12]
 8000478:	f003 f812 	bl	80034a0 <strstr>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <Send_and_read_AT_Command_+0xb4>
			return status;
 8000482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000486:	e049      	b.n	800051c <Send_and_read_AT_Command_+0x148>
		}

		if (status == HAL_OK) {
 8000488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800048c:	2b00      	cmp	r3, #0
 800048e:	d11f      	bne.n	80004d0 <Send_and_read_AT_Command_+0xfc>
			if (strstr((char*) ota_rx_buf, expected_response) != NULL) {
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	4826      	ldr	r0, [pc, #152]	; (800052c <Send_and_read_AT_Command_+0x158>)
 8000494:	f003 f804 	bl	80034a0 <strstr>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d018      	beq.n	80004d0 <Send_and_read_AT_Command_+0xfc>
//i=10;
				HAL_UART_Transmit(&huart2, (uint8_t*) at_cmd, strlen(at_cmd),timeout_ms);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fe52 	bl	800014c <strlen>
 80004a8:	4603      	mov	r3, r0
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	f107 0114 	add.w	r1, r7, #20
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	4822      	ldr	r0, [pc, #136]	; (800053c <Send_and_read_AT_Command_+0x168>)
 80004b4:	f002 f8f8 	bl	80026a8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,  ota_rx_buf, strlen(ota_rx_buf),timeout_ms);
 80004b8:	481c      	ldr	r0, [pc, #112]	; (800052c <Send_and_read_AT_Command_+0x158>)
 80004ba:	f7ff fe47 	bl	800014c <strlen>
 80004be:	4603      	mov	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	4919      	ldr	r1, [pc, #100]	; (800052c <Send_and_read_AT_Command_+0x158>)
 80004c6:	481d      	ldr	r0, [pc, #116]	; (800053c <Send_and_read_AT_Command_+0x168>)
 80004c8:	f002 f8ee 	bl	80026a8 <HAL_UART_Transmit>
				return HAL_OK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	e025      	b.n	800051c <Send_and_read_AT_Command_+0x148>
			}

		}

		HAL_Delay(100);  // Optional delay before retry
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f000 fd4f 	bl	8000f74 <HAL_Delay>
	for (attempt = 1; attempt <= max_retries; attempt++) {
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <Send_and_read_AT_Command_+0x154>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <Send_and_read_AT_Command_+0x154>)
 80004e0:	701a      	strb	r2, [r3, #0]
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <Send_and_read_AT_Command_+0x154>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	79fa      	ldrb	r2, [r7, #7]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d284      	bcs.n	80003f6 <Send_and_read_AT_Command_+0x22>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) at_cmd, strlen(at_cmd),timeout_ms);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe2b 	bl	800014c <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	f107 0114 	add.w	r1, r7, #20
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <Send_and_read_AT_Command_+0x168>)
 8000502:	f002 f8d1 	bl	80026a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,  ota_rx_buf, strlen(ota_rx_buf),timeout_ms);
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <Send_and_read_AT_Command_+0x158>)
 8000508:	f7ff fe20 	bl	800014c <strlen>
 800050c:	4603      	mov	r3, r0
 800050e:	b29a      	uxth	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	4906      	ldr	r1, [pc, #24]	; (800052c <Send_and_read_AT_Command_+0x158>)
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <Send_and_read_AT_Command_+0x168>)
 8000516:	f002 f8c7 	bl	80026a8 <HAL_UART_Transmit>
	// All retries failed
	return HAL_ERROR;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	3768      	adds	r7, #104	; 0x68
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000238 	.word	0x20000238
 8000528:	20000240 	.word	0x20000240
 800052c:	2000010c 	.word	0x2000010c
 8000530:	08004730 	.word	0x08004730
 8000534:	2000007c 	.word	0x2000007c
 8000538:	08004738 	.word	0x08004738
 800053c:	200000c4 	.word	0x200000c4

08000540 <check_status>:
//	HAL_UARTEx_ReceiveToIdle(&huart1, response, response_size - 1, &RxLen,
//			timeout_ms);
//	return status;
//
//}
void check_status(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
		if(status == HAL_ERROR){
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <check_status+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d107      	bne.n	800055c <check_status+0x1c>
				SerialWrite("AT response is wrong or something went wrong. Reset again\n");
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <check_status+0x24>)
 800054e:	f7ff ff09 	bl	8000364 <SerialWrite>
				SerialWrite("Jumping to the existing application\n");
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <check_status+0x28>)
 8000554:	f7ff ff06 	bl	8000364 <SerialWrite>

				goto_application();
 8000558:	f000 f82a 	bl	80005b0 <goto_application>
			}
	}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000000 	.word	0x20000000
 8000564:	08004744 	.word	0x08004744
 8000568:	08004780 	.word	0x08004780

0800056c <Erase_application_area>:
            return false; // Not erased
        }
    }
    return true; // Fully erased
}
void Erase_application_area() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
	//SerialWrite("Erasing existing application\n");
	HAL_FLASH_Unlock();
 8000572:	f000 ff85 	bl	8001480 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef erase;
	uint32_t PageError = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]

	// 1. Calculate number of pages to erase (round up)
	uint32_t numPages = (APP_SIZE_BYTES + FLASH_PAGE_SIZE - 1) / FLASH_PAGE_SIZE;
 800057a:	232c      	movs	r3, #44	; 0x2c
 800057c:	617b      	str	r3, [r7, #20]

	// 2. Erase application region
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
	erase.PageAddress = FLASH_APP_ADDR;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Erase_application_area+0x3c>)
 8000584:	60fb      	str	r3, [r7, #12]
	erase.NbPages = numPages;
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase, &PageError);
 800058a:	463a      	mov	r2, r7
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f85d 	bl	8001650 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000596:	f000 ff99 	bl	80014cc <HAL_FLASH_Lock>


	if(is_app_flash_erased){
		SerialWrite("Application erased successfully\n");
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <Erase_application_area+0x40>)
 800059c:	f7ff fee2 	bl	8000364 <SerialWrite>
	}
	else{
		SerialWrite("Error in Application erasing\n");
	}
}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08005000 	.word	0x08005000
 80005ac:	080047a8 	.word	0x080047a8

080005b0 <goto_application>:
void goto_application(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
    SerialWrite("Goto application started\n");
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <goto_application+0x80>)
 80005b8:	f7ff fed4 	bl	8000364 <SerialWrite>

    uint32_t appStackPointer = *(volatile uint32_t*) FLASH_APP_ADDR;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <goto_application+0x84>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]
    uint32_t appResetHandler = *(volatile uint32_t*) (FLASH_APP_ADDR + 4);
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <goto_application+0x88>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	60bb      	str	r3, [r7, #8]

    // Validate stack pointer (to avoid jumping into empty flash)
    if ((appStackPointer & 0x2FFE0000) != 0x20000000) {
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <goto_application+0x8c>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005d2:	d003      	beq.n	80005dc <goto_application+0x2c>
        SerialWrite("No valid application found. OTA required.\n");
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <goto_application+0x90>)
 80005d6:	f7ff fec5 	bl	8000364 <SerialWrite>
        return;
 80005da:	e026      	b.n	800062a <goto_application+0x7a>
    }

    HAL_UART_DeInit(&huart1);
 80005dc:	4819      	ldr	r0, [pc, #100]	; (8000644 <goto_application+0x94>)
 80005de:	f002 f831 	bl	8002644 <HAL_UART_DeInit>
    HAL_UART_DeInit(&huart2);
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <goto_application+0x98>)
 80005e4:	f002 f82e 	bl	8002644 <HAL_UART_DeInit>
    HAL_RCC_DeInit();
 80005e8:	f001 fb32 	bl	8001c50 <HAL_RCC_DeInit>
    HAL_DeInit();
 80005ec:	f000 fc58 	bl	8000ea0 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
   __disable_irq();
//
    // Disable SysTick
    SysTick->CTRL = 0;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <goto_application+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <goto_application+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <goto_application+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]

    // Optional: Reset external module
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <goto_application+0xa0>)
 800060c:	f001 fb08 	bl	8001c20 <HAL_GPIO_WritePin>

    // Set vector table base
    SCB->VTOR = FLASH_APP_ADDR;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <goto_application+0xa4>)
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <goto_application+0x84>)
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	f383 8808 	msr	MSP, r3
}
 8000620:	bf00      	nop

    // Set stack pointer and jump
    __set_MSP(appStackPointer);
    void (*resetHandler)(void) = (void (*)(void)) appResetHandler;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	607b      	str	r3, [r7, #4]
    resetHandler();
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4798      	blx	r3
}
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	080047cc 	.word	0x080047cc
 8000634:	08005000 	.word	0x08005000
 8000638:	08005004 	.word	0x08005004
 800063c:	2ffe0000 	.word	0x2ffe0000
 8000640:	080047e8 	.word	0x080047e8
 8000644:	2000007c 	.word	0x2000007c
 8000648:	200000c4 	.word	0x200000c4
 800064c:	e000e010 	.word	0xe000e010
 8000650:	40010c00 	.word	0x40010c00
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <perform_OTA>:


void perform_OTA() {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b0e2      	sub	sp, #392	; 0x188
 800065c:	af00      	add	r7, sp, #0

	uint8_t file_data[file_chunk_size];
	uint32_t bytes_written = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	uint16_t actual_data_len;
	int filehandle, filesize;
	char at[30];
	//HAL_Delay(5000);
	SerialWrite("OTA starting\n");
 8000664:	48ad      	ldr	r0, [pc, #692]	; (800091c <perform_OTA+0x2c4>)
 8000666:	f7ff fe7d 	bl	8000364 <SerialWrite>

	status = Send_and_read_AT_Command_("AT", "\r\nOK\r\n", 2, 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	49ab      	ldr	r1, [pc, #684]	; (8000920 <perform_OTA+0x2c8>)
 8000672:	48ac      	ldr	r0, [pc, #688]	; (8000924 <perform_OTA+0x2cc>)
 8000674:	f7ff feae 	bl	80003d4 <Send_and_read_AT_Command_>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4baa      	ldr	r3, [pc, #680]	; (8000928 <perform_OTA+0x2d0>)
 800067e:	701a      	strb	r2, [r3, #0]
	check_status();
 8000680:	f7ff ff5e 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f000 fc74 	bl	8000f74 <HAL_Delay>


	status = Send_and_read_AT_Command_("AT+CPIN?","\r\n+CPIN: READY\r\n\r\nOK\r\n", 5, 1000);
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	2205      	movs	r2, #5
 8000692:	49a6      	ldr	r1, [pc, #664]	; (800092c <perform_OTA+0x2d4>)
 8000694:	48a6      	ldr	r0, [pc, #664]	; (8000930 <perform_OTA+0x2d8>)
 8000696:	f7ff fe9d 	bl	80003d4 <Send_and_read_AT_Command_>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4ba2      	ldr	r3, [pc, #648]	; (8000928 <perform_OTA+0x2d0>)
 80006a0:	701a      	strb	r2, [r3, #0]
	check_status();
 80006a2:	f7ff ff4d 	bl	8000540 <check_status>
	HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f000 fc63 	bl	8000f74 <HAL_Delay>
	//SerialWrite("Deleting the file \n");
	status = Send_and_read_AT_Command_("AT+QFDEL=\"*\"", "\r\nOK\r\n", 5, 1000);
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	2205      	movs	r2, #5
 80006b4:	499a      	ldr	r1, [pc, #616]	; (8000920 <perform_OTA+0x2c8>)
 80006b6:	489f      	ldr	r0, [pc, #636]	; (8000934 <perform_OTA+0x2dc>)
 80006b8:	f7ff fe8c 	bl	80003d4 <Send_and_read_AT_Command_>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b99      	ldr	r3, [pc, #612]	; (8000928 <perform_OTA+0x2d0>)
 80006c2:	701a      	strb	r2, [r3, #0]
	check_status();
 80006c4:	f7ff ff3c 	bl	8000540 <check_status>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f000 fc52 	bl	8000f74 <HAL_Delay>

	status = Send_and_read_AT_Command_("AT+QICSGP=1,1,\"internet\",\"\",\"\",0","\r\nOK\r\n", 5, 1000);
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	2205      	movs	r2, #5
 80006d6:	4992      	ldr	r1, [pc, #584]	; (8000920 <perform_OTA+0x2c8>)
 80006d8:	4897      	ldr	r0, [pc, #604]	; (8000938 <perform_OTA+0x2e0>)
 80006da:	f7ff fe7b 	bl	80003d4 <Send_and_read_AT_Command_>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b91      	ldr	r3, [pc, #580]	; (8000928 <perform_OTA+0x2d0>)
 80006e4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2000);
 80006e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ea:	f000 fc43 	bl	8000f74 <HAL_Delay>

	status = Send_and_read_AT_Command_("AT+QIACT?", "\r\nOK\r\n", 5, 1000);
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	2205      	movs	r2, #5
 80006f4:	498a      	ldr	r1, [pc, #552]	; (8000920 <perform_OTA+0x2c8>)
 80006f6:	4891      	ldr	r0, [pc, #580]	; (800093c <perform_OTA+0x2e4>)
 80006f8:	f7ff fe6c 	bl	80003d4 <Send_and_read_AT_Command_>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b89      	ldr	r3, [pc, #548]	; (8000928 <perform_OTA+0x2d0>)
 8000702:	701a      	strb	r2, [r3, #0]
	check_status();
 8000704:	f7ff ff1c 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f000 fc32 	bl	8000f74 <HAL_Delay>

	if (strstr((char*)ota_rx_buf, "+QIACT: 1,1,1,\"") == NULL) {
 8000710:	498b      	ldr	r1, [pc, #556]	; (8000940 <perform_OTA+0x2e8>)
 8000712:	488c      	ldr	r0, [pc, #560]	; (8000944 <perform_OTA+0x2ec>)
 8000714:	f002 fec4 	bl	80034a0 <strstr>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11d      	bne.n	800075a <perform_OTA+0x102>
		status = Send_and_read_AT_Command_("AT+QIACT=1", "\r\nOK\r\n", 5, 3000);
 800071e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000722:	2205      	movs	r2, #5
 8000724:	497e      	ldr	r1, [pc, #504]	; (8000920 <perform_OTA+0x2c8>)
 8000726:	4888      	ldr	r0, [pc, #544]	; (8000948 <perform_OTA+0x2f0>)
 8000728:	f7ff fe54 	bl	80003d4 <Send_and_read_AT_Command_>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b7d      	ldr	r3, [pc, #500]	; (8000928 <perform_OTA+0x2d0>)
 8000732:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000738:	f000 fc1c 	bl	8000f74 <HAL_Delay>
		status = Send_and_read_AT_Command_("AT+QIACT?", "+QIACT: 1,1,1,\"", 5, 1000);
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	2205      	movs	r2, #5
 8000742:	497f      	ldr	r1, [pc, #508]	; (8000940 <perform_OTA+0x2e8>)
 8000744:	487d      	ldr	r0, [pc, #500]	; (800093c <perform_OTA+0x2e4>)
 8000746:	f7ff fe45 	bl	80003d4 <Send_and_read_AT_Command_>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b76      	ldr	r3, [pc, #472]	; (8000928 <perform_OTA+0x2d0>)
 8000750:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);// Valid response
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f000 fc0d 	bl	8000f74 <HAL_Delay>

	}

	status = Send_and_read_AT_Command_("AT+QHTTPCFG=\"contextid\",1","\r\nOK\r\n", 5, 1000);
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	2205      	movs	r2, #5
 8000760:	496f      	ldr	r1, [pc, #444]	; (8000920 <perform_OTA+0x2c8>)
 8000762:	487a      	ldr	r0, [pc, #488]	; (800094c <perform_OTA+0x2f4>)
 8000764:	f7ff fe36 	bl	80003d4 <Send_and_read_AT_Command_>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b6e      	ldr	r3, [pc, #440]	; (8000928 <perform_OTA+0x2d0>)
 800076e:	701a      	strb	r2, [r3, #0]
	check_status();
 8000770:	f7ff fee6 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000778:	f000 fbfc 	bl	8000f74 <HAL_Delay>


	status = Send_and_read_AT_Command_("AT+QHTTPURL=79,200", "\r\nCONNECT\r\n",5, 2000);
 800077c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000780:	2205      	movs	r2, #5
 8000782:	4973      	ldr	r1, [pc, #460]	; (8000950 <perform_OTA+0x2f8>)
 8000784:	4873      	ldr	r0, [pc, #460]	; (8000954 <perform_OTA+0x2fc>)
 8000786:	f7ff fe25 	bl	80003d4 <Send_and_read_AT_Command_>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b66      	ldr	r3, [pc, #408]	; (8000928 <perform_OTA+0x2d0>)
 8000790:	701a      	strb	r2, [r3, #0]
	check_status();
 8000792:	f7ff fed5 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f000 fbeb 	bl	8000f74 <HAL_Delay>


	status =Send_and_read_AT_Command_("https://raw.githubusercontent.com/kishan-shivhare/ota/main/f103_application.bin","\r\nOK\r\n", 5, 2000);
 800079e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007a2:	2205      	movs	r2, #5
 80007a4:	495e      	ldr	r1, [pc, #376]	; (8000920 <perform_OTA+0x2c8>)
 80007a6:	486c      	ldr	r0, [pc, #432]	; (8000958 <perform_OTA+0x300>)
 80007a8:	f7ff fe14 	bl	80003d4 <Send_and_read_AT_Command_>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b5d      	ldr	r3, [pc, #372]	; (8000928 <perform_OTA+0x2d0>)
 80007b2:	701a      	strb	r2, [r3, #0]
	check_status();
 80007b4:	f7ff fec4 	bl	8000540 <check_status>
	HAL_Delay(1000);
 80007b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007bc:	f000 fbda 	bl	8000f74 <HAL_Delay>


	status = Send_and_read_AT_Command_("AT+QHTTPGET=400", "\r\nOK\r\n", 5,1000);
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	2205      	movs	r2, #5
 80007c6:	4956      	ldr	r1, [pc, #344]	; (8000920 <perform_OTA+0x2c8>)
 80007c8:	4864      	ldr	r0, [pc, #400]	; (800095c <perform_OTA+0x304>)
 80007ca:	f7ff fe03 	bl	80003d4 <Send_and_read_AT_Command_>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b55      	ldr	r3, [pc, #340]	; (8000928 <perform_OTA+0x2d0>)
 80007d4:	701a      	strb	r2, [r3, #0]
	check_status();
 80007d6:	f7ff feb3 	bl	8000540 <check_status>
	HAL_Delay(3000);
 80007da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007de:	f000 fbc9 	bl	8000f74 <HAL_Delay>


	status = Send_and_read_AT_Command_("AT+QHTTPREADFILE=\"UFS:application.bin\",400", "\r\nOK\r\n", 5,2000);
 80007e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007e6:	2205      	movs	r2, #5
 80007e8:	494d      	ldr	r1, [pc, #308]	; (8000920 <perform_OTA+0x2c8>)
 80007ea:	485d      	ldr	r0, [pc, #372]	; (8000960 <perform_OTA+0x308>)
 80007ec:	f7ff fdf2 	bl	80003d4 <Send_and_read_AT_Command_>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <perform_OTA+0x2d0>)
 80007f6:	701a      	strb	r2, [r3, #0]
	check_status();
 80007f8:	f7ff fea2 	bl	8000540 <check_status>
	HAL_Delay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000800:	f000 fbb8 	bl	8000f74 <HAL_Delay>

	SerialWrite("Check if any file not closed previously, closing the opened file \n");
 8000804:	4857      	ldr	r0, [pc, #348]	; (8000964 <perform_OTA+0x30c>)
 8000806:	f7ff fdad 	bl	8000364 <SerialWrite>
	status = Send_and_read_AT_Command_("AT+QFCLOSE=1027", "\r\nOK\r\n", 1,2000);
 800080a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800080e:	2201      	movs	r2, #1
 8000810:	4943      	ldr	r1, [pc, #268]	; (8000920 <perform_OTA+0x2c8>)
 8000812:	4855      	ldr	r0, [pc, #340]	; (8000968 <perform_OTA+0x310>)
 8000814:	f7ff fdde 	bl	80003d4 <Send_and_read_AT_Command_>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <perform_OTA+0x2d0>)
 800081e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000824:	f000 fba6 	bl	8000f74 <HAL_Delay>

	status = Send_and_read_AT_Command_("AT+QFLST=\"UFS:application.bin\"","\r\n+QFLST: \"UFS:application.bin\",", 1, 1000);
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	2201      	movs	r2, #1
 800082e:	494f      	ldr	r1, [pc, #316]	; (800096c <perform_OTA+0x314>)
 8000830:	484f      	ldr	r0, [pc, #316]	; (8000970 <perform_OTA+0x318>)
 8000832:	f7ff fdcf 	bl	80003d4 <Send_and_read_AT_Command_>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <perform_OTA+0x2d0>)
 800083c:	701a      	strb	r2, [r3, #0]
	check_status();
 800083e:	f7ff fe7f 	bl	8000540 <check_status>
	HAL_Delay(2000);
 8000842:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000846:	f000 fb95 	bl	8000f74 <HAL_Delay>

	sscanf((char*) ota_rx_buf, "\r\n+QFLST: \"UFS:application.bin\",%d",&filesize);
 800084a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800084e:	461a      	mov	r2, r3
 8000850:	4948      	ldr	r1, [pc, #288]	; (8000974 <perform_OTA+0x31c>)
 8000852:	483c      	ldr	r0, [pc, #240]	; (8000944 <perform_OTA+0x2ec>)
 8000854:	f002 fdf0 	bl	8003438 <siscanf>

	status = Send_and_read_AT_Command_("AT+QFOPEN=\"UFS:application.bin\",0","\r\n+QFOPEN: ", 1, 2000);
 8000858:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800085c:	2201      	movs	r2, #1
 800085e:	4946      	ldr	r1, [pc, #280]	; (8000978 <perform_OTA+0x320>)
 8000860:	4846      	ldr	r0, [pc, #280]	; (800097c <perform_OTA+0x324>)
 8000862:	f7ff fdb7 	bl	80003d4 <Send_and_read_AT_Command_>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <perform_OTA+0x2d0>)
 800086c:	701a      	strb	r2, [r3, #0]
	check_status();
 800086e:	f7ff fe67 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000876:	f000 fb7d 	bl	8000f74 <HAL_Delay>


	sscanf((char*) ota_rx_buf, "\r\n+QFOPEN: %d", &filehandle);
 800087a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800087e:	461a      	mov	r2, r3
 8000880:	493f      	ldr	r1, [pc, #252]	; (8000980 <perform_OTA+0x328>)
 8000882:	4830      	ldr	r0, [pc, #192]	; (8000944 <perform_OTA+0x2ec>)
 8000884:	f002 fdd8 	bl	8003438 <siscanf>
	if(filesize && filehandle){
 8000888:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800088c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d025      	beq.n	80008e2 <perform_OTA+0x28a>
 8000896:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800089a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d01e      	beq.n	80008e2 <perform_OTA+0x28a>
		char cmd[64];
		sprintf(cmd, "Downloaded filesize:%d,%d\n",filesize, filehandle);
 80008a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1d38      	adds	r0, r7, #4
 80008ba:	4932      	ldr	r1, [pc, #200]	; (8000984 <perform_OTA+0x32c>)
 80008bc:	f002 fd9c 	bl	80033f8 <siprintf>
		SerialWrite(cmd);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fd4e 	bl	8000364 <SerialWrite>
		Erase_application_area();
 80008c8:	f7ff fe50 	bl	800056c <Erase_application_area>
	if(filesize && filehandle){
 80008cc:	bf00      	nop
		status = Send_and_read_AT_Command_(at, "\r\nOK\r\n", 1, 2000);
		goto_application();
		return;
	}
	//SerialWrite("Writing downloaded file to the application area\n");
	HAL_Delay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f000 fb4f 	bl	8000f74 <HAL_Delay>
	HAL_FLASH_Unlock();
 80008d6:	f000 fdd3 	bl	8001480 <HAL_FLASH_Unlock>
	for (uint32_t i = 0; i < filesize; i += file_chunk_size) {
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80008e0:	e0e2      	b.n	8000aa8 <perform_OTA+0x450>
		SerialWrite("file not found for OTA, closing the opened file and jumping to the existing application\n");
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <perform_OTA+0x330>)
 80008e4:	f7ff fd3e 	bl	8000364 <SerialWrite>
		sprintf(at, "AT+QFCLOSE=%d", filehandle);
 80008e8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f6:	4925      	ldr	r1, [pc, #148]	; (800098c <perform_OTA+0x334>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fd7d 	bl	80033f8 <siprintf>
		status = Send_and_read_AT_Command_(at, "\r\nOK\r\n", 1, 2000);
 80008fe:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000902:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000906:	2201      	movs	r2, #1
 8000908:	4905      	ldr	r1, [pc, #20]	; (8000920 <perform_OTA+0x2c8>)
 800090a:	f7ff fd63 	bl	80003d4 <Send_and_read_AT_Command_>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <perform_OTA+0x2d0>)
 8000914:	701a      	strb	r2, [r3, #0]
		goto_application();
 8000916:	f7ff fe4b 	bl	80005b0 <goto_application>
		return;
 800091a:	e100      	b.n	8000b1e <perform_OTA+0x4c6>
 800091c:	08004814 	.word	0x08004814
 8000920:	08004824 	.word	0x08004824
 8000924:	0800482c 	.word	0x0800482c
 8000928:	20000000 	.word	0x20000000
 800092c:	08004830 	.word	0x08004830
 8000930:	08004848 	.word	0x08004848
 8000934:	08004854 	.word	0x08004854
 8000938:	08004864 	.word	0x08004864
 800093c:	08004888 	.word	0x08004888
 8000940:	08004894 	.word	0x08004894
 8000944:	2000010c 	.word	0x2000010c
 8000948:	080048a4 	.word	0x080048a4
 800094c:	080048b0 	.word	0x080048b0
 8000950:	080048cc 	.word	0x080048cc
 8000954:	080048d8 	.word	0x080048d8
 8000958:	080048ec 	.word	0x080048ec
 800095c:	0800493c 	.word	0x0800493c
 8000960:	0800494c 	.word	0x0800494c
 8000964:	08004978 	.word	0x08004978
 8000968:	080049bc 	.word	0x080049bc
 800096c:	080049cc 	.word	0x080049cc
 8000970:	080049f0 	.word	0x080049f0
 8000974:	08004a10 	.word	0x08004a10
 8000978:	08004a34 	.word	0x08004a34
 800097c:	08004a40 	.word	0x08004a40
 8000980:	08004a64 	.word	0x08004a64
 8000984:	08004a74 	.word	0x08004a74
 8000988:	08004a90 	.word	0x08004a90
 800098c:	08004aec 	.word	0x08004aec
		j++;
 8000990:	4b65      	ldr	r3, [pc, #404]	; (8000b28 <perform_OTA+0x4d0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a64      	ldr	r2, [pc, #400]	; (8000b28 <perform_OTA+0x4d0>)
 8000998:	6013      	str	r3, [r2, #0]
		char cmd[64];
		sprintf(cmd, "AT+QFREAD=%d,%d", filehandle, file_chunk_size);
 800099a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800099e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	1d38      	adds	r0, r7, #4
 80009a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009aa:	4960      	ldr	r1, [pc, #384]	; (8000b2c <perform_OTA+0x4d4>)
 80009ac:	f002 fd24 	bl	80033f8 <siprintf>

		//Send_AT_command(cmd, ota_rx_buf, raw_rx_buf_size, 2000);
		status = Send_and_read_AT_Command_(cmd,"\r\nCONNECT ", 1, 1000);
 80009b0:	1d38      	adds	r0, r7, #4
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	2201      	movs	r2, #1
 80009b8:	495d      	ldr	r1, [pc, #372]	; (8000b30 <perform_OTA+0x4d8>)
 80009ba:	f7ff fd0b 	bl	80003d4 <Send_and_read_AT_Command_>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <perform_OTA+0x4dc>)
 80009c4:	701a      	strb	r2, [r3, #0]
		check_status();
 80009c6:	f7ff fdbb 	bl	8000540 <check_status>
		// Search for "CONNECT"
		char *connect_ptr = strstr((char*) ota_rx_buf, "CONNECT");
 80009ca:	495b      	ldr	r1, [pc, #364]	; (8000b38 <perform_OTA+0x4e0>)
 80009cc:	485b      	ldr	r0, [pc, #364]	; (8000b3c <perform_OTA+0x4e4>)
 80009ce:	f002 fd67 	bl	80034a0 <strstr>
 80009d2:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
		if (!connect_ptr)
 80009d6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 809c 	beq.w	8000b18 <perform_OTA+0x4c0>
			return HAL_ERROR;

		// Find actual data start (after \r\n following CONNECT)
		char *data_start = strstr(connect_ptr, "\r\n");
 80009e0:	4957      	ldr	r1, [pc, #348]	; (8000b40 <perform_OTA+0x4e8>)
 80009e2:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80009e6:	f002 fd5b 	bl	80034a0 <strstr>
 80009ea:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
		if (!data_start)
 80009ee:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 8092 	beq.w	8000b1c <perform_OTA+0x4c4>
			return HAL_ERROR;
		data_start += 2; // Skip \r\n
 80009f8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80009fc:	3302      	adds	r3, #2
 80009fe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

		sscanf((char*) ota_rx_buf, "\r\nCONNECT %d\r\n", &actual_data_len);
 8000a02:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8000a06:	461a      	mov	r2, r3
 8000a08:	494e      	ldr	r1, [pc, #312]	; (8000b44 <perform_OTA+0x4ec>)
 8000a0a:	484c      	ldr	r0, [pc, #304]	; (8000b3c <perform_OTA+0x4e4>)
 8000a0c:	f002 fd14 	bl	8003438 <siscanf>

		memcpy(file_data, data_start, actual_data_len);
 8000a10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a14:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a20:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fd7d 	bl	8003524 <memcpy>

		for (uint32_t k = 0; k < actual_data_len; k += 4) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000a30:	e01f      	b.n	8000a72 <perform_OTA+0x41a>
			uint32_t word = *(uint32_t*) (file_data + k);
 8000a32:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000a36:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000a3a:	4413      	add	r3, r2
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_APP_ADDR + i + k,word);
 8000a42:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000a46:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000a4a:	4413      	add	r3, r2
 8000a4c:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000a50:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
 8000a54:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000a58:	2200      	movs	r2, #0
 8000a5a:	461c      	mov	r4, r3
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	4622      	mov	r2, r4
 8000a60:	462b      	mov	r3, r5
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 fc9c 	bl	80013a0 <HAL_FLASH_Program>
		for (uint32_t k = 0; k < actual_data_len; k += 4) {
 8000a68:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000a72:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a76:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d3d5      	bcc.n	8000a32 <perform_OTA+0x3da>
		}
		bytes_written += actual_data_len;
 8000a86:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a8a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000a96:	4413      	add	r3, r2
 8000a98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	for (uint32_t i = 0; i < filesize; i += file_chunk_size) {
 8000a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000aa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000aa4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000aa8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000aac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	f4ff af69 	bcc.w	8000990 <perform_OTA+0x338>

	}
	//SerialWrite("file write successfully \n");
	//SerialWrite("Closing the file \n");
	sprintf(at, "AT+QFCLOSE=%d", filehandle);
 8000abe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000ac2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000acc:	491e      	ldr	r1, [pc, #120]	; (8000b48 <perform_OTA+0x4f0>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fc92 	bl	80033f8 <siprintf>
	status = Send_and_read_AT_Command_(at, "\r\nOK\r\n", 1, 2000);
 8000ad4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000ad8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000adc:	2201      	movs	r2, #1
 8000ade:	491b      	ldr	r1, [pc, #108]	; (8000b4c <perform_OTA+0x4f4>)
 8000ae0:	f7ff fc78 	bl	80003d4 <Send_and_read_AT_Command_>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <perform_OTA+0x4dc>)
 8000aea:	701a      	strb	r2, [r3, #0]
	check_status();
 8000aec:	f7ff fd28 	bl	8000540 <check_status>
	HAL_Delay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f000 fa3e 	bl	8000f74 <HAL_Delay>

	//SerialWrite("Checking whole file is written successfully \n");
	if (bytes_written == filesize) {
 8000af8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000afc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d108      	bne.n	8000b1e <perform_OTA+0x4c6>
		SerialWrite("OTA done\n");
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <perform_OTA+0x4f8>)
 8000b0e:	f7ff fc29 	bl	8000364 <SerialWrite>
		goto_application();
 8000b12:	f7ff fd4d 	bl	80005b0 <goto_application>
 8000b16:	e002      	b.n	8000b1e <perform_OTA+0x4c6>
			return HAL_ERROR;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <perform_OTA+0x4c6>
			return HAL_ERROR;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bdb0      	pop	{r4, r5, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000023c 	.word	0x2000023c
 8000b2c:	08004afc 	.word	0x08004afc
 8000b30:	08004b0c 	.word	0x08004b0c
 8000b34:	20000000 	.word	0x20000000
 8000b38:	08004b18 	.word	0x08004b18
 8000b3c:	2000010c 	.word	0x2000010c
 8000b40:	08004b20 	.word	0x08004b20
 8000b44:	08004b24 	.word	0x08004b24
 8000b48:	08004aec 	.word	0x08004aec
 8000b4c:	08004824 	.word	0x08004824
 8000b50:	08004b34 	.word	0x08004b34

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_MspInit+0x40>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <HAL_UART_MspInit+0x118>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13a      	bne.n	8000c3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a3d      	ldr	r2, [pc, #244]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4619      	mov	r1, r3
 8000c08:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c0a:	f000 fdc9 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c24:	f000 fdbc 	bl	80017a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2025      	movs	r0, #37	; 0x25
 8000c2e:	f000 fac0 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c32:	2025      	movs	r0, #37	; 0x25
 8000c34:	f000 fad9 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c38:	e03c      	b.n	8000cb4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_UART_MspInit+0x124>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d137      	bne.n	8000cb4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0x11c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c74:	2304      	movs	r3, #4
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4619      	mov	r1, r3
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000c88:	f000 fd8a 	bl	80017a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HAL_UART_MspInit+0x120>)
 8000ca0:	f000 fd7e 	bl	80017a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f000 fa82 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f000 fa9b 	bl	80011ea <HAL_NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40004400 	.word	0x40004400

08000ccc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_UART_MspDeInit+0x5c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10e      	bne.n	8000cfc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_UART_MspDeInit+0x60>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <HAL_UART_MspDeInit+0x60>)
 8000ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ce8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000cea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <HAL_UART_MspDeInit+0x64>)
 8000cf0:	f000 feda 	bl	8001aa8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000cf4:	2025      	movs	r0, #37	; 0x25
 8000cf6:	f000 fa86 	bl	8001206 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000cfa:	e011      	b.n	8000d20 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <HAL_UART_MspDeInit+0x68>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10c      	bne.n	8000d20 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_UART_MspDeInit+0x60>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_UART_MspDeInit+0x60>)
 8000d0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d10:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000d12:	210c      	movs	r1, #12
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_UART_MspDeInit+0x64>)
 8000d16:	f000 fec7 	bl	8001aa8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000d1a:	2026      	movs	r0, #38	; 0x26
 8000d1c:	f000 fa73 	bl	8001206 <HAL_NVIC_DisableIRQ>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40004400 	.word	0x40004400

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f8dd 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART1_IRQHandler+0x10>)
 8000d8e:	f001 fde3 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000007c 	.word	0x2000007c

08000d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <USART2_IRQHandler+0x10>)
 8000da2:	f001 fdd9 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000c4 	.word	0x200000c4

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 fb74 	bl	80034cc <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20005000 	.word	0x20005000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000244 	.word	0x20000244
 8000e18:	200003b8 	.word	0x200003b8

08000e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff8 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	; (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fb41 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff f981 	bl	800015c <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e64:	08004cd0 	.word	0x08004cd0
  ldr r2, =_sbss
 8000e68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e6c:	200003b8 	.word	0x200003b8

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f989 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f826 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fe66 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_DeInit+0x2c>)
 8000ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eaa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_DeInit+0x2c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_DeInit+0x2c>)
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_DeInit+0x2c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ec0:	f000 f806 	bl	8000ed0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f991 	bl	8001222 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f94b 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000004 	.word	0x20000004
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000248 	.word	0x20000248

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000248 	.word	0x20000248

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000000c 	.word	0x2000000c

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db12      	blt.n	8001090 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <__NVIC_DisableIRQ+0x44>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	3320      	adds	r3, #32
 8001080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800108a:	f3bf 8f6f 	isb	sy
}
 800108e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff90 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff09 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff1e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff11 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff1f 	bl	8001058 <__NVIC_DisableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff94 	bl	8001158 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d008      	beq.n	8001264 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2204      	movs	r2, #4
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e020      	b.n	80012a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020e 	bic.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d005      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2204      	movs	r2, #4
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e051      	b.n	8001378 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 020e 	bic.w	r2, r2, #14
 80012e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_DMA_Abort_IT+0xd4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d029      	beq.n	8001352 <HAL_DMA_Abort_IT+0xa2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_DMA_Abort_IT+0xd8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d022      	beq.n	800134e <HAL_DMA_Abort_IT+0x9e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_DMA_Abort_IT+0xdc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01a      	beq.n	8001348 <HAL_DMA_Abort_IT+0x98>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_DMA_Abort_IT+0xe0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d012      	beq.n	8001342 <HAL_DMA_Abort_IT+0x92>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <HAL_DMA_Abort_IT+0xe4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00a      	beq.n	800133c <HAL_DMA_Abort_IT+0x8c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_DMA_Abort_IT+0xe8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d102      	bne.n	8001336 <HAL_DMA_Abort_IT+0x86>
 8001330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001334:	e00e      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 8001336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800133a:	e00b      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	e008      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	e005      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 8001348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134c:	e002      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 800134e:	2310      	movs	r3, #16
 8001350:	e000      	b.n	8001354 <HAL_DMA_Abort_IT+0xa4>
 8001352:	2301      	movs	r3, #1
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_DMA_Abort_IT+0xec>)
 8001356:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
    } 
  }
  return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020008 	.word	0x40020008
 8001388:	4002001c 	.word	0x4002001c
 800138c:	40020030 	.word	0x40020030
 8001390:	40020044 	.word	0x40020044
 8001394:	40020058 	.word	0x40020058
 8001398:	4002006c 	.word	0x4002006c
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_FLASH_Program+0xd8>)
 80013bc:	7e1b      	ldrb	r3, [r3, #24]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_FLASH_Program+0x26>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e054      	b.n	8001470 <HAL_FLASH_Program+0xd0>
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_FLASH_Program+0xd8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013d0:	f000 f8a8 	bl	8001524 <FLASH_WaitForLastOperation>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d144      	bne.n	8001468 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80013e4:	2301      	movs	r3, #1
 80013e6:	757b      	strb	r3, [r7, #21]
 80013e8:	e007      	b.n	80013fa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d102      	bne.n	80013f6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80013f0:	2302      	movs	r3, #2
 80013f2:	757b      	strb	r3, [r7, #21]
 80013f4:	e001      	b.n	80013fa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80013f6:	2304      	movs	r3, #4
 80013f8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	75bb      	strb	r3, [r7, #22]
 80013fe:	e02d      	b.n	800145c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	005a      	lsls	r2, r3, #1
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	eb02 0c03 	add.w	ip, r2, r3
 800140a:	7dbb      	ldrb	r3, [r7, #22]
 800140c:	0119      	lsls	r1, r3, #4
 800140e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001412:	f1c1 0620 	rsb	r6, r1, #32
 8001416:	f1a1 0020 	sub.w	r0, r1, #32
 800141a:	fa22 f401 	lsr.w	r4, r2, r1
 800141e:	fa03 f606 	lsl.w	r6, r3, r6
 8001422:	4334      	orrs	r4, r6
 8001424:	fa23 f000 	lsr.w	r0, r3, r0
 8001428:	4304      	orrs	r4, r0
 800142a:	fa23 f501 	lsr.w	r5, r3, r1
 800142e:	b2a3      	uxth	r3, r4
 8001430:	4619      	mov	r1, r3
 8001432:	4660      	mov	r0, ip
 8001434:	f000 f85a 	bl	80014ec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800143c:	f000 f872 	bl	8001524 <FLASH_WaitForLastOperation>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_FLASH_Program+0xdc>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_FLASH_Program+0xdc>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001456:	7dbb      	ldrb	r3, [r7, #22]
 8001458:	3301      	adds	r3, #1
 800145a:	75bb      	strb	r3, [r7, #22]
 800145c:	7dba      	ldrb	r2, [r7, #22]
 800145e:	7d7b      	ldrb	r3, [r7, #21]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3cd      	bcc.n	8001400 <HAL_FLASH_Program+0x60>
 8001464:	e000      	b.n	8001468 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001466:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_FLASH_Program+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	761a      	strb	r2, [r3, #24]

  return status;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001470:	4618      	mov	r0, r3
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	20000250 	.word	0x20000250
 800147c:	40022000 	.word	0x40022000

08001480 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_FLASH_Unlock+0x40>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00d      	beq.n	80014b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_FLASH_Unlock+0x40>)
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_FLASH_Unlock+0x44>)
 800149a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_FLASH_Unlock+0x40>)
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_FLASH_Unlock+0x48>)
 80014a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_FLASH_Unlock+0x40>)
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000
 80014c4:	45670123 	.word	0x45670123
 80014c8:	cdef89ab 	.word	0xcdef89ab

080014cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_FLASH_Lock+0x1c>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_FLASH_Lock+0x1c>)
 80014d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <FLASH_Program_HalfWord+0x30>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <FLASH_Program_HalfWord+0x34>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <FLASH_Program_HalfWord+0x34>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	801a      	strh	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000250 	.word	0x20000250
 8001520:	40022000 	.word	0x40022000

08001524 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fd18 	bl	8000f60 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001532:	e010      	b.n	8001556 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d00c      	beq.n	8001556 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <FLASH_WaitForLastOperation+0x2e>
 8001542:	f7ff fd0d 	bl	8000f60 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d201      	bcs.n	8001556 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e025      	b.n	80015a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e8      	bne.n	8001534 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 8001570:	2220      	movs	r2, #32
 8001572:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <FLASH_WaitForLastOperation+0x88>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001598:	f000 f80a 	bl	80015b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000

080015b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <FLASH_SetErrorCode+0x98>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <FLASH_SetErrorCode+0x9c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <FLASH_SetErrorCode+0x9c>)
 80015d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <FLASH_SetErrorCode+0x98>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <FLASH_SetErrorCode+0x9c>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <FLASH_SetErrorCode+0x9c>)
 80015f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <FLASH_SetErrorCode+0x98>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <FLASH_SetErrorCode+0x9c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <FLASH_SetErrorCode+0x9c>)
 8001610:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <FLASH_SetErrorCode+0x98>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <FLASH_SetErrorCode+0x98>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f240 1201 	movw	r2, #257	; 0x101
 8001624:	4293      	cmp	r3, r2
 8001626:	d106      	bne.n	8001636 <FLASH_SetErrorCode+0x86>
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <FLASH_SetErrorCode+0x98>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <FLASH_SetErrorCode+0x98>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	61d3      	str	r3, [r2, #28]
}  
 8001634:	e002      	b.n	800163c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <FLASH_SetErrorCode+0x98>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60d3      	str	r3, [r2, #12]
}  
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000
 800164c:	20000250 	.word	0x20000250

08001650 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_FLASHEx_Erase+0xd0>)
 8001664:	7e1b      	ldrb	r3, [r3, #24]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_FLASHEx_Erase+0x1e>
 800166a:	2302      	movs	r3, #2
 800166c:	e053      	b.n	8001716 <HAL_FLASHEx_Erase+0xc6>
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_FLASHEx_Erase+0xd0>)
 8001670:	2201      	movs	r2, #1
 8001672:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d116      	bne.n	80016aa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800167c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001680:	f7ff ff50 	bl	8001524 <FLASH_WaitForLastOperation>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d141      	bne.n	800170e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800168a:	2001      	movs	r0, #1
 800168c:	f000 f84c 	bl	8001728 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001690:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001694:	f7ff ff46 	bl	8001524 <FLASH_WaitForLastOperation>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_FLASHEx_Erase+0xd4>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_FLASHEx_Erase+0xd4>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6113      	str	r3, [r2, #16]
 80016a8:	e031      	b.n	800170e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80016aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ae:	f7ff ff39 	bl	8001524 <FLASH_WaitForLastOperation>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12a      	bne.n	800170e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f04f 32ff 	mov.w	r2, #4294967295
 80016be:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	e019      	b.n	80016fc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f000 f849 	bl	8001760 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d2:	f7ff ff27 	bl	8001524 <FLASH_WaitForLastOperation>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_FLASHEx_Erase+0xd4>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_FLASHEx_Erase+0xd4>)
 80016e0:	f023 0302 	bic.w	r3, r3, #2
 80016e4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	601a      	str	r2, [r3, #0]
            break;
 80016f2:	e00c      	b.n	800170e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016fa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	029a      	lsls	r2, r3, #10
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4413      	add	r3, r2
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3dc      	bcc.n	80016c8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_FLASHEx_Erase+0xd0>)
 8001710:	2200      	movs	r2, #0
 8001712:	761a      	strb	r2, [r3, #24]

  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000250 	.word	0x20000250
 8001724:	40022000 	.word	0x40022000

08001728 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <FLASH_MassErase+0x30>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <FLASH_MassErase+0x34>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <FLASH_MassErase+0x34>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <FLASH_MassErase+0x34>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <FLASH_MassErase+0x34>)
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000250 	.word	0x20000250
 800175c:	40022000 	.word	0x40022000

08001760 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <FLASH_PageErase+0x38>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <FLASH_PageErase+0x3c>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <FLASH_PageErase+0x3c>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <FLASH_PageErase+0x3c>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <FLASH_PageErase+0x3c>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <FLASH_PageErase+0x3c>)
 8001786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000250 	.word	0x20000250
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e169      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8158 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4a98      	ldr	r2, [pc, #608]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a96      	ldr	r2, [pc, #600]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a94      	ldr	r2, [pc, #592]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a90      	ldr	r2, [pc, #576]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a79      	ldr	r2, [pc, #484]	; (8001a54 <HAL_GPIO_Init+0x2b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_GPIO_Init+0x2c0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3f      	ldr	r2, [pc, #252]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e0>
 800197c:	2303      	movs	r3, #3
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001980:	2304      	movs	r3, #4
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4928      	ldr	r1, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	491e      	ldr	r1, [pc, #120]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4914      	ldr	r1, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e021      	b.n	8001a82 <HAL_GPIO_Init+0x2e2>
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae8e 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	372c      	adds	r7, #44	; 0x2c
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001ab6:	e09a      	b.n	8001bee <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 808d 	beq.w	8001be8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001ace:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_DeInit+0x160>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_GPIO_DeInit+0x164>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_GPIO_DeInit+0x78>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_GPIO_DeInit+0x168>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_DeInit+0x74>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_GPIO_DeInit+0x16c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_DeInit+0x70>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <HAL_GPIO_DeInit+0x170>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_DeInit+0x6c>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_DeInit+0x7a>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_DeInit+0x7a>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_DeInit+0x7a>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_DeInit+0x7a>
 8001b20:	2300      	movs	r3, #0
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d132      	bne.n	8001b98 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4931      	ldr	r1, [pc, #196]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	492d      	ldr	r1, [pc, #180]	; (8001c1c <HAL_GPIO_DeInit+0x174>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_GPIO_DeInit+0x160>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	481f      	ldr	r0, [pc, #124]	; (8001c08 <HAL_GPIO_DeInit+0x160>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	400a      	ands	r2, r1
 8001b92:	3302      	adds	r3, #2
 8001b94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d801      	bhi.n	8001ba2 <HAL_GPIO_DeInit+0xfa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	e001      	b.n	8001ba6 <HAL_GPIO_DeInit+0xfe>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d802      	bhi.n	8001bb4 <HAL_GPIO_DeInit+0x10c>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_DeInit+0x112>
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3b08      	subs	r3, #8
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	2104      	movs	r1, #4
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f47f af5e 	bne.w	8001ab8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40011400 	.word	0x40011400
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001c56:	f7ff f983 	bl	8000f60 <HAL_GetTick>
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a44      	ldr	r2, [pc, #272]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f979 	bl	8000f60 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e077      	b.n	8001d6c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001c88:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c90:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff f962 	bl	8000f60 <HAL_GetTick>
 8001c9c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca6:	f7ff f95b 	bl	8000f60 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e057      	b.n	8001d6c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_DeInit+0x128>)
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <HAL_RCC_DeInit+0x12c>)
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_DeInit+0x130>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f902 	bl	8000edc <HAL_InitTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e044      	b.n	8001d6c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ce2:	f7ff f93d 	bl	8000f60 <HAL_GetTick>
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff f933 	bl	8000f60 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e031      	b.n	8001d6c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d1a:	f7ff f921 	bl	8000f60 <HAL_GetTick>
 8001d1e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d26:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d2a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f917 	bl	8000f60 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e015      	b.n	8001d6c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_DeInit+0x124>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	007a1200 	.word	0x007a1200
 8001d80:	20000008 	.word	0x20000008

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e272      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8087 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da4:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d00c      	beq.n	8001dca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db0:	4b8f      	ldr	r3, [pc, #572]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d112      	bne.n	8001de2 <HAL_RCC_OscConfig+0x5e>
 8001dbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d10b      	bne.n	8001de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d06c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x12c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d168      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e24c      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x76>
 8001dec:	4b80      	ldr	r3, [pc, #512]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a7f      	ldr	r2, [pc, #508]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e02e      	b.n	8001e58 <HAL_RCC_OscConfig+0xd4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b78      	ldr	r3, [pc, #480]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a77      	ldr	r2, [pc, #476]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e01d      	b.n	8001e58 <HAL_RCC_OscConfig+0xd4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0xbc>
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a71      	ldr	r2, [pc, #452]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a6e      	ldr	r2, [pc, #440]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xd4>
 8001e40:	4b6b      	ldr	r3, [pc, #428]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a6a      	ldr	r2, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a67      	ldr	r2, [pc, #412]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff f87e 	bl	8000f60 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f87a 	bl	8000f60 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e200      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xe4>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff f86a 	bl	8000f60 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff f866 	bl	8000f60 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1ec      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x10c>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d063      	beq.n	8001f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d11c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x18c>
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x176>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e1c0      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4939      	ldr	r1, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	e03a      	b.n	8001f86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f18:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f81f 	bl	8000f60 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff f81b 	bl	8000f60 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1a1      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4927      	ldr	r1, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fffe 	bl	8000f60 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f68:	f7fe fffa 	bl	8000f60 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e180      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03a      	beq.n	8002008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d019      	beq.n	8001fce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe ffde 	bl	8000f60 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe ffda 	bl	8000f60 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e160      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f000 face 	bl	8002568 <RCC_Delay>
 8001fcc:	e01c      	b.n	8002008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe ffc4 	bl	8000f60 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fda:	e00f      	b.n	8001ffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe ffc0 	bl	8000f60 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d908      	bls.n	8001ffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e146      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	42420000 	.word	0x42420000
 8001ff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e9      	bne.n	8001fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a6 	beq.w	8002162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10d      	bne.n	8002042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a87      	ldr	r2, [pc, #540]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_OscConfig+0x4c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b7f      	ldr	r3, [pc, #508]	; (800224c <HAL_RCC_OscConfig+0x4c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7e      	ldr	r2, [pc, #504]	; (800224c <HAL_RCC_OscConfig+0x4c8>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7fe ff81 	bl	8000f60 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe ff7d 	bl	8000f60 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e103      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x4c8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x312>
 8002088:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	e02d      	b.n	80020f2 <HAL_RCC_OscConfig+0x36e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x334>
 800209e:	4b6a      	ldr	r3, [pc, #424]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a69      	ldr	r2, [pc, #420]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b67      	ldr	r3, [pc, #412]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a66      	ldr	r2, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	e01c      	b.n	80020f2 <HAL_RCC_OscConfig+0x36e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x356>
 80020c0:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a60      	ldr	r2, [pc, #384]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x36e>
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d015      	beq.n	8002126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe ff31 	bl	8000f60 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff2d 	bl	8000f60 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0b1      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ee      	beq.n	8002102 <HAL_RCC_OscConfig+0x37e>
 8002124:	e014      	b.n	8002150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe ff1b 	bl	8000f60 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe ff17 	bl	8000f60 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e09b      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ee      	bne.n	800212e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d061      	beq.n	800223c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d146      	bne.n	800220e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe feeb 	bl	8000f60 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fee7 	bl	8000f60 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e06d      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4921      	ldr	r1, [pc, #132]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a19      	ldr	r1, [r3, #32]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	430b      	orrs	r3, r1
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe febb 	bl	8000f60 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe feb7 	bl	8000f60 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x46a>
 800220c:	e035      	b.n	800227a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fea4 	bl	8000f60 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fea0 	bl	8000f60 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e026      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x498>
 800223a:	e01e      	b.n	800227a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e019      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
 8002248:	40021000 	.word	0x40021000
 800224c:	40007000 	.word	0x40007000
 8002250:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_OscConfig+0x500>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	429a      	cmp	r2, r3
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0d0      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d910      	bls.n	80022cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4965      	ldr	r1, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d040      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e073      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06b      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4936      	ldr	r1, [pc, #216]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fdf2 	bl	8000f60 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe fdee 	bl	8000f60 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e053      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d210      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4922      	ldr	r1, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f821 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1cc>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1d0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fd50 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	08004b4c 	.word	0x08004b4c
 8002454:	20000004 	.word	0x20000004
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x30>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x36>
 800248a:	e027      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	613b      	str	r3, [r7, #16]
      break;
 8002490:	e027      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0c5b      	lsrs	r3, r3, #17
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024be:	fb03 f202 	mul.w	r2, r3, r2
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e004      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	613b      	str	r3, [r7, #16]
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024de:	613b      	str	r3, [r7, #16]
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	693b      	ldr	r3, [r7, #16]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	08004b64 	.word	0x08004b64
 80024fc:	08004b74 	.word	0x08004b74
 8002500:	003d0900 	.word	0x003d0900

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <HAL_RCC_GetHCLKFreq+0x10>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800251c:	f7ff fff2 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	; (800253c <HAL_RCC_GetPCLK1Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	08004b5c 	.word	0x08004b5c

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002544:	f7ff ffde 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	0adb      	lsrs	r3, r3, #11
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	08004b5c 	.word	0x08004b5c

08002568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <RCC_Delay+0x34>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <RCC_Delay+0x38>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0a5b      	lsrs	r3, r3, #9
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002584:	bf00      	nop
  }
  while (Delay --);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <RCC_Delay+0x1c>
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000004 	.word	0x20000004
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e042      	b.n	800263c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe faea 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fe77 	bl	80032dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800261c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e024      	b.n	80026a0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2224      	movs	r2, #36	; 0x24
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fb2c 	bl	8000ccc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d16d      	bne.n	80027a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_UART_Transmit+0x2c>
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e066      	b.n	80027a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2221      	movs	r2, #33	; 0x21
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e6:	f7fe fc3b 	bl	8000f60 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	d108      	bne.n	8002714 <HAL_UART_Transmit+0x6c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e003      	b.n	800271c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800271c:	e02a      	b.n	8002774 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fbcd 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e036      	b.n	80027a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	3302      	adds	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e007      	b.n	8002766 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1cf      	bne.n	800271e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2140      	movs	r1, #64	; 0x40
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fb9d 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e006      	b.n	80027a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80c0 	bne.w	800294c <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_UARTEx_ReceiveToIdle+0x2a>
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2222      	movs	r2, #34	; 0x22
 80027e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fbb3 	bl	8000f60 <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002810:	d108      	bne.n	8002824 <HAL_UARTEx_ReceiveToIdle+0x76>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e003      	b.n	800282c <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002832:	e077      	b.n	8002924 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d117      	bne.n	8002872 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2202      	movs	r2, #2
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
          huart->RxState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e06d      	b.n	800294e <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b20      	cmp	r3, #32
 800287e:	d13c      	bne.n	80028fa <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002892:	b29a      	uxth	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	3302      	adds	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e01f      	b.n	80028e0 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d007      	beq.n	80028ba <HAL_UARTEx_ReceiveToIdle+0x10c>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <HAL_UARTEx_ReceiveToIdle+0x11a>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e008      	b.n	80028da <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d010      	beq.n	8002924 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe fb2d 	bl	8000f60 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <HAL_UARTEx_ReceiveToIdle+0x16a>
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e014      	b.n	800294e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d182      	bne.n	8002834 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002936:	b29b      	uxth	r3, r3
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b29a      	uxth	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0ba      	sub	sp, #232	; 0xe8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fbd1 	bl	800315e <UART_Receive_IT>
      return;
 80029bc:	e25b      	b.n	8002e76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80de 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
 80029c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d1 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
 8002a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
 8002a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
 8002a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 81f2 	beq.w	8002e6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
 8002a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb5c 	bl	800315e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x17a>
 8002aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04f      	beq.n	8002b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa66 	bl	8002fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d041      	beq.n	8002b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1d9      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d013      	beq.n	8002b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	4a7e      	ldr	r2, [pc, #504]	; (8002d38 <HAL_UART_IRQHandler+0x3e0>)
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fbb2 	bl	80012b0 <HAL_DMA_Abort_IT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e00e      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f99c 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00a      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f998 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e006      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f994 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002b7e:	e175      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	bf00      	nop
    return;
 8002b82:	e173      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 814f 	bne.w	8002e2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8148 	beq.w	8002e2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8141 	beq.w	8002e2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b6 	beq.w	8002d3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8145 	beq.w	8002e70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	f080 813e 	bcs.w	8002e70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f000 8088 	beq.w	8002d18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1d9      	bne.n	8002c08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e1      	bne.n	8002c54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3314      	adds	r3, #20
 8002c96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e3      	bne.n	8002c90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce8:	f023 0310 	bic.w	r3, r3, #16
 8002cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cfc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e3      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fa91 	bl	800123a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8bf 	bl	8002eb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d34:	e09c      	b.n	8002e70 <HAL_UART_IRQHandler+0x518>
 8002d36:	bf00      	nop
 8002d38:	08003069 	.word	0x08003069
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808e 	beq.w	8002e74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8089 	beq.w	8002e74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d86:	647a      	str	r2, [r7, #68]	; 0x44
 8002d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e3      	bne.n	8002d62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	623b      	str	r3, [r7, #32]
   return(result);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e3      	bne.n	8002d9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0310 	bic.w	r3, r3, #16
 8002df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	617b      	str	r3, [r7, #20]
   return(result);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e3      	bne.n	8002de0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f844 	bl	8002eb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2a:	e023      	b.n	8002e74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_UART_IRQHandler+0x4f4>
 8002e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f923 	bl	8003090 <UART_Transmit_IT>
    return;
 8002e4a:	e014      	b.n	8002e76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <HAL_UART_IRQHandler+0x51e>
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f962 	bl	800312e <UART_EndTransmit_IT>
    return;
 8002e6a:	e004      	b.n	8002e76 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e6c:	bf00      	nop
 8002e6e:	e002      	b.n	8002e76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e70:	bf00      	nop
 8002e72:	e000      	b.n	8002e76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e74:	bf00      	nop
  }
}
 8002e76:	37e8      	adds	r7, #232	; 0xe8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b090      	sub	sp, #64	; 0x40
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	e050      	b.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d04c      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee8:	f7fe f83a 	bl	8000f60 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d241      	bcs.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f18:	637a      	str	r2, [r7, #52]	; 0x34
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3314      	adds	r3, #20
 8002f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4c:	623a      	str	r2, [r7, #32]
 8002f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	69f9      	ldr	r1, [r7, #28]
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e00f      	b.n	8002f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d09f      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b095      	sub	sp, #84	; 0x54
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b01      	cmp	r3, #1
 800301a:	d119      	bne.n	8003050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60bb      	str	r3, [r7, #8]
   return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303c:	61ba      	str	r2, [r7, #24]
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	613b      	str	r3, [r7, #16]
   return(result);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800305e:	bf00      	nop
 8003060:	3754      	adds	r7, #84	; 0x54
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff0c 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b21      	cmp	r3, #33	; 0x21
 80030a2:	d13e      	bne.n	8003122 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d114      	bne.n	80030d8 <UART_Transmit_IT+0x48>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d110      	bne.n	80030d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	621a      	str	r2, [r3, #32]
 80030d6:	e008      	b.n	80030ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	1c59      	adds	r1, r3, #1
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6211      	str	r1, [r2, #32]
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe94 	bl	8002e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b08c      	sub	sp, #48	; 0x30
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b22      	cmp	r3, #34	; 0x22
 8003170:	f040 80ae 	bne.w	80032d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317c:	d117      	bne.n	80031ae <UART_Receive_IT+0x50>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d113      	bne.n	80031ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	b29a      	uxth	r2, r3
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	1c9a      	adds	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
 80031ac:	e026      	b.n	80031fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d007      	beq.n	80031d2 <UART_Receive_IT+0x74>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <UART_Receive_IT+0x82>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e008      	b.n	80031f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800320c:	2b00      	cmp	r3, #0
 800320e:	d15d      	bne.n	80032cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0220 	bic.w	r2, r2, #32
 800321e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2b01      	cmp	r3, #1
 8003254:	d135      	bne.n	80032c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	613b      	str	r3, [r7, #16]
   return(result);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f023 0310 	bic.w	r3, r3, #16
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	623a      	str	r2, [r7, #32]
 800327e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	69f9      	ldr	r1, [r7, #28]
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	61bb      	str	r3, [r7, #24]
   return(result);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b10      	cmp	r3, #16
 800329c:	d10a      	bne.n	80032b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fdf9 	bl	8002eb2 <HAL_UARTEx_RxEventCallback>
 80032c0:	e002      	b.n	80032c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fde3 	bl	8002e8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e002      	b.n	80032d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003316:	f023 030c 	bic.w	r3, r3, #12
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <UART_SetConfig+0x114>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7ff f8fc 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	e002      	b.n	8003352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7ff f8e4 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	0119      	lsls	r1, r3, #4
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009a      	lsls	r2, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fbb2 f2f3 	udiv	r2, r2, r3
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <UART_SetConfig+0x118>)
 800338a:	fba3 0302 	umull	r0, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2064      	movs	r0, #100	; 0x64
 8003392:	fb00 f303 	mul.w	r3, r0, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	3332      	adds	r3, #50	; 0x32
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x118>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	4419      	add	r1, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009a      	lsls	r2, r3, #2
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <UART_SetConfig+0x118>)
 80033c2:	fba3 0302 	umull	r0, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2064      	movs	r0, #100	; 0x64
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	3332      	adds	r3, #50	; 0x32
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <UART_SetConfig+0x118>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	440a      	add	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40013800 	.word	0x40013800
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <siprintf>:
 80033f8:	b40e      	push	{r1, r2, r3}
 80033fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033fe:	b500      	push	{lr}
 8003400:	b09c      	sub	sp, #112	; 0x70
 8003402:	ab1d      	add	r3, sp, #116	; 0x74
 8003404:	9002      	str	r0, [sp, #8]
 8003406:	9006      	str	r0, [sp, #24]
 8003408:	9107      	str	r1, [sp, #28]
 800340a:	9104      	str	r1, [sp, #16]
 800340c:	4808      	ldr	r0, [pc, #32]	; (8003430 <siprintf+0x38>)
 800340e:	4909      	ldr	r1, [pc, #36]	; (8003434 <siprintf+0x3c>)
 8003410:	f853 2b04 	ldr.w	r2, [r3], #4
 8003414:	9105      	str	r1, [sp, #20]
 8003416:	6800      	ldr	r0, [r0, #0]
 8003418:	a902      	add	r1, sp, #8
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	f000 f9de 	bl	80037dc <_svfiprintf_r>
 8003420:	2200      	movs	r2, #0
 8003422:	9b02      	ldr	r3, [sp, #8]
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	b01c      	add	sp, #112	; 0x70
 8003428:	f85d eb04 	ldr.w	lr, [sp], #4
 800342c:	b003      	add	sp, #12
 800342e:	4770      	bx	lr
 8003430:	2000005c 	.word	0x2000005c
 8003434:	ffff0208 	.word	0xffff0208

08003438 <siscanf>:
 8003438:	b40e      	push	{r1, r2, r3}
 800343a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800343e:	b530      	push	{r4, r5, lr}
 8003440:	b09c      	sub	sp, #112	; 0x70
 8003442:	ac1f      	add	r4, sp, #124	; 0x7c
 8003444:	f854 5b04 	ldr.w	r5, [r4], #4
 8003448:	f8ad 2014 	strh.w	r2, [sp, #20]
 800344c:	9002      	str	r0, [sp, #8]
 800344e:	9006      	str	r0, [sp, #24]
 8003450:	f7fc fe7c 	bl	800014c <strlen>
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <siscanf+0x4c>)
 8003456:	9003      	str	r0, [sp, #12]
 8003458:	930b      	str	r3, [sp, #44]	; 0x2c
 800345a:	2300      	movs	r3, #0
 800345c:	930f      	str	r3, [sp, #60]	; 0x3c
 800345e:	9314      	str	r3, [sp, #80]	; 0x50
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	9007      	str	r0, [sp, #28]
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <siscanf+0x50>)
 8003468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800346c:	462a      	mov	r2, r5
 800346e:	4623      	mov	r3, r4
 8003470:	a902      	add	r1, sp, #8
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	9401      	str	r4, [sp, #4]
 8003476:	f000 fb09 	bl	8003a8c <__ssvfiscanf_r>
 800347a:	b01c      	add	sp, #112	; 0x70
 800347c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003480:	b003      	add	sp, #12
 8003482:	4770      	bx	lr
 8003484:	0800348d 	.word	0x0800348d
 8003488:	2000005c 	.word	0x2000005c

0800348c <__seofread>:
 800348c:	2000      	movs	r0, #0
 800348e:	4770      	bx	lr

08003490 <memset>:
 8003490:	4603      	mov	r3, r0
 8003492:	4402      	add	r2, r0
 8003494:	4293      	cmp	r3, r2
 8003496:	d100      	bne.n	800349a <memset+0xa>
 8003498:	4770      	bx	lr
 800349a:	f803 1b01 	strb.w	r1, [r3], #1
 800349e:	e7f9      	b.n	8003494 <memset+0x4>

080034a0 <strstr>:
 80034a0:	780a      	ldrb	r2, [r1, #0]
 80034a2:	b570      	push	{r4, r5, r6, lr}
 80034a4:	b96a      	cbnz	r2, 80034c2 <strstr+0x22>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d109      	bne.n	80034c0 <strstr+0x20>
 80034ac:	460c      	mov	r4, r1
 80034ae:	4605      	mov	r5, r0
 80034b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f6      	beq.n	80034a6 <strstr+0x6>
 80034b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80034bc:	429e      	cmp	r6, r3
 80034be:	d0f7      	beq.n	80034b0 <strstr+0x10>
 80034c0:	3001      	adds	r0, #1
 80034c2:	7803      	ldrb	r3, [r0, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ef      	bne.n	80034a8 <strstr+0x8>
 80034c8:	4618      	mov	r0, r3
 80034ca:	e7ec      	b.n	80034a6 <strstr+0x6>

080034cc <__errno>:
 80034cc:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <__errno+0x8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	2000005c 	.word	0x2000005c

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	2600      	movs	r6, #0
 80034dc:	4d0c      	ldr	r5, [pc, #48]	; (8003510 <__libc_init_array+0x38>)
 80034de:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	f001 f8fe 	bl	80046e8 <_init>
 80034ec:	2600      	movs	r6, #0
 80034ee:	4d0a      	ldr	r5, [pc, #40]	; (8003518 <__libc_init_array+0x40>)
 80034f0:	4c0a      	ldr	r4, [pc, #40]	; (800351c <__libc_init_array+0x44>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08004cc8 	.word	0x08004cc8
 8003514:	08004cc8 	.word	0x08004cc8
 8003518:	08004cc8 	.word	0x08004cc8
 800351c:	08004ccc 	.word	0x08004ccc

08003520 <__retarget_lock_acquire_recursive>:
 8003520:	4770      	bx	lr

08003522 <__retarget_lock_release_recursive>:
 8003522:	4770      	bx	lr

08003524 <memcpy>:
 8003524:	440a      	add	r2, r1
 8003526:	4291      	cmp	r1, r2
 8003528:	f100 33ff 	add.w	r3, r0, #4294967295
 800352c:	d100      	bne.n	8003530 <memcpy+0xc>
 800352e:	4770      	bx	lr
 8003530:	b510      	push	{r4, lr}
 8003532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003536:	4291      	cmp	r1, r2
 8003538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800353c:	d1f9      	bne.n	8003532 <memcpy+0xe>
 800353e:	bd10      	pop	{r4, pc}

08003540 <_free_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	4605      	mov	r5, r0
 8003544:	2900      	cmp	r1, #0
 8003546:	d040      	beq.n	80035ca <_free_r+0x8a>
 8003548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800354c:	1f0c      	subs	r4, r1, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfb8      	it	lt
 8003552:	18e4      	addlt	r4, r4, r3
 8003554:	f000 f8dc 	bl	8003710 <__malloc_lock>
 8003558:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <_free_r+0x8c>)
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	b933      	cbnz	r3, 800356c <_free_r+0x2c>
 800355e:	6063      	str	r3, [r4, #4]
 8003560:	6014      	str	r4, [r2, #0]
 8003562:	4628      	mov	r0, r5
 8003564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003568:	f000 b8d8 	b.w	800371c <__malloc_unlock>
 800356c:	42a3      	cmp	r3, r4
 800356e:	d908      	bls.n	8003582 <_free_r+0x42>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	1821      	adds	r1, r4, r0
 8003574:	428b      	cmp	r3, r1
 8003576:	bf01      	itttt	eq
 8003578:	6819      	ldreq	r1, [r3, #0]
 800357a:	685b      	ldreq	r3, [r3, #4]
 800357c:	1809      	addeq	r1, r1, r0
 800357e:	6021      	streq	r1, [r4, #0]
 8003580:	e7ed      	b.n	800355e <_free_r+0x1e>
 8003582:	461a      	mov	r2, r3
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b10b      	cbz	r3, 800358c <_free_r+0x4c>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d9fa      	bls.n	8003582 <_free_r+0x42>
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	1850      	adds	r0, r2, r1
 8003590:	42a0      	cmp	r0, r4
 8003592:	d10b      	bne.n	80035ac <_free_r+0x6c>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	4401      	add	r1, r0
 8003598:	1850      	adds	r0, r2, r1
 800359a:	4283      	cmp	r3, r0
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	d1e0      	bne.n	8003562 <_free_r+0x22>
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4408      	add	r0, r1
 80035a6:	6010      	str	r0, [r2, #0]
 80035a8:	6053      	str	r3, [r2, #4]
 80035aa:	e7da      	b.n	8003562 <_free_r+0x22>
 80035ac:	d902      	bls.n	80035b4 <_free_r+0x74>
 80035ae:	230c      	movs	r3, #12
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	e7d6      	b.n	8003562 <_free_r+0x22>
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	1821      	adds	r1, r4, r0
 80035b8:	428b      	cmp	r3, r1
 80035ba:	bf01      	itttt	eq
 80035bc:	6819      	ldreq	r1, [r3, #0]
 80035be:	685b      	ldreq	r3, [r3, #4]
 80035c0:	1809      	addeq	r1, r1, r0
 80035c2:	6021      	streq	r1, [r4, #0]
 80035c4:	6063      	str	r3, [r4, #4]
 80035c6:	6054      	str	r4, [r2, #4]
 80035c8:	e7cb      	b.n	8003562 <_free_r+0x22>
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	200003b0 	.word	0x200003b0

080035d0 <sbrk_aligned>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	4e0e      	ldr	r6, [pc, #56]	; (800360c <sbrk_aligned+0x3c>)
 80035d4:	460c      	mov	r4, r1
 80035d6:	6831      	ldr	r1, [r6, #0]
 80035d8:	4605      	mov	r5, r0
 80035da:	b911      	cbnz	r1, 80035e2 <sbrk_aligned+0x12>
 80035dc:	f000 ff3a 	bl	8004454 <_sbrk_r>
 80035e0:	6030      	str	r0, [r6, #0]
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 ff35 	bl	8004454 <_sbrk_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	d00a      	beq.n	8003604 <sbrk_aligned+0x34>
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d007      	beq.n	8003608 <sbrk_aligned+0x38>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 ff2a 	bl	8004454 <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d101      	bne.n	8003608 <sbrk_aligned+0x38>
 8003604:	f04f 34ff 	mov.w	r4, #4294967295
 8003608:	4620      	mov	r0, r4
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	200003b4 	.word	0x200003b4

08003610 <_malloc_r>:
 8003610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003614:	1ccd      	adds	r5, r1, #3
 8003616:	f025 0503 	bic.w	r5, r5, #3
 800361a:	3508      	adds	r5, #8
 800361c:	2d0c      	cmp	r5, #12
 800361e:	bf38      	it	cc
 8003620:	250c      	movcc	r5, #12
 8003622:	2d00      	cmp	r5, #0
 8003624:	4607      	mov	r7, r0
 8003626:	db01      	blt.n	800362c <_malloc_r+0x1c>
 8003628:	42a9      	cmp	r1, r5
 800362a:	d905      	bls.n	8003638 <_malloc_r+0x28>
 800362c:	230c      	movs	r3, #12
 800362e:	2600      	movs	r6, #0
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4630      	mov	r0, r6
 8003634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800370c <_malloc_r+0xfc>
 800363c:	f000 f868 	bl	8003710 <__malloc_lock>
 8003640:	f8d8 3000 	ldr.w	r3, [r8]
 8003644:	461c      	mov	r4, r3
 8003646:	bb5c      	cbnz	r4, 80036a0 <_malloc_r+0x90>
 8003648:	4629      	mov	r1, r5
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff ffc0 	bl	80035d0 <sbrk_aligned>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	4604      	mov	r4, r0
 8003654:	d155      	bne.n	8003702 <_malloc_r+0xf2>
 8003656:	f8d8 4000 	ldr.w	r4, [r8]
 800365a:	4626      	mov	r6, r4
 800365c:	2e00      	cmp	r6, #0
 800365e:	d145      	bne.n	80036ec <_malloc_r+0xdc>
 8003660:	2c00      	cmp	r4, #0
 8003662:	d048      	beq.n	80036f6 <_malloc_r+0xe6>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	4631      	mov	r1, r6
 8003668:	4638      	mov	r0, r7
 800366a:	eb04 0903 	add.w	r9, r4, r3
 800366e:	f000 fef1 	bl	8004454 <_sbrk_r>
 8003672:	4581      	cmp	r9, r0
 8003674:	d13f      	bne.n	80036f6 <_malloc_r+0xe6>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	4638      	mov	r0, r7
 800367a:	1a6d      	subs	r5, r5, r1
 800367c:	4629      	mov	r1, r5
 800367e:	f7ff ffa7 	bl	80035d0 <sbrk_aligned>
 8003682:	3001      	adds	r0, #1
 8003684:	d037      	beq.n	80036f6 <_malloc_r+0xe6>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	442b      	add	r3, r5
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	f8d8 3000 	ldr.w	r3, [r8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d038      	beq.n	8003706 <_malloc_r+0xf6>
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	42a2      	cmp	r2, r4
 8003698:	d12b      	bne.n	80036f2 <_malloc_r+0xe2>
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e00f      	b.n	80036c0 <_malloc_r+0xb0>
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	1b52      	subs	r2, r2, r5
 80036a4:	d41f      	bmi.n	80036e6 <_malloc_r+0xd6>
 80036a6:	2a0b      	cmp	r2, #11
 80036a8:	d917      	bls.n	80036da <_malloc_r+0xca>
 80036aa:	1961      	adds	r1, r4, r5
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	6025      	str	r5, [r4, #0]
 80036b0:	bf18      	it	ne
 80036b2:	6059      	strne	r1, [r3, #4]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	bf08      	it	eq
 80036b8:	f8c8 1000 	streq.w	r1, [r8]
 80036bc:	5162      	str	r2, [r4, r5]
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	4638      	mov	r0, r7
 80036c2:	f104 060b 	add.w	r6, r4, #11
 80036c6:	f000 f829 	bl	800371c <__malloc_unlock>
 80036ca:	f026 0607 	bic.w	r6, r6, #7
 80036ce:	1d23      	adds	r3, r4, #4
 80036d0:	1af2      	subs	r2, r6, r3
 80036d2:	d0ae      	beq.n	8003632 <_malloc_r+0x22>
 80036d4:	1b9b      	subs	r3, r3, r6
 80036d6:	50a3      	str	r3, [r4, r2]
 80036d8:	e7ab      	b.n	8003632 <_malloc_r+0x22>
 80036da:	42a3      	cmp	r3, r4
 80036dc:	6862      	ldr	r2, [r4, #4]
 80036de:	d1dd      	bne.n	800369c <_malloc_r+0x8c>
 80036e0:	f8c8 2000 	str.w	r2, [r8]
 80036e4:	e7ec      	b.n	80036c0 <_malloc_r+0xb0>
 80036e6:	4623      	mov	r3, r4
 80036e8:	6864      	ldr	r4, [r4, #4]
 80036ea:	e7ac      	b.n	8003646 <_malloc_r+0x36>
 80036ec:	4634      	mov	r4, r6
 80036ee:	6876      	ldr	r6, [r6, #4]
 80036f0:	e7b4      	b.n	800365c <_malloc_r+0x4c>
 80036f2:	4613      	mov	r3, r2
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x80>
 80036f6:	230c      	movs	r3, #12
 80036f8:	4638      	mov	r0, r7
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	f000 f80e 	bl	800371c <__malloc_unlock>
 8003700:	e797      	b.n	8003632 <_malloc_r+0x22>
 8003702:	6025      	str	r5, [r4, #0]
 8003704:	e7dc      	b.n	80036c0 <_malloc_r+0xb0>
 8003706:	605b      	str	r3, [r3, #4]
 8003708:	deff      	udf	#255	; 0xff
 800370a:	bf00      	nop
 800370c:	200003b0 	.word	0x200003b0

08003710 <__malloc_lock>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__malloc_lock+0x8>)
 8003712:	f7ff bf05 	b.w	8003520 <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	200003ac 	.word	0x200003ac

0800371c <__malloc_unlock>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__malloc_unlock+0x8>)
 800371e:	f7ff bf00 	b.w	8003522 <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	200003ac 	.word	0x200003ac

08003728 <__ssputs_r>:
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	461f      	mov	r7, r3
 800372e:	688e      	ldr	r6, [r1, #8]
 8003730:	4682      	mov	sl, r0
 8003732:	42be      	cmp	r6, r7
 8003734:	460c      	mov	r4, r1
 8003736:	4690      	mov	r8, r2
 8003738:	680b      	ldr	r3, [r1, #0]
 800373a:	d82c      	bhi.n	8003796 <__ssputs_r+0x6e>
 800373c:	898a      	ldrh	r2, [r1, #12]
 800373e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003742:	d026      	beq.n	8003792 <__ssputs_r+0x6a>
 8003744:	6965      	ldr	r5, [r4, #20]
 8003746:	6909      	ldr	r1, [r1, #16]
 8003748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800374c:	eba3 0901 	sub.w	r9, r3, r1
 8003750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003754:	1c7b      	adds	r3, r7, #1
 8003756:	444b      	add	r3, r9
 8003758:	106d      	asrs	r5, r5, #1
 800375a:	429d      	cmp	r5, r3
 800375c:	bf38      	it	cc
 800375e:	461d      	movcc	r5, r3
 8003760:	0553      	lsls	r3, r2, #21
 8003762:	d527      	bpl.n	80037b4 <__ssputs_r+0x8c>
 8003764:	4629      	mov	r1, r5
 8003766:	f7ff ff53 	bl	8003610 <_malloc_r>
 800376a:	4606      	mov	r6, r0
 800376c:	b360      	cbz	r0, 80037c8 <__ssputs_r+0xa0>
 800376e:	464a      	mov	r2, r9
 8003770:	6921      	ldr	r1, [r4, #16]
 8003772:	f7ff fed7 	bl	8003524 <memcpy>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	6126      	str	r6, [r4, #16]
 8003784:	444e      	add	r6, r9
 8003786:	6026      	str	r6, [r4, #0]
 8003788:	463e      	mov	r6, r7
 800378a:	6165      	str	r5, [r4, #20]
 800378c:	eba5 0509 	sub.w	r5, r5, r9
 8003790:	60a5      	str	r5, [r4, #8]
 8003792:	42be      	cmp	r6, r7
 8003794:	d900      	bls.n	8003798 <__ssputs_r+0x70>
 8003796:	463e      	mov	r6, r7
 8003798:	4632      	mov	r2, r6
 800379a:	4641      	mov	r1, r8
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	f000 fe3e 	bl	800441e <memmove>
 80037a2:	2000      	movs	r0, #0
 80037a4:	68a3      	ldr	r3, [r4, #8]
 80037a6:	1b9b      	subs	r3, r3, r6
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	4433      	add	r3, r6
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	462a      	mov	r2, r5
 80037b6:	f000 fe6b 	bl	8004490 <_realloc_r>
 80037ba:	4606      	mov	r6, r0
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1e0      	bne.n	8003782 <__ssputs_r+0x5a>
 80037c0:	4650      	mov	r0, sl
 80037c2:	6921      	ldr	r1, [r4, #16]
 80037c4:	f7ff febc 	bl	8003540 <_free_r>
 80037c8:	230c      	movs	r3, #12
 80037ca:	f8ca 3000 	str.w	r3, [sl]
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	e7e9      	b.n	80037b0 <__ssputs_r+0x88>

080037dc <_svfiprintf_r>:
 80037dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	4698      	mov	r8, r3
 80037e2:	898b      	ldrh	r3, [r1, #12]
 80037e4:	4607      	mov	r7, r0
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	460d      	mov	r5, r1
 80037ea:	4614      	mov	r4, r2
 80037ec:	b09d      	sub	sp, #116	; 0x74
 80037ee:	d50e      	bpl.n	800380e <_svfiprintf_r+0x32>
 80037f0:	690b      	ldr	r3, [r1, #16]
 80037f2:	b963      	cbnz	r3, 800380e <_svfiprintf_r+0x32>
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	f7ff ff0b 	bl	8003610 <_malloc_r>
 80037fa:	6028      	str	r0, [r5, #0]
 80037fc:	6128      	str	r0, [r5, #16]
 80037fe:	b920      	cbnz	r0, 800380a <_svfiprintf_r+0x2e>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	e0d0      	b.n	80039ac <_svfiprintf_r+0x1d0>
 800380a:	2340      	movs	r3, #64	; 0x40
 800380c:	616b      	str	r3, [r5, #20]
 800380e:	2300      	movs	r3, #0
 8003810:	9309      	str	r3, [sp, #36]	; 0x24
 8003812:	2320      	movs	r3, #32
 8003814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003818:	2330      	movs	r3, #48	; 0x30
 800381a:	f04f 0901 	mov.w	r9, #1
 800381e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003822:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80039c4 <_svfiprintf_r+0x1e8>
 8003826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800382a:	4623      	mov	r3, r4
 800382c:	469a      	mov	sl, r3
 800382e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003832:	b10a      	cbz	r2, 8003838 <_svfiprintf_r+0x5c>
 8003834:	2a25      	cmp	r2, #37	; 0x25
 8003836:	d1f9      	bne.n	800382c <_svfiprintf_r+0x50>
 8003838:	ebba 0b04 	subs.w	fp, sl, r4
 800383c:	d00b      	beq.n	8003856 <_svfiprintf_r+0x7a>
 800383e:	465b      	mov	r3, fp
 8003840:	4622      	mov	r2, r4
 8003842:	4629      	mov	r1, r5
 8003844:	4638      	mov	r0, r7
 8003846:	f7ff ff6f 	bl	8003728 <__ssputs_r>
 800384a:	3001      	adds	r0, #1
 800384c:	f000 80a9 	beq.w	80039a2 <_svfiprintf_r+0x1c6>
 8003850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003852:	445a      	add	r2, fp
 8003854:	9209      	str	r2, [sp, #36]	; 0x24
 8003856:	f89a 3000 	ldrb.w	r3, [sl]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80a1 	beq.w	80039a2 <_svfiprintf_r+0x1c6>
 8003860:	2300      	movs	r3, #0
 8003862:	f04f 32ff 	mov.w	r2, #4294967295
 8003866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800386a:	f10a 0a01 	add.w	sl, sl, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	9307      	str	r3, [sp, #28]
 8003872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003876:	931a      	str	r3, [sp, #104]	; 0x68
 8003878:	4654      	mov	r4, sl
 800387a:	2205      	movs	r2, #5
 800387c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003880:	4850      	ldr	r0, [pc, #320]	; (80039c4 <_svfiprintf_r+0x1e8>)
 8003882:	f000 fdf7 	bl	8004474 <memchr>
 8003886:	9a04      	ldr	r2, [sp, #16]
 8003888:	b9d8      	cbnz	r0, 80038c2 <_svfiprintf_r+0xe6>
 800388a:	06d0      	lsls	r0, r2, #27
 800388c:	bf44      	itt	mi
 800388e:	2320      	movmi	r3, #32
 8003890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003894:	0711      	lsls	r1, r2, #28
 8003896:	bf44      	itt	mi
 8003898:	232b      	movmi	r3, #43	; 0x2b
 800389a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800389e:	f89a 3000 	ldrb.w	r3, [sl]
 80038a2:	2b2a      	cmp	r3, #42	; 0x2a
 80038a4:	d015      	beq.n	80038d2 <_svfiprintf_r+0xf6>
 80038a6:	4654      	mov	r4, sl
 80038a8:	2000      	movs	r0, #0
 80038aa:	f04f 0c0a 	mov.w	ip, #10
 80038ae:	9a07      	ldr	r2, [sp, #28]
 80038b0:	4621      	mov	r1, r4
 80038b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038b6:	3b30      	subs	r3, #48	; 0x30
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	d94d      	bls.n	8003958 <_svfiprintf_r+0x17c>
 80038bc:	b1b0      	cbz	r0, 80038ec <_svfiprintf_r+0x110>
 80038be:	9207      	str	r2, [sp, #28]
 80038c0:	e014      	b.n	80038ec <_svfiprintf_r+0x110>
 80038c2:	eba0 0308 	sub.w	r3, r0, r8
 80038c6:	fa09 f303 	lsl.w	r3, r9, r3
 80038ca:	4313      	orrs	r3, r2
 80038cc:	46a2      	mov	sl, r4
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	e7d2      	b.n	8003878 <_svfiprintf_r+0x9c>
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	1d19      	adds	r1, r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	9103      	str	r1, [sp, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bfbb      	ittet	lt
 80038de:	425b      	neglt	r3, r3
 80038e0:	f042 0202 	orrlt.w	r2, r2, #2
 80038e4:	9307      	strge	r3, [sp, #28]
 80038e6:	9307      	strlt	r3, [sp, #28]
 80038e8:	bfb8      	it	lt
 80038ea:	9204      	strlt	r2, [sp, #16]
 80038ec:	7823      	ldrb	r3, [r4, #0]
 80038ee:	2b2e      	cmp	r3, #46	; 0x2e
 80038f0:	d10c      	bne.n	800390c <_svfiprintf_r+0x130>
 80038f2:	7863      	ldrb	r3, [r4, #1]
 80038f4:	2b2a      	cmp	r3, #42	; 0x2a
 80038f6:	d134      	bne.n	8003962 <_svfiprintf_r+0x186>
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	3402      	adds	r4, #2
 80038fc:	1d1a      	adds	r2, r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	9203      	str	r2, [sp, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfb8      	it	lt
 8003906:	f04f 33ff 	movlt.w	r3, #4294967295
 800390a:	9305      	str	r3, [sp, #20]
 800390c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80039c8 <_svfiprintf_r+0x1ec>
 8003910:	2203      	movs	r2, #3
 8003912:	4650      	mov	r0, sl
 8003914:	7821      	ldrb	r1, [r4, #0]
 8003916:	f000 fdad 	bl	8004474 <memchr>
 800391a:	b138      	cbz	r0, 800392c <_svfiprintf_r+0x150>
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	9b04      	ldr	r3, [sp, #16]
 8003920:	eba0 000a 	sub.w	r0, r0, sl
 8003924:	4082      	lsls	r2, r0
 8003926:	4313      	orrs	r3, r2
 8003928:	3401      	adds	r4, #1
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003930:	2206      	movs	r2, #6
 8003932:	4826      	ldr	r0, [pc, #152]	; (80039cc <_svfiprintf_r+0x1f0>)
 8003934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003938:	f000 fd9c 	bl	8004474 <memchr>
 800393c:	2800      	cmp	r0, #0
 800393e:	d038      	beq.n	80039b2 <_svfiprintf_r+0x1d6>
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <_svfiprintf_r+0x1f4>)
 8003942:	bb1b      	cbnz	r3, 800398c <_svfiprintf_r+0x1b0>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	3307      	adds	r3, #7
 8003948:	f023 0307 	bic.w	r3, r3, #7
 800394c:	3308      	adds	r3, #8
 800394e:	9303      	str	r3, [sp, #12]
 8003950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003952:	4433      	add	r3, r6
 8003954:	9309      	str	r3, [sp, #36]	; 0x24
 8003956:	e768      	b.n	800382a <_svfiprintf_r+0x4e>
 8003958:	460c      	mov	r4, r1
 800395a:	2001      	movs	r0, #1
 800395c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003960:	e7a6      	b.n	80038b0 <_svfiprintf_r+0xd4>
 8003962:	2300      	movs	r3, #0
 8003964:	f04f 0c0a 	mov.w	ip, #10
 8003968:	4619      	mov	r1, r3
 800396a:	3401      	adds	r4, #1
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	4620      	mov	r0, r4
 8003970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003974:	3a30      	subs	r2, #48	; 0x30
 8003976:	2a09      	cmp	r2, #9
 8003978:	d903      	bls.n	8003982 <_svfiprintf_r+0x1a6>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0c6      	beq.n	800390c <_svfiprintf_r+0x130>
 800397e:	9105      	str	r1, [sp, #20]
 8003980:	e7c4      	b.n	800390c <_svfiprintf_r+0x130>
 8003982:	4604      	mov	r4, r0
 8003984:	2301      	movs	r3, #1
 8003986:	fb0c 2101 	mla	r1, ip, r1, r2
 800398a:	e7f0      	b.n	800396e <_svfiprintf_r+0x192>
 800398c:	ab03      	add	r3, sp, #12
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	462a      	mov	r2, r5
 8003992:	4638      	mov	r0, r7
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <_svfiprintf_r+0x1f8>)
 8003996:	a904      	add	r1, sp, #16
 8003998:	f3af 8000 	nop.w
 800399c:	1c42      	adds	r2, r0, #1
 800399e:	4606      	mov	r6, r0
 80039a0:	d1d6      	bne.n	8003950 <_svfiprintf_r+0x174>
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	065b      	lsls	r3, r3, #25
 80039a6:	f53f af2d 	bmi.w	8003804 <_svfiprintf_r+0x28>
 80039aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ac:	b01d      	add	sp, #116	; 0x74
 80039ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b2:	ab03      	add	r3, sp, #12
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	462a      	mov	r2, r5
 80039b8:	4638      	mov	r0, r7
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <_svfiprintf_r+0x1f8>)
 80039bc:	a904      	add	r1, sp, #16
 80039be:	f000 fa4f 	bl	8003e60 <_printf_i>
 80039c2:	e7eb      	b.n	800399c <_svfiprintf_r+0x1c0>
 80039c4:	08004b76 	.word	0x08004b76
 80039c8:	08004b7c 	.word	0x08004b7c
 80039cc:	08004b80 	.word	0x08004b80
 80039d0:	00000000 	.word	0x00000000
 80039d4:	08003729 	.word	0x08003729

080039d8 <_sungetc_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	1c4b      	adds	r3, r1, #1
 80039dc:	4614      	mov	r4, r2
 80039de:	d103      	bne.n	80039e8 <_sungetc_r+0x10>
 80039e0:	f04f 35ff 	mov.w	r5, #4294967295
 80039e4:	4628      	mov	r0, r5
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	8993      	ldrh	r3, [r2, #12]
 80039ea:	b2cd      	uxtb	r5, r1
 80039ec:	f023 0320 	bic.w	r3, r3, #32
 80039f0:	8193      	strh	r3, [r2, #12]
 80039f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039f4:	6852      	ldr	r2, [r2, #4]
 80039f6:	b18b      	cbz	r3, 8003a1c <_sungetc_r+0x44>
 80039f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039fa:	4293      	cmp	r3, r2
 80039fc:	dd08      	ble.n	8003a10 <_sungetc_r+0x38>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	e7e9      	b.n	80039e4 <_sungetc_r+0xc>
 8003a10:	4621      	mov	r1, r4
 8003a12:	f000 fccc 	bl	80043ae <__submore>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0f1      	beq.n	80039fe <_sungetc_r+0x26>
 8003a1a:	e7e1      	b.n	80039e0 <_sungetc_r+0x8>
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	b151      	cbz	r1, 8003a38 <_sungetc_r+0x60>
 8003a22:	4299      	cmp	r1, r3
 8003a24:	d208      	bcs.n	8003a38 <_sungetc_r+0x60>
 8003a26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003a2a:	42a9      	cmp	r1, r5
 8003a2c:	d104      	bne.n	8003a38 <_sungetc_r+0x60>
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	3201      	adds	r2, #1
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	6062      	str	r2, [r4, #4]
 8003a36:	e7d5      	b.n	80039e4 <_sungetc_r+0xc>
 8003a38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a40:	6363      	str	r3, [r4, #52]	; 0x34
 8003a42:	2303      	movs	r3, #3
 8003a44:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a46:	4623      	mov	r3, r4
 8003a48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e7dc      	b.n	8003a0c <_sungetc_r+0x34>

08003a52 <__ssrefill_r>:
 8003a52:	b510      	push	{r4, lr}
 8003a54:	460c      	mov	r4, r1
 8003a56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a58:	b169      	cbz	r1, 8003a76 <__ssrefill_r+0x24>
 8003a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	d001      	beq.n	8003a66 <__ssrefill_r+0x14>
 8003a62:	f7ff fd6d 	bl	8003540 <_free_r>
 8003a66:	2000      	movs	r0, #0
 8003a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	b113      	cbz	r3, 8003a76 <__ssrefill_r+0x24>
 8003a70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	f043 0320 	orr.w	r3, r3, #32
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	e7f3      	b.n	8003a74 <__ssrefill_r+0x22>

08003a8c <__ssvfiscanf_r>:
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	460c      	mov	r4, r1
 8003a92:	2100      	movs	r1, #0
 8003a94:	4606      	mov	r6, r0
 8003a96:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003a9a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003a9e:	49a6      	ldr	r1, [pc, #664]	; (8003d38 <__ssvfiscanf_r+0x2ac>)
 8003aa0:	f10d 0804 	add.w	r8, sp, #4
 8003aa4:	91a0      	str	r1, [sp, #640]	; 0x280
 8003aa6:	49a5      	ldr	r1, [pc, #660]	; (8003d3c <__ssvfiscanf_r+0x2b0>)
 8003aa8:	4fa5      	ldr	r7, [pc, #660]	; (8003d40 <__ssvfiscanf_r+0x2b4>)
 8003aaa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003d44 <__ssvfiscanf_r+0x2b8>
 8003aae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ab2:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	7813      	ldrb	r3, [r2, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 815a 	beq.w	8003d72 <__ssvfiscanf_r+0x2e6>
 8003abe:	5cf9      	ldrb	r1, [r7, r3]
 8003ac0:	1c55      	adds	r5, r2, #1
 8003ac2:	f011 0108 	ands.w	r1, r1, #8
 8003ac6:	d019      	beq.n	8003afc <__ssvfiscanf_r+0x70>
 8003ac8:	6863      	ldr	r3, [r4, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dd0f      	ble.n	8003aee <__ssvfiscanf_r+0x62>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	5cba      	ldrb	r2, [r7, r2]
 8003ad4:	0712      	lsls	r2, r2, #28
 8003ad6:	d401      	bmi.n	8003adc <__ssvfiscanf_r+0x50>
 8003ad8:	462a      	mov	r2, r5
 8003ada:	e7ec      	b.n	8003ab6 <__ssvfiscanf_r+0x2a>
 8003adc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ade:	3301      	adds	r3, #1
 8003ae0:	3201      	adds	r2, #1
 8003ae2:	9245      	str	r2, [sp, #276]	; 0x114
 8003ae4:	6862      	ldr	r2, [r4, #4]
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	6062      	str	r2, [r4, #4]
 8003aec:	e7ec      	b.n	8003ac8 <__ssvfiscanf_r+0x3c>
 8003aee:	4621      	mov	r1, r4
 8003af0:	4630      	mov	r0, r6
 8003af2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003af4:	4798      	blx	r3
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d0e9      	beq.n	8003ace <__ssvfiscanf_r+0x42>
 8003afa:	e7ed      	b.n	8003ad8 <__ssvfiscanf_r+0x4c>
 8003afc:	2b25      	cmp	r3, #37	; 0x25
 8003afe:	d012      	beq.n	8003b26 <__ssvfiscanf_r+0x9a>
 8003b00:	469a      	mov	sl, r3
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f340 8092 	ble.w	8003c2e <__ssvfiscanf_r+0x1a2>
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	7813      	ldrb	r3, [r2, #0]
 8003b0e:	4553      	cmp	r3, sl
 8003b10:	f040 812f 	bne.w	8003d72 <__ssvfiscanf_r+0x2e6>
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	3201      	adds	r2, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003b1e:	6022      	str	r2, [r4, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	9345      	str	r3, [sp, #276]	; 0x114
 8003b24:	e7d8      	b.n	8003ad8 <__ssvfiscanf_r+0x4c>
 8003b26:	9141      	str	r1, [sp, #260]	; 0x104
 8003b28:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b2a:	7853      	ldrb	r3, [r2, #1]
 8003b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b2e:	bf04      	itt	eq
 8003b30:	2310      	moveq	r3, #16
 8003b32:	1c95      	addeq	r5, r2, #2
 8003b34:	f04f 020a 	mov.w	r2, #10
 8003b38:	bf08      	it	eq
 8003b3a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003b3c:	46aa      	mov	sl, r5
 8003b3e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003b42:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d91c      	bls.n	8003b84 <__ssvfiscanf_r+0xf8>
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	487d      	ldr	r0, [pc, #500]	; (8003d44 <__ssvfiscanf_r+0x2b8>)
 8003b4e:	f000 fc91 	bl	8004474 <memchr>
 8003b52:	b138      	cbz	r0, 8003b64 <__ssvfiscanf_r+0xd8>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4655      	mov	r5, sl
 8003b58:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b5a:	eba0 0009 	sub.w	r0, r0, r9
 8003b5e:	4083      	lsls	r3, r0
 8003b60:	4313      	orrs	r3, r2
 8003b62:	9341      	str	r3, [sp, #260]	; 0x104
 8003b64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b68:	2b78      	cmp	r3, #120	; 0x78
 8003b6a:	d806      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003b6c:	2b57      	cmp	r3, #87	; 0x57
 8003b6e:	d810      	bhi.n	8003b92 <__ssvfiscanf_r+0x106>
 8003b70:	2b25      	cmp	r3, #37	; 0x25
 8003b72:	d0c5      	beq.n	8003b00 <__ssvfiscanf_r+0x74>
 8003b74:	d856      	bhi.n	8003c24 <__ssvfiscanf_r+0x198>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d064      	beq.n	8003c44 <__ssvfiscanf_r+0x1b8>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b7e:	230a      	movs	r3, #10
 8003b80:	9342      	str	r3, [sp, #264]	; 0x108
 8003b82:	e075      	b.n	8003c70 <__ssvfiscanf_r+0x1e4>
 8003b84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003b86:	4655      	mov	r5, sl
 8003b88:	fb02 1103 	mla	r1, r2, r3, r1
 8003b8c:	3930      	subs	r1, #48	; 0x30
 8003b8e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b90:	e7d4      	b.n	8003b3c <__ssvfiscanf_r+0xb0>
 8003b92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003b96:	2a20      	cmp	r2, #32
 8003b98:	d8ef      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003b9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ba0 <__ssvfiscanf_r+0x114>)
 8003b9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ba0:	08003c53 	.word	0x08003c53
 8003ba4:	08003b7b 	.word	0x08003b7b
 8003ba8:	08003b7b 	.word	0x08003b7b
 8003bac:	08003cb1 	.word	0x08003cb1
 8003bb0:	08003b7b 	.word	0x08003b7b
 8003bb4:	08003b7b 	.word	0x08003b7b
 8003bb8:	08003b7b 	.word	0x08003b7b
 8003bbc:	08003b7b 	.word	0x08003b7b
 8003bc0:	08003b7b 	.word	0x08003b7b
 8003bc4:	08003b7b 	.word	0x08003b7b
 8003bc8:	08003b7b 	.word	0x08003b7b
 8003bcc:	08003cc7 	.word	0x08003cc7
 8003bd0:	08003cad 	.word	0x08003cad
 8003bd4:	08003c2b 	.word	0x08003c2b
 8003bd8:	08003c2b 	.word	0x08003c2b
 8003bdc:	08003c2b 	.word	0x08003c2b
 8003be0:	08003b7b 	.word	0x08003b7b
 8003be4:	08003c69 	.word	0x08003c69
 8003be8:	08003b7b 	.word	0x08003b7b
 8003bec:	08003b7b 	.word	0x08003b7b
 8003bf0:	08003b7b 	.word	0x08003b7b
 8003bf4:	08003b7b 	.word	0x08003b7b
 8003bf8:	08003cd7 	.word	0x08003cd7
 8003bfc:	08003ca5 	.word	0x08003ca5
 8003c00:	08003c4b 	.word	0x08003c4b
 8003c04:	08003b7b 	.word	0x08003b7b
 8003c08:	08003b7b 	.word	0x08003b7b
 8003c0c:	08003cd3 	.word	0x08003cd3
 8003c10:	08003b7b 	.word	0x08003b7b
 8003c14:	08003cad 	.word	0x08003cad
 8003c18:	08003b7b 	.word	0x08003b7b
 8003c1c:	08003b7b 	.word	0x08003b7b
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	3b45      	subs	r3, #69	; 0x45
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d8a7      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003c2a:	2305      	movs	r3, #5
 8003c2c:	e01f      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4630      	mov	r0, r6
 8003c32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c34:	4798      	blx	r3
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f af67 	beq.w	8003b0a <__ssvfiscanf_r+0x7e>
 8003c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	f040 808d 	bne.w	8003d5e <__ssvfiscanf_r+0x2d2>
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e08f      	b.n	8003d6a <__ssvfiscanf_r+0x2de>
 8003c4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c4c:	f042 0220 	orr.w	r2, r2, #32
 8003c50:	9241      	str	r2, [sp, #260]	; 0x104
 8003c52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	9241      	str	r2, [sp, #260]	; 0x104
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	2b6f      	cmp	r3, #111	; 0x6f
 8003c5e:	bf34      	ite	cc
 8003c60:	2303      	movcc	r3, #3
 8003c62:	2304      	movcs	r3, #4
 8003c64:	9242      	str	r2, [sp, #264]	; 0x108
 8003c66:	e002      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9342      	str	r3, [sp, #264]	; 0x108
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	dd3d      	ble.n	8003cf2 <__ssvfiscanf_r+0x266>
 8003c76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c78:	0659      	lsls	r1, r3, #25
 8003c7a:	d404      	bmi.n	8003c86 <__ssvfiscanf_r+0x1fa>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	5cba      	ldrb	r2, [r7, r2]
 8003c82:	0712      	lsls	r2, r2, #28
 8003c84:	d43c      	bmi.n	8003d00 <__ssvfiscanf_r+0x274>
 8003c86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	dc4b      	bgt.n	8003d24 <__ssvfiscanf_r+0x298>
 8003c8c:	466b      	mov	r3, sp
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4630      	mov	r0, r6
 8003c92:	a941      	add	r1, sp, #260	; 0x104
 8003c94:	f000 fa06 	bl	80040a4 <_scanf_chars>
 8003c98:	2801      	cmp	r0, #1
 8003c9a:	d06a      	beq.n	8003d72 <__ssvfiscanf_r+0x2e6>
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	f47f af1b 	bne.w	8003ad8 <__ssvfiscanf_r+0x4c>
 8003ca2:	e7cb      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	9342      	str	r3, [sp, #264]	; 0x108
 8003ca8:	2304      	movs	r3, #4
 8003caa:	e7e0      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003cac:	220a      	movs	r2, #10
 8003cae:	e7d5      	b.n	8003c5c <__ssvfiscanf_r+0x1d0>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f000 fb42 	bl	800433c <__sccl>
 8003cb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cba:	4605      	mov	r5, r0
 8003cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc0:	9341      	str	r3, [sp, #260]	; 0x104
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e7d3      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003cc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ccc:	9341      	str	r3, [sp, #260]	; 0x104
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e7cd      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e7cb      	b.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003cd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003cd8:	06c3      	lsls	r3, r0, #27
 8003cda:	f53f aefd 	bmi.w	8003ad8 <__ssvfiscanf_r+0x4c>
 8003cde:	9b00      	ldr	r3, [sp, #0]
 8003ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ce2:	1d19      	adds	r1, r3, #4
 8003ce4:	9100      	str	r1, [sp, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	07c0      	lsls	r0, r0, #31
 8003cea:	bf4c      	ite	mi
 8003cec:	801a      	strhmi	r2, [r3, #0]
 8003cee:	601a      	strpl	r2, [r3, #0]
 8003cf0:	e6f2      	b.n	8003ad8 <__ssvfiscanf_r+0x4c>
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cf8:	4798      	blx	r3
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d0bb      	beq.n	8003c76 <__ssvfiscanf_r+0x1ea>
 8003cfe:	e79d      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003d00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d02:	3201      	adds	r2, #1
 8003d04:	9245      	str	r2, [sp, #276]	; 0x114
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	3a01      	subs	r2, #1
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	6062      	str	r2, [r4, #4]
 8003d0e:	dd02      	ble.n	8003d16 <__ssvfiscanf_r+0x28a>
 8003d10:	3301      	adds	r3, #1
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	e7b2      	b.n	8003c7c <__ssvfiscanf_r+0x1f0>
 8003d16:	4621      	mov	r1, r4
 8003d18:	4630      	mov	r0, r6
 8003d1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d1c:	4798      	blx	r3
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0ac      	beq.n	8003c7c <__ssvfiscanf_r+0x1f0>
 8003d22:	e78b      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	dc0f      	bgt.n	8003d48 <__ssvfiscanf_r+0x2bc>
 8003d28:	466b      	mov	r3, sp
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	a941      	add	r1, sp, #260	; 0x104
 8003d30:	f000 fa12 	bl	8004158 <_scanf_i>
 8003d34:	e7b0      	b.n	8003c98 <__ssvfiscanf_r+0x20c>
 8003d36:	bf00      	nop
 8003d38:	080039d9 	.word	0x080039d9
 8003d3c:	08003a53 	.word	0x08003a53
 8003d40:	08004bc5 	.word	0x08004bc5
 8003d44:	08004b7c 	.word	0x08004b7c
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <__ssvfiscanf_r+0x2ec>)
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f aec4 	beq.w	8003ad8 <__ssvfiscanf_r+0x4c>
 8003d50:	466b      	mov	r3, sp
 8003d52:	4622      	mov	r2, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	a941      	add	r1, sp, #260	; 0x104
 8003d58:	f3af 8000 	nop.w
 8003d5c:	e79c      	b.n	8003c98 <__ssvfiscanf_r+0x20c>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d64:	bf18      	it	ne
 8003d66:	f04f 30ff 	movne.w	r0, #4294967295
 8003d6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d74:	e7f9      	b.n	8003d6a <__ssvfiscanf_r+0x2de>
 8003d76:	bf00      	nop
 8003d78:	00000000 	.word	0x00000000

08003d7c <_printf_common>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	4616      	mov	r6, r2
 8003d82:	4699      	mov	r9, r3
 8003d84:	688a      	ldr	r2, [r1, #8]
 8003d86:	690b      	ldr	r3, [r1, #16]
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfb8      	it	lt
 8003d8e:	4613      	movlt	r3, r2
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d96:	460c      	mov	r4, r1
 8003d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d9c:	b10a      	cbz	r2, 8003da2 <_printf_common+0x26>
 8003d9e:	3301      	adds	r3, #1
 8003da0:	6033      	str	r3, [r6, #0]
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	0699      	lsls	r1, r3, #26
 8003da6:	bf42      	ittt	mi
 8003da8:	6833      	ldrmi	r3, [r6, #0]
 8003daa:	3302      	addmi	r3, #2
 8003dac:	6033      	strmi	r3, [r6, #0]
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	f015 0506 	ands.w	r5, r5, #6
 8003db4:	d106      	bne.n	8003dc4 <_printf_common+0x48>
 8003db6:	f104 0a19 	add.w	sl, r4, #25
 8003dba:	68e3      	ldr	r3, [r4, #12]
 8003dbc:	6832      	ldr	r2, [r6, #0]
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	dc2b      	bgt.n	8003e1c <_printf_common+0xa0>
 8003dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dc8:	1e13      	subs	r3, r2, #0
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	bf18      	it	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	0692      	lsls	r2, r2, #26
 8003dd2:	d430      	bmi.n	8003e36 <_printf_common+0xba>
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ddc:	47c0      	blx	r8
 8003dde:	3001      	adds	r0, #1
 8003de0:	d023      	beq.n	8003e2a <_printf_common+0xae>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	6922      	ldr	r2, [r4, #16]
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	bf14      	ite	ne
 8003dee:	2500      	movne	r5, #0
 8003df0:	6833      	ldreq	r3, [r6, #0]
 8003df2:	f04f 0600 	mov.w	r6, #0
 8003df6:	bf08      	it	eq
 8003df8:	68e5      	ldreq	r5, [r4, #12]
 8003dfa:	f104 041a 	add.w	r4, r4, #26
 8003dfe:	bf08      	it	eq
 8003e00:	1aed      	subeq	r5, r5, r3
 8003e02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e06:	bf08      	it	eq
 8003e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bfc4      	itt	gt
 8003e10:	1a9b      	subgt	r3, r3, r2
 8003e12:	18ed      	addgt	r5, r5, r3
 8003e14:	42b5      	cmp	r5, r6
 8003e16:	d11a      	bne.n	8003e4e <_printf_common+0xd2>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e008      	b.n	8003e2e <_printf_common+0xb2>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4652      	mov	r2, sl
 8003e20:	4649      	mov	r1, r9
 8003e22:	4638      	mov	r0, r7
 8003e24:	47c0      	blx	r8
 8003e26:	3001      	adds	r0, #1
 8003e28:	d103      	bne.n	8003e32 <_printf_common+0xb6>
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e32:	3501      	adds	r5, #1
 8003e34:	e7c1      	b.n	8003dba <_printf_common+0x3e>
 8003e36:	2030      	movs	r0, #48	; 0x30
 8003e38:	18e1      	adds	r1, r4, r3
 8003e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e44:	4422      	add	r2, r4
 8003e46:	3302      	adds	r3, #2
 8003e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e4c:	e7c2      	b.n	8003dd4 <_printf_common+0x58>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4622      	mov	r2, r4
 8003e52:	4649      	mov	r1, r9
 8003e54:	4638      	mov	r0, r7
 8003e56:	47c0      	blx	r8
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d0e6      	beq.n	8003e2a <_printf_common+0xae>
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7d9      	b.n	8003e14 <_printf_common+0x98>

08003e60 <_printf_i>:
 8003e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	7e0f      	ldrb	r7, [r1, #24]
 8003e66:	4691      	mov	r9, r2
 8003e68:	2f78      	cmp	r7, #120	; 0x78
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	469a      	mov	sl, r3
 8003e70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e76:	d807      	bhi.n	8003e88 <_printf_i+0x28>
 8003e78:	2f62      	cmp	r7, #98	; 0x62
 8003e7a:	d80a      	bhi.n	8003e92 <_printf_i+0x32>
 8003e7c:	2f00      	cmp	r7, #0
 8003e7e:	f000 80d5 	beq.w	800402c <_printf_i+0x1cc>
 8003e82:	2f58      	cmp	r7, #88	; 0x58
 8003e84:	f000 80c1 	beq.w	800400a <_printf_i+0x1aa>
 8003e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e90:	e03a      	b.n	8003f08 <_printf_i+0xa8>
 8003e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e96:	2b15      	cmp	r3, #21
 8003e98:	d8f6      	bhi.n	8003e88 <_printf_i+0x28>
 8003e9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ea0 <_printf_i+0x40>)
 8003e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003f0d 	.word	0x08003f0d
 8003ea8:	08003e89 	.word	0x08003e89
 8003eac:	08003e89 	.word	0x08003e89
 8003eb0:	08003e89 	.word	0x08003e89
 8003eb4:	08003e89 	.word	0x08003e89
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08003e89 	.word	0x08003e89
 8003ec0:	08003e89 	.word	0x08003e89
 8003ec4:	08003e89 	.word	0x08003e89
 8003ec8:	08003e89 	.word	0x08003e89
 8003ecc:	08004013 	.word	0x08004013
 8003ed0:	08003f39 	.word	0x08003f39
 8003ed4:	08003fcd 	.word	0x08003fcd
 8003ed8:	08003e89 	.word	0x08003e89
 8003edc:	08003e89 	.word	0x08003e89
 8003ee0:	08004035 	.word	0x08004035
 8003ee4:	08003e89 	.word	0x08003e89
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003e89 	.word	0x08003e89
 8003ef0:	08003e89 	.word	0x08003e89
 8003ef4:	08003fd5 	.word	0x08003fd5
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	602a      	str	r2, [r5, #0]
 8003f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0a0      	b.n	800404e <_printf_i+0x1ee>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	0607      	lsls	r7, r0, #24
 8003f12:	f103 0104 	add.w	r1, r3, #4
 8003f16:	6029      	str	r1, [r5, #0]
 8003f18:	d501      	bpl.n	8003f1e <_printf_i+0xbe>
 8003f1a:	681e      	ldr	r6, [r3, #0]
 8003f1c:	e003      	b.n	8003f26 <_printf_i+0xc6>
 8003f1e:	0646      	lsls	r6, r0, #25
 8003f20:	d5fb      	bpl.n	8003f1a <_printf_i+0xba>
 8003f22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f26:	2e00      	cmp	r6, #0
 8003f28:	da03      	bge.n	8003f32 <_printf_i+0xd2>
 8003f2a:	232d      	movs	r3, #45	; 0x2d
 8003f2c:	4276      	negs	r6, r6
 8003f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f32:	230a      	movs	r3, #10
 8003f34:	4859      	ldr	r0, [pc, #356]	; (800409c <_printf_i+0x23c>)
 8003f36:	e012      	b.n	8003f5e <_printf_i+0xfe>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	1d19      	adds	r1, r3, #4
 8003f3e:	6029      	str	r1, [r5, #0]
 8003f40:	0605      	lsls	r5, r0, #24
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0xe8>
 8003f44:	681e      	ldr	r6, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0xee>
 8003f48:	0641      	lsls	r1, r0, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0xe4>
 8003f4c:	881e      	ldrh	r6, [r3, #0]
 8003f4e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f50:	bf0c      	ite	eq
 8003f52:	2308      	moveq	r3, #8
 8003f54:	230a      	movne	r3, #10
 8003f56:	4851      	ldr	r0, [pc, #324]	; (800409c <_printf_i+0x23c>)
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f5e:	6865      	ldr	r5, [r4, #4]
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	bfa8      	it	ge
 8003f64:	6821      	ldrge	r1, [r4, #0]
 8003f66:	60a5      	str	r5, [r4, #8]
 8003f68:	bfa4      	itt	ge
 8003f6a:	f021 0104 	bicge.w	r1, r1, #4
 8003f6e:	6021      	strge	r1, [r4, #0]
 8003f70:	b90e      	cbnz	r6, 8003f76 <_printf_i+0x116>
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	d04b      	beq.n	800400e <_printf_i+0x1ae>
 8003f76:	4615      	mov	r5, r2
 8003f78:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f7c:	fb03 6711 	mls	r7, r3, r1, r6
 8003f80:	5dc7      	ldrb	r7, [r0, r7]
 8003f82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f86:	4637      	mov	r7, r6
 8003f88:	42bb      	cmp	r3, r7
 8003f8a:	460e      	mov	r6, r1
 8003f8c:	d9f4      	bls.n	8003f78 <_printf_i+0x118>
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d10b      	bne.n	8003faa <_printf_i+0x14a>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	07de      	lsls	r6, r3, #31
 8003f96:	d508      	bpl.n	8003faa <_printf_i+0x14a>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	6861      	ldr	r1, [r4, #4]
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	bfde      	ittt	le
 8003fa0:	2330      	movle	r3, #48	; 0x30
 8003fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003faa:	1b52      	subs	r2, r2, r5
 8003fac:	6122      	str	r2, [r4, #16]
 8003fae:	464b      	mov	r3, r9
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	f8cd a000 	str.w	sl, [sp]
 8003fb8:	aa03      	add	r2, sp, #12
 8003fba:	f7ff fedf 	bl	8003d7c <_printf_common>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d14a      	bne.n	8004058 <_printf_i+0x1f8>
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	b004      	add	sp, #16
 8003fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	2778      	movs	r7, #120	; 0x78
 8003fd6:	4832      	ldr	r0, [pc, #200]	; (80040a0 <_printf_i+0x240>)
 8003fd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	6829      	ldr	r1, [r5, #0]
 8003fe0:	061f      	lsls	r7, r3, #24
 8003fe2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fe6:	d402      	bmi.n	8003fee <_printf_i+0x18e>
 8003fe8:	065f      	lsls	r7, r3, #25
 8003fea:	bf48      	it	mi
 8003fec:	b2b6      	uxthmi	r6, r6
 8003fee:	07df      	lsls	r7, r3, #31
 8003ff0:	bf48      	it	mi
 8003ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ff6:	6029      	str	r1, [r5, #0]
 8003ff8:	bf48      	it	mi
 8003ffa:	6023      	strmi	r3, [r4, #0]
 8003ffc:	b91e      	cbnz	r6, 8004006 <_printf_i+0x1a6>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f023 0320 	bic.w	r3, r3, #32
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	2310      	movs	r3, #16
 8004008:	e7a6      	b.n	8003f58 <_printf_i+0xf8>
 800400a:	4824      	ldr	r0, [pc, #144]	; (800409c <_printf_i+0x23c>)
 800400c:	e7e4      	b.n	8003fd8 <_printf_i+0x178>
 800400e:	4615      	mov	r5, r2
 8004010:	e7bd      	b.n	8003f8e <_printf_i+0x12e>
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	6826      	ldr	r6, [r4, #0]
 8004016:	1d18      	adds	r0, r3, #4
 8004018:	6961      	ldr	r1, [r4, #20]
 800401a:	6028      	str	r0, [r5, #0]
 800401c:	0635      	lsls	r5, r6, #24
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	d501      	bpl.n	8004026 <_printf_i+0x1c6>
 8004022:	6019      	str	r1, [r3, #0]
 8004024:	e002      	b.n	800402c <_printf_i+0x1cc>
 8004026:	0670      	lsls	r0, r6, #25
 8004028:	d5fb      	bpl.n	8004022 <_printf_i+0x1c2>
 800402a:	8019      	strh	r1, [r3, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	4615      	mov	r5, r2
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	e7bc      	b.n	8003fae <_printf_i+0x14e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	2100      	movs	r1, #0
 8004038:	1d1a      	adds	r2, r3, #4
 800403a:	602a      	str	r2, [r5, #0]
 800403c:	681d      	ldr	r5, [r3, #0]
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	4628      	mov	r0, r5
 8004042:	f000 fa17 	bl	8004474 <memchr>
 8004046:	b108      	cbz	r0, 800404c <_printf_i+0x1ec>
 8004048:	1b40      	subs	r0, r0, r5
 800404a:	6060      	str	r0, [r4, #4]
 800404c:	6863      	ldr	r3, [r4, #4]
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	2300      	movs	r3, #0
 8004052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004056:	e7aa      	b.n	8003fae <_printf_i+0x14e>
 8004058:	462a      	mov	r2, r5
 800405a:	4649      	mov	r1, r9
 800405c:	4640      	mov	r0, r8
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	47d0      	blx	sl
 8004062:	3001      	adds	r0, #1
 8004064:	d0ad      	beq.n	8003fc2 <_printf_i+0x162>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	079b      	lsls	r3, r3, #30
 800406a:	d413      	bmi.n	8004094 <_printf_i+0x234>
 800406c:	68e0      	ldr	r0, [r4, #12]
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	4298      	cmp	r0, r3
 8004072:	bfb8      	it	lt
 8004074:	4618      	movlt	r0, r3
 8004076:	e7a6      	b.n	8003fc6 <_printf_i+0x166>
 8004078:	2301      	movs	r3, #1
 800407a:	4632      	mov	r2, r6
 800407c:	4649      	mov	r1, r9
 800407e:	4640      	mov	r0, r8
 8004080:	47d0      	blx	sl
 8004082:	3001      	adds	r0, #1
 8004084:	d09d      	beq.n	8003fc2 <_printf_i+0x162>
 8004086:	3501      	adds	r5, #1
 8004088:	68e3      	ldr	r3, [r4, #12]
 800408a:	9903      	ldr	r1, [sp, #12]
 800408c:	1a5b      	subs	r3, r3, r1
 800408e:	42ab      	cmp	r3, r5
 8004090:	dcf2      	bgt.n	8004078 <_printf_i+0x218>
 8004092:	e7eb      	b.n	800406c <_printf_i+0x20c>
 8004094:	2500      	movs	r5, #0
 8004096:	f104 0619 	add.w	r6, r4, #25
 800409a:	e7f5      	b.n	8004088 <_printf_i+0x228>
 800409c:	08004b87 	.word	0x08004b87
 80040a0:	08004b98 	.word	0x08004b98

080040a4 <_scanf_chars>:
 80040a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a8:	4615      	mov	r5, r2
 80040aa:	688a      	ldr	r2, [r1, #8]
 80040ac:	4680      	mov	r8, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	b932      	cbnz	r2, 80040c0 <_scanf_chars+0x1c>
 80040b2:	698a      	ldr	r2, [r1, #24]
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2201      	moveq	r2, #1
 80040ba:	f04f 32ff 	movne.w	r2, #4294967295
 80040be:	608a      	str	r2, [r1, #8]
 80040c0:	2700      	movs	r7, #0
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004154 <_scanf_chars+0xb0>
 80040c8:	06d1      	lsls	r1, r2, #27
 80040ca:	bf5f      	itttt	pl
 80040cc:	681a      	ldrpl	r2, [r3, #0]
 80040ce:	1d11      	addpl	r1, r2, #4
 80040d0:	6019      	strpl	r1, [r3, #0]
 80040d2:	6816      	ldrpl	r6, [r2, #0]
 80040d4:	69a0      	ldr	r0, [r4, #24]
 80040d6:	b188      	cbz	r0, 80040fc <_scanf_chars+0x58>
 80040d8:	2801      	cmp	r0, #1
 80040da:	d107      	bne.n	80040ec <_scanf_chars+0x48>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	6963      	ldr	r3, [r4, #20]
 80040e2:	5c9b      	ldrb	r3, [r3, r2]
 80040e4:	b953      	cbnz	r3, 80040fc <_scanf_chars+0x58>
 80040e6:	2f00      	cmp	r7, #0
 80040e8:	d031      	beq.n	800414e <_scanf_chars+0xaa>
 80040ea:	e022      	b.n	8004132 <_scanf_chars+0x8e>
 80040ec:	2802      	cmp	r0, #2
 80040ee:	d120      	bne.n	8004132 <_scanf_chars+0x8e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	d41a      	bmi.n	8004132 <_scanf_chars+0x8e>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	3701      	adds	r7, #1
 8004100:	06da      	lsls	r2, r3, #27
 8004102:	bf5e      	ittt	pl
 8004104:	682b      	ldrpl	r3, [r5, #0]
 8004106:	781b      	ldrbpl	r3, [r3, #0]
 8004108:	f806 3b01 	strbpl.w	r3, [r6], #1
 800410c:	682a      	ldr	r2, [r5, #0]
 800410e:	686b      	ldr	r3, [r5, #4]
 8004110:	3201      	adds	r2, #1
 8004112:	602a      	str	r2, [r5, #0]
 8004114:	68a2      	ldr	r2, [r4, #8]
 8004116:	3b01      	subs	r3, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	606b      	str	r3, [r5, #4]
 800411c:	60a2      	str	r2, [r4, #8]
 800411e:	b142      	cbz	r2, 8004132 <_scanf_chars+0x8e>
 8004120:	2b00      	cmp	r3, #0
 8004122:	dcd7      	bgt.n	80040d4 <_scanf_chars+0x30>
 8004124:	4629      	mov	r1, r5
 8004126:	4640      	mov	r0, r8
 8004128:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800412c:	4798      	blx	r3
 800412e:	2800      	cmp	r0, #0
 8004130:	d0d0      	beq.n	80040d4 <_scanf_chars+0x30>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f013 0310 	ands.w	r3, r3, #16
 8004138:	d105      	bne.n	8004146 <_scanf_chars+0xa2>
 800413a:	68e2      	ldr	r2, [r4, #12]
 800413c:	3201      	adds	r2, #1
 800413e:	60e2      	str	r2, [r4, #12]
 8004140:	69a2      	ldr	r2, [r4, #24]
 8004142:	b102      	cbz	r2, 8004146 <_scanf_chars+0xa2>
 8004144:	7033      	strb	r3, [r6, #0]
 8004146:	2000      	movs	r0, #0
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	443b      	add	r3, r7
 800414c:	6123      	str	r3, [r4, #16]
 800414e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004152:	bf00      	nop
 8004154:	08004bc5 	.word	0x08004bc5

08004158 <_scanf_i>:
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	460c      	mov	r4, r1
 800415e:	4698      	mov	r8, r3
 8004160:	4b72      	ldr	r3, [pc, #456]	; (800432c <_scanf_i+0x1d4>)
 8004162:	b087      	sub	sp, #28
 8004164:	4682      	mov	sl, r0
 8004166:	4616      	mov	r6, r2
 8004168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800416c:	ab03      	add	r3, sp, #12
 800416e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004172:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <_scanf_i+0x1d8>)
 8004174:	69a1      	ldr	r1, [r4, #24]
 8004176:	4a6f      	ldr	r2, [pc, #444]	; (8004334 <_scanf_i+0x1dc>)
 8004178:	4627      	mov	r7, r4
 800417a:	2903      	cmp	r1, #3
 800417c:	bf18      	it	ne
 800417e:	461a      	movne	r2, r3
 8004180:	68a3      	ldr	r3, [r4, #8]
 8004182:	9201      	str	r2, [sp, #4]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800418a:	bf81      	itttt	hi
 800418c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004190:	eb03 0905 	addhi.w	r9, r3, r5
 8004194:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004198:	60a3      	strhi	r3, [r4, #8]
 800419a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800419e:	bf98      	it	ls
 80041a0:	f04f 0900 	movls.w	r9, #0
 80041a4:	463d      	mov	r5, r7
 80041a6:	f04f 0b00 	mov.w	fp, #0
 80041aa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	6831      	ldr	r1, [r6, #0]
 80041b2:	ab03      	add	r3, sp, #12
 80041b4:	2202      	movs	r2, #2
 80041b6:	7809      	ldrb	r1, [r1, #0]
 80041b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80041bc:	f000 f95a 	bl	8004474 <memchr>
 80041c0:	b328      	cbz	r0, 800420e <_scanf_i+0xb6>
 80041c2:	f1bb 0f01 	cmp.w	fp, #1
 80041c6:	d159      	bne.n	800427c <_scanf_i+0x124>
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	b92a      	cbnz	r2, 80041d8 <_scanf_i+0x80>
 80041cc:	2308      	movs	r3, #8
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	6022      	str	r2, [r4, #0]
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	68a2      	ldr	r2, [r4, #8]
 80041e2:	1e51      	subs	r1, r2, #1
 80041e4:	60a1      	str	r1, [r4, #8]
 80041e6:	b192      	cbz	r2, 800420e <_scanf_i+0xb6>
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	1c51      	adds	r1, r2, #1
 80041ec:	6031      	str	r1, [r6, #0]
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	f805 2b01 	strb.w	r2, [r5], #1
 80041f4:	6872      	ldr	r2, [r6, #4]
 80041f6:	3a01      	subs	r2, #1
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	6072      	str	r2, [r6, #4]
 80041fc:	dc07      	bgt.n	800420e <_scanf_i+0xb6>
 80041fe:	4631      	mov	r1, r6
 8004200:	4650      	mov	r0, sl
 8004202:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004206:	4790      	blx	r2
 8004208:	2800      	cmp	r0, #0
 800420a:	f040 8085 	bne.w	8004318 <_scanf_i+0x1c0>
 800420e:	f10b 0b01 	add.w	fp, fp, #1
 8004212:	f1bb 0f03 	cmp.w	fp, #3
 8004216:	d1cb      	bne.n	80041b0 <_scanf_i+0x58>
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	b90b      	cbnz	r3, 8004220 <_scanf_i+0xc8>
 800421c:	230a      	movs	r3, #10
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	4945      	ldr	r1, [pc, #276]	; (8004338 <_scanf_i+0x1e0>)
 8004224:	6960      	ldr	r0, [r4, #20]
 8004226:	1ac9      	subs	r1, r1, r3
 8004228:	f000 f888 	bl	800433c <__sccl>
 800422c:	f04f 0b00 	mov.w	fp, #0
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03d      	beq.n	80042b4 <_scanf_i+0x15c>
 8004238:	6831      	ldr	r1, [r6, #0]
 800423a:	6960      	ldr	r0, [r4, #20]
 800423c:	f891 c000 	ldrb.w	ip, [r1]
 8004240:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004244:	2800      	cmp	r0, #0
 8004246:	d035      	beq.n	80042b4 <_scanf_i+0x15c>
 8004248:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800424c:	d124      	bne.n	8004298 <_scanf_i+0x140>
 800424e:	0510      	lsls	r0, r2, #20
 8004250:	d522      	bpl.n	8004298 <_scanf_i+0x140>
 8004252:	f10b 0b01 	add.w	fp, fp, #1
 8004256:	f1b9 0f00 	cmp.w	r9, #0
 800425a:	d003      	beq.n	8004264 <_scanf_i+0x10c>
 800425c:	3301      	adds	r3, #1
 800425e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	6873      	ldr	r3, [r6, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	6073      	str	r3, [r6, #4]
 800426c:	dd1b      	ble.n	80042a6 <_scanf_i+0x14e>
 800426e:	6833      	ldr	r3, [r6, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	e7d9      	b.n	8004230 <_scanf_i+0xd8>
 800427c:	f1bb 0f02 	cmp.w	fp, #2
 8004280:	d1ae      	bne.n	80041e0 <_scanf_i+0x88>
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004288:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800428c:	d1bf      	bne.n	800420e <_scanf_i+0xb6>
 800428e:	2310      	movs	r3, #16
 8004290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	e7a2      	b.n	80041de <_scanf_i+0x86>
 8004298:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	780b      	ldrb	r3, [r1, #0]
 80042a0:	f805 3b01 	strb.w	r3, [r5], #1
 80042a4:	e7de      	b.n	8004264 <_scanf_i+0x10c>
 80042a6:	4631      	mov	r1, r6
 80042a8:	4650      	mov	r0, sl
 80042aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042ae:	4798      	blx	r3
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0df      	beq.n	8004274 <_scanf_i+0x11c>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	05d9      	lsls	r1, r3, #23
 80042b8:	d50d      	bpl.n	80042d6 <_scanf_i+0x17e>
 80042ba:	42bd      	cmp	r5, r7
 80042bc:	d909      	bls.n	80042d2 <_scanf_i+0x17a>
 80042be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80042c2:	4632      	mov	r2, r6
 80042c4:	4650      	mov	r0, sl
 80042c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80042ce:	4798      	blx	r3
 80042d0:	464d      	mov	r5, r9
 80042d2:	42bd      	cmp	r5, r7
 80042d4:	d028      	beq.n	8004328 <_scanf_i+0x1d0>
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	f012 0210 	ands.w	r2, r2, #16
 80042dc:	d113      	bne.n	8004306 <_scanf_i+0x1ae>
 80042de:	702a      	strb	r2, [r5, #0]
 80042e0:	4639      	mov	r1, r7
 80042e2:	6863      	ldr	r3, [r4, #4]
 80042e4:	4650      	mov	r0, sl
 80042e6:	9e01      	ldr	r6, [sp, #4]
 80042e8:	47b0      	blx	r6
 80042ea:	f8d8 3000 	ldr.w	r3, [r8]
 80042ee:	6821      	ldr	r1, [r4, #0]
 80042f0:	1d1a      	adds	r2, r3, #4
 80042f2:	f8c8 2000 	str.w	r2, [r8]
 80042f6:	f011 0f20 	tst.w	r1, #32
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	d00f      	beq.n	800431e <_scanf_i+0x1c6>
 80042fe:	6018      	str	r0, [r3, #0]
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60e3      	str	r3, [r4, #12]
 8004306:	2000      	movs	r0, #0
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	1bed      	subs	r5, r5, r7
 800430c:	445d      	add	r5, fp
 800430e:	442b      	add	r3, r5
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	b007      	add	sp, #28
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004318:	f04f 0b00 	mov.w	fp, #0
 800431c:	e7ca      	b.n	80042b4 <_scanf_i+0x15c>
 800431e:	07ca      	lsls	r2, r1, #31
 8004320:	bf4c      	ite	mi
 8004322:	8018      	strhmi	r0, [r3, #0]
 8004324:	6018      	strpl	r0, [r3, #0]
 8004326:	e7eb      	b.n	8004300 <_scanf_i+0x1a8>
 8004328:	2001      	movs	r0, #1
 800432a:	e7f2      	b.n	8004312 <_scanf_i+0x1ba>
 800432c:	08004b40 	.word	0x08004b40
 8004330:	080046d5 	.word	0x080046d5
 8004334:	080045ed 	.word	0x080045ed
 8004338:	08004bb9 	.word	0x08004bb9

0800433c <__sccl>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	780b      	ldrb	r3, [r1, #0]
 8004340:	4604      	mov	r4, r0
 8004342:	2b5e      	cmp	r3, #94	; 0x5e
 8004344:	bf0b      	itete	eq
 8004346:	784b      	ldrbeq	r3, [r1, #1]
 8004348:	1c4a      	addne	r2, r1, #1
 800434a:	1c8a      	addeq	r2, r1, #2
 800434c:	2100      	movne	r1, #0
 800434e:	bf08      	it	eq
 8004350:	2101      	moveq	r1, #1
 8004352:	3801      	subs	r0, #1
 8004354:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004358:	f800 1f01 	strb.w	r1, [r0, #1]!
 800435c:	42a8      	cmp	r0, r5
 800435e:	d1fb      	bne.n	8004358 <__sccl+0x1c>
 8004360:	b90b      	cbnz	r3, 8004366 <__sccl+0x2a>
 8004362:	1e50      	subs	r0, r2, #1
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	f081 0101 	eor.w	r1, r1, #1
 800436a:	4610      	mov	r0, r2
 800436c:	54e1      	strb	r1, [r4, r3]
 800436e:	4602      	mov	r2, r0
 8004370:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004374:	2d2d      	cmp	r5, #45	; 0x2d
 8004376:	d005      	beq.n	8004384 <__sccl+0x48>
 8004378:	2d5d      	cmp	r5, #93	; 0x5d
 800437a:	d016      	beq.n	80043aa <__sccl+0x6e>
 800437c:	2d00      	cmp	r5, #0
 800437e:	d0f1      	beq.n	8004364 <__sccl+0x28>
 8004380:	462b      	mov	r3, r5
 8004382:	e7f2      	b.n	800436a <__sccl+0x2e>
 8004384:	7846      	ldrb	r6, [r0, #1]
 8004386:	2e5d      	cmp	r6, #93	; 0x5d
 8004388:	d0fa      	beq.n	8004380 <__sccl+0x44>
 800438a:	42b3      	cmp	r3, r6
 800438c:	dcf8      	bgt.n	8004380 <__sccl+0x44>
 800438e:	461a      	mov	r2, r3
 8004390:	3002      	adds	r0, #2
 8004392:	3201      	adds	r2, #1
 8004394:	4296      	cmp	r6, r2
 8004396:	54a1      	strb	r1, [r4, r2]
 8004398:	dcfb      	bgt.n	8004392 <__sccl+0x56>
 800439a:	1af2      	subs	r2, r6, r3
 800439c:	3a01      	subs	r2, #1
 800439e:	42b3      	cmp	r3, r6
 80043a0:	bfa8      	it	ge
 80043a2:	2200      	movge	r2, #0
 80043a4:	1c5d      	adds	r5, r3, #1
 80043a6:	18ab      	adds	r3, r5, r2
 80043a8:	e7e1      	b.n	800436e <__sccl+0x32>
 80043aa:	4610      	mov	r0, r2
 80043ac:	e7da      	b.n	8004364 <__sccl+0x28>

080043ae <__submore>:
 80043ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	460c      	mov	r4, r1
 80043b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80043b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ba:	4299      	cmp	r1, r3
 80043bc:	d11b      	bne.n	80043f6 <__submore+0x48>
 80043be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043c2:	f7ff f925 	bl	8003610 <_malloc_r>
 80043c6:	b918      	cbnz	r0, 80043d0 <__submore+0x22>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80043d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80043da:	6360      	str	r0, [r4, #52]	; 0x34
 80043dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80043e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043e4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80043e8:	7043      	strb	r3, [r0, #1]
 80043ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043ee:	7003      	strb	r3, [r0, #0]
 80043f0:	6020      	str	r0, [r4, #0]
 80043f2:	2000      	movs	r0, #0
 80043f4:	e7ea      	b.n	80043cc <__submore+0x1e>
 80043f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80043f8:	0077      	lsls	r7, r6, #1
 80043fa:	463a      	mov	r2, r7
 80043fc:	f000 f848 	bl	8004490 <_realloc_r>
 8004400:	4605      	mov	r5, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d0e0      	beq.n	80043c8 <__submore+0x1a>
 8004406:	eb00 0806 	add.w	r8, r0, r6
 800440a:	4601      	mov	r1, r0
 800440c:	4632      	mov	r2, r6
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff f888 	bl	8003524 <memcpy>
 8004414:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004418:	f8c4 8000 	str.w	r8, [r4]
 800441c:	e7e9      	b.n	80043f2 <__submore+0x44>

0800441e <memmove>:
 800441e:	4288      	cmp	r0, r1
 8004420:	b510      	push	{r4, lr}
 8004422:	eb01 0402 	add.w	r4, r1, r2
 8004426:	d902      	bls.n	800442e <memmove+0x10>
 8004428:	4284      	cmp	r4, r0
 800442a:	4623      	mov	r3, r4
 800442c:	d807      	bhi.n	800443e <memmove+0x20>
 800442e:	1e43      	subs	r3, r0, #1
 8004430:	42a1      	cmp	r1, r4
 8004432:	d008      	beq.n	8004446 <memmove+0x28>
 8004434:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004438:	f803 2f01 	strb.w	r2, [r3, #1]!
 800443c:	e7f8      	b.n	8004430 <memmove+0x12>
 800443e:	4601      	mov	r1, r0
 8004440:	4402      	add	r2, r0
 8004442:	428a      	cmp	r2, r1
 8004444:	d100      	bne.n	8004448 <memmove+0x2a>
 8004446:	bd10      	pop	{r4, pc}
 8004448:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800444c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004450:	e7f7      	b.n	8004442 <memmove+0x24>
	...

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	2300      	movs	r3, #0
 8004458:	4d05      	ldr	r5, [pc, #20]	; (8004470 <_sbrk_r+0x1c>)
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	f7fc fca6 	bl	8000db0 <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	200003a8 	.word	0x200003a8

08004474 <memchr>:
 8004474:	4603      	mov	r3, r0
 8004476:	b510      	push	{r4, lr}
 8004478:	b2c9      	uxtb	r1, r1
 800447a:	4402      	add	r2, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	4618      	mov	r0, r3
 8004480:	d101      	bne.n	8004486 <memchr+0x12>
 8004482:	2000      	movs	r0, #0
 8004484:	e003      	b.n	800448e <memchr+0x1a>
 8004486:	7804      	ldrb	r4, [r0, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	428c      	cmp	r4, r1
 800448c:	d1f6      	bne.n	800447c <memchr+0x8>
 800448e:	bd10      	pop	{r4, pc}

08004490 <_realloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	4680      	mov	r8, r0
 8004496:	4614      	mov	r4, r2
 8004498:	460e      	mov	r6, r1
 800449a:	b921      	cbnz	r1, 80044a6 <_realloc_r+0x16>
 800449c:	4611      	mov	r1, r2
 800449e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a2:	f7ff b8b5 	b.w	8003610 <_malloc_r>
 80044a6:	b92a      	cbnz	r2, 80044b4 <_realloc_r+0x24>
 80044a8:	f7ff f84a 	bl	8003540 <_free_r>
 80044ac:	4625      	mov	r5, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	f000 f910 	bl	80046d8 <_malloc_usable_size_r>
 80044b8:	4284      	cmp	r4, r0
 80044ba:	4607      	mov	r7, r0
 80044bc:	d802      	bhi.n	80044c4 <_realloc_r+0x34>
 80044be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044c2:	d812      	bhi.n	80044ea <_realloc_r+0x5a>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f7ff f8a2 	bl	8003610 <_malloc_r>
 80044cc:	4605      	mov	r5, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d0ed      	beq.n	80044ae <_realloc_r+0x1e>
 80044d2:	42bc      	cmp	r4, r7
 80044d4:	4622      	mov	r2, r4
 80044d6:	4631      	mov	r1, r6
 80044d8:	bf28      	it	cs
 80044da:	463a      	movcs	r2, r7
 80044dc:	f7ff f822 	bl	8003524 <memcpy>
 80044e0:	4631      	mov	r1, r6
 80044e2:	4640      	mov	r0, r8
 80044e4:	f7ff f82c 	bl	8003540 <_free_r>
 80044e8:	e7e1      	b.n	80044ae <_realloc_r+0x1e>
 80044ea:	4635      	mov	r5, r6
 80044ec:	e7df      	b.n	80044ae <_realloc_r+0x1e>
	...

080044f0 <_strtol_l.constprop.0>:
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f6:	4686      	mov	lr, r0
 80044f8:	4690      	mov	r8, r2
 80044fa:	d001      	beq.n	8004500 <_strtol_l.constprop.0+0x10>
 80044fc:	2b24      	cmp	r3, #36	; 0x24
 80044fe:	d906      	bls.n	800450e <_strtol_l.constprop.0+0x1e>
 8004500:	f7fe ffe4 	bl	80034cc <__errno>
 8004504:	2316      	movs	r3, #22
 8004506:	6003      	str	r3, [r0, #0]
 8004508:	2000      	movs	r0, #0
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	460d      	mov	r5, r1
 8004510:	4835      	ldr	r0, [pc, #212]	; (80045e8 <_strtol_l.constprop.0+0xf8>)
 8004512:	462a      	mov	r2, r5
 8004514:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004518:	5d06      	ldrb	r6, [r0, r4]
 800451a:	f016 0608 	ands.w	r6, r6, #8
 800451e:	d1f8      	bne.n	8004512 <_strtol_l.constprop.0+0x22>
 8004520:	2c2d      	cmp	r4, #45	; 0x2d
 8004522:	d12e      	bne.n	8004582 <_strtol_l.constprop.0+0x92>
 8004524:	2601      	movs	r6, #1
 8004526:	782c      	ldrb	r4, [r5, #0]
 8004528:	1c95      	adds	r5, r2, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d057      	beq.n	80045de <_strtol_l.constprop.0+0xee>
 800452e:	2b10      	cmp	r3, #16
 8004530:	d109      	bne.n	8004546 <_strtol_l.constprop.0+0x56>
 8004532:	2c30      	cmp	r4, #48	; 0x30
 8004534:	d107      	bne.n	8004546 <_strtol_l.constprop.0+0x56>
 8004536:	782a      	ldrb	r2, [r5, #0]
 8004538:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800453c:	2a58      	cmp	r2, #88	; 0x58
 800453e:	d149      	bne.n	80045d4 <_strtol_l.constprop.0+0xe4>
 8004540:	2310      	movs	r3, #16
 8004542:	786c      	ldrb	r4, [r5, #1]
 8004544:	3502      	adds	r5, #2
 8004546:	2200      	movs	r2, #0
 8004548:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800454c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004550:	fbbc f9f3 	udiv	r9, ip, r3
 8004554:	4610      	mov	r0, r2
 8004556:	fb03 ca19 	mls	sl, r3, r9, ip
 800455a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800455e:	2f09      	cmp	r7, #9
 8004560:	d814      	bhi.n	800458c <_strtol_l.constprop.0+0x9c>
 8004562:	463c      	mov	r4, r7
 8004564:	42a3      	cmp	r3, r4
 8004566:	dd20      	ble.n	80045aa <_strtol_l.constprop.0+0xba>
 8004568:	1c57      	adds	r7, r2, #1
 800456a:	d007      	beq.n	800457c <_strtol_l.constprop.0+0x8c>
 800456c:	4581      	cmp	r9, r0
 800456e:	d319      	bcc.n	80045a4 <_strtol_l.constprop.0+0xb4>
 8004570:	d101      	bne.n	8004576 <_strtol_l.constprop.0+0x86>
 8004572:	45a2      	cmp	sl, r4
 8004574:	db16      	blt.n	80045a4 <_strtol_l.constprop.0+0xb4>
 8004576:	2201      	movs	r2, #1
 8004578:	fb00 4003 	mla	r0, r0, r3, r4
 800457c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004580:	e7eb      	b.n	800455a <_strtol_l.constprop.0+0x6a>
 8004582:	2c2b      	cmp	r4, #43	; 0x2b
 8004584:	bf04      	itt	eq
 8004586:	782c      	ldrbeq	r4, [r5, #0]
 8004588:	1c95      	addeq	r5, r2, #2
 800458a:	e7ce      	b.n	800452a <_strtol_l.constprop.0+0x3a>
 800458c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004590:	2f19      	cmp	r7, #25
 8004592:	d801      	bhi.n	8004598 <_strtol_l.constprop.0+0xa8>
 8004594:	3c37      	subs	r4, #55	; 0x37
 8004596:	e7e5      	b.n	8004564 <_strtol_l.constprop.0+0x74>
 8004598:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800459c:	2f19      	cmp	r7, #25
 800459e:	d804      	bhi.n	80045aa <_strtol_l.constprop.0+0xba>
 80045a0:	3c57      	subs	r4, #87	; 0x57
 80045a2:	e7df      	b.n	8004564 <_strtol_l.constprop.0+0x74>
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	e7e8      	b.n	800457c <_strtol_l.constprop.0+0x8c>
 80045aa:	1c53      	adds	r3, r2, #1
 80045ac:	d108      	bne.n	80045c0 <_strtol_l.constprop.0+0xd0>
 80045ae:	2322      	movs	r3, #34	; 0x22
 80045b0:	4660      	mov	r0, ip
 80045b2:	f8ce 3000 	str.w	r3, [lr]
 80045b6:	f1b8 0f00 	cmp.w	r8, #0
 80045ba:	d0a6      	beq.n	800450a <_strtol_l.constprop.0+0x1a>
 80045bc:	1e69      	subs	r1, r5, #1
 80045be:	e006      	b.n	80045ce <_strtol_l.constprop.0+0xde>
 80045c0:	b106      	cbz	r6, 80045c4 <_strtol_l.constprop.0+0xd4>
 80045c2:	4240      	negs	r0, r0
 80045c4:	f1b8 0f00 	cmp.w	r8, #0
 80045c8:	d09f      	beq.n	800450a <_strtol_l.constprop.0+0x1a>
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d1f6      	bne.n	80045bc <_strtol_l.constprop.0+0xcc>
 80045ce:	f8c8 1000 	str.w	r1, [r8]
 80045d2:	e79a      	b.n	800450a <_strtol_l.constprop.0+0x1a>
 80045d4:	2430      	movs	r4, #48	; 0x30
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1b5      	bne.n	8004546 <_strtol_l.constprop.0+0x56>
 80045da:	2308      	movs	r3, #8
 80045dc:	e7b3      	b.n	8004546 <_strtol_l.constprop.0+0x56>
 80045de:	2c30      	cmp	r4, #48	; 0x30
 80045e0:	d0a9      	beq.n	8004536 <_strtol_l.constprop.0+0x46>
 80045e2:	230a      	movs	r3, #10
 80045e4:	e7af      	b.n	8004546 <_strtol_l.constprop.0+0x56>
 80045e6:	bf00      	nop
 80045e8:	08004bc5 	.word	0x08004bc5

080045ec <_strtol_r>:
 80045ec:	f7ff bf80 	b.w	80044f0 <_strtol_l.constprop.0>

080045f0 <_strtoul_l.constprop.0>:
 80045f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f4:	4686      	mov	lr, r0
 80045f6:	460d      	mov	r5, r1
 80045f8:	4f35      	ldr	r7, [pc, #212]	; (80046d0 <_strtoul_l.constprop.0+0xe0>)
 80045fa:	4628      	mov	r0, r5
 80045fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004600:	5d3e      	ldrb	r6, [r7, r4]
 8004602:	f016 0608 	ands.w	r6, r6, #8
 8004606:	d1f8      	bne.n	80045fa <_strtoul_l.constprop.0+0xa>
 8004608:	2c2d      	cmp	r4, #45	; 0x2d
 800460a:	d130      	bne.n	800466e <_strtoul_l.constprop.0+0x7e>
 800460c:	2601      	movs	r6, #1
 800460e:	782c      	ldrb	r4, [r5, #0]
 8004610:	1c85      	adds	r5, r0, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d057      	beq.n	80046c6 <_strtoul_l.constprop.0+0xd6>
 8004616:	2b10      	cmp	r3, #16
 8004618:	d109      	bne.n	800462e <_strtoul_l.constprop.0+0x3e>
 800461a:	2c30      	cmp	r4, #48	; 0x30
 800461c:	d107      	bne.n	800462e <_strtoul_l.constprop.0+0x3e>
 800461e:	7828      	ldrb	r0, [r5, #0]
 8004620:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004624:	2858      	cmp	r0, #88	; 0x58
 8004626:	d149      	bne.n	80046bc <_strtoul_l.constprop.0+0xcc>
 8004628:	2310      	movs	r3, #16
 800462a:	786c      	ldrb	r4, [r5, #1]
 800462c:	3502      	adds	r5, #2
 800462e:	f04f 38ff 	mov.w	r8, #4294967295
 8004632:	fbb8 f8f3 	udiv	r8, r8, r3
 8004636:	2700      	movs	r7, #0
 8004638:	fb03 f908 	mul.w	r9, r3, r8
 800463c:	4638      	mov	r0, r7
 800463e:	ea6f 0909 	mvn.w	r9, r9
 8004642:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004646:	f1bc 0f09 	cmp.w	ip, #9
 800464a:	d815      	bhi.n	8004678 <_strtoul_l.constprop.0+0x88>
 800464c:	4664      	mov	r4, ip
 800464e:	42a3      	cmp	r3, r4
 8004650:	dd23      	ble.n	800469a <_strtoul_l.constprop.0+0xaa>
 8004652:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004656:	d007      	beq.n	8004668 <_strtoul_l.constprop.0+0x78>
 8004658:	4580      	cmp	r8, r0
 800465a:	d31b      	bcc.n	8004694 <_strtoul_l.constprop.0+0xa4>
 800465c:	d101      	bne.n	8004662 <_strtoul_l.constprop.0+0x72>
 800465e:	45a1      	cmp	r9, r4
 8004660:	db18      	blt.n	8004694 <_strtoul_l.constprop.0+0xa4>
 8004662:	2701      	movs	r7, #1
 8004664:	fb00 4003 	mla	r0, r0, r3, r4
 8004668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800466c:	e7e9      	b.n	8004642 <_strtoul_l.constprop.0+0x52>
 800466e:	2c2b      	cmp	r4, #43	; 0x2b
 8004670:	bf04      	itt	eq
 8004672:	782c      	ldrbeq	r4, [r5, #0]
 8004674:	1c85      	addeq	r5, r0, #2
 8004676:	e7cc      	b.n	8004612 <_strtoul_l.constprop.0+0x22>
 8004678:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800467c:	f1bc 0f19 	cmp.w	ip, #25
 8004680:	d801      	bhi.n	8004686 <_strtoul_l.constprop.0+0x96>
 8004682:	3c37      	subs	r4, #55	; 0x37
 8004684:	e7e3      	b.n	800464e <_strtoul_l.constprop.0+0x5e>
 8004686:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800468a:	f1bc 0f19 	cmp.w	ip, #25
 800468e:	d804      	bhi.n	800469a <_strtoul_l.constprop.0+0xaa>
 8004690:	3c57      	subs	r4, #87	; 0x57
 8004692:	e7dc      	b.n	800464e <_strtoul_l.constprop.0+0x5e>
 8004694:	f04f 37ff 	mov.w	r7, #4294967295
 8004698:	e7e6      	b.n	8004668 <_strtoul_l.constprop.0+0x78>
 800469a:	1c7b      	adds	r3, r7, #1
 800469c:	d106      	bne.n	80046ac <_strtoul_l.constprop.0+0xbc>
 800469e:	2322      	movs	r3, #34	; 0x22
 80046a0:	4638      	mov	r0, r7
 80046a2:	f8ce 3000 	str.w	r3, [lr]
 80046a6:	b932      	cbnz	r2, 80046b6 <_strtoul_l.constprop.0+0xc6>
 80046a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ac:	b106      	cbz	r6, 80046b0 <_strtoul_l.constprop.0+0xc0>
 80046ae:	4240      	negs	r0, r0
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	d0f9      	beq.n	80046a8 <_strtoul_l.constprop.0+0xb8>
 80046b4:	b107      	cbz	r7, 80046b8 <_strtoul_l.constprop.0+0xc8>
 80046b6:	1e69      	subs	r1, r5, #1
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	e7f5      	b.n	80046a8 <_strtoul_l.constprop.0+0xb8>
 80046bc:	2430      	movs	r4, #48	; 0x30
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1b5      	bne.n	800462e <_strtoul_l.constprop.0+0x3e>
 80046c2:	2308      	movs	r3, #8
 80046c4:	e7b3      	b.n	800462e <_strtoul_l.constprop.0+0x3e>
 80046c6:	2c30      	cmp	r4, #48	; 0x30
 80046c8:	d0a9      	beq.n	800461e <_strtoul_l.constprop.0+0x2e>
 80046ca:	230a      	movs	r3, #10
 80046cc:	e7af      	b.n	800462e <_strtoul_l.constprop.0+0x3e>
 80046ce:	bf00      	nop
 80046d0:	08004bc5 	.word	0x08004bc5

080046d4 <_strtoul_r>:
 80046d4:	f7ff bf8c 	b.w	80045f0 <_strtoul_l.constprop.0>

080046d8 <_malloc_usable_size_r>:
 80046d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046dc:	1f18      	subs	r0, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfbc      	itt	lt
 80046e2:	580b      	ldrlt	r3, [r1, r0]
 80046e4:	18c0      	addlt	r0, r0, r3
 80046e6:	4770      	bx	lr

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
